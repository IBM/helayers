Search.setIndex({"docnames": ["api", "apidoc/pyhelayers", "apidoc/pyhelayers.ActionType", "apidoc/pyhelayers.AesKey", "apidoc/pyhelayers.AggregatorPsiManager", "apidoc/pyhelayers.Arima", "apidoc/pyhelayers.ArimaPlain", "apidoc/pyhelayers.BootstrapConfig", "apidoc/pyhelayers.CTile", "apidoc/pyhelayers.CTileTensor", "apidoc/pyhelayers.CTileTensorVector", "apidoc/pyhelayers.CTileVector", "apidoc/pyhelayers.ComparisonType", "apidoc/pyhelayers.ConjugationSupport", "apidoc/pyhelayers.Crf", "apidoc/pyhelayers.CrfPlain", "apidoc/pyhelayers.DefaultContext", "apidoc/pyhelayers.DeviceType", "apidoc/pyhelayers.DoubleTensor", "apidoc/pyhelayers.Encoder", "apidoc/pyhelayers.EncryptedBatch", "apidoc/pyhelayers.EncryptedData", "apidoc/pyhelayers.EvalType", "apidoc/pyhelayers.Field", "apidoc/pyhelayers.FieldType", "apidoc/pyhelayers.FieldVector", "apidoc/pyhelayers.FileStorage", "apidoc/pyhelayers.FitHyperParams", "apidoc/pyhelayers.FunctionEvaluator", "apidoc/pyhelayers.HeConfigRequirement", "apidoc/pyhelayers.HeContext", "apidoc/pyhelayers.HeModel", "apidoc/pyhelayers.HeModelRunner", "apidoc/pyhelayers.HeProfile", "apidoc/pyhelayers.HeRunRequirements", "apidoc/pyhelayers.HeTraits", "apidoc/pyhelayers.HeaanContext", "apidoc/pyhelayers.HelibBgvContext", "apidoc/pyhelayers.HelibCkksContext", "apidoc/pyhelayers.HelibConfig", "apidoc/pyhelayers.HelibContext", "apidoc/pyhelayers.HelibPreset", "apidoc/pyhelayers.KMeans", "apidoc/pyhelayers.KMeansPlain", "apidoc/pyhelayers.LRActivation", "apidoc/pyhelayers.LattigoContext", "apidoc/pyhelayers.LogisticRegression", "apidoc/pyhelayers.LogisticRegressionPlain", "apidoc/pyhelayers.ModelIoProcessor", "apidoc/pyhelayers.NativeFunctionEvaluator", "apidoc/pyhelayers.NeuralNet", "apidoc/pyhelayers.NeuralNetConfig", "apidoc/pyhelayers.NeuralNetPlain", "apidoc/pyhelayers.NumberConfig", "apidoc/pyhelayers.NumberSigned", "apidoc/pyhelayers.NumberSize", "apidoc/pyhelayers.OptimizationTarget", "apidoc/pyhelayers.PTile", "apidoc/pyhelayers.PTileTensor", "apidoc/pyhelayers.Padding2d", "apidoc/pyhelayers.PlainModel", "apidoc/pyhelayers.PlainModelHyperParams", "apidoc/pyhelayers.PrintOptions", "apidoc/pyhelayers.PublicFunctions", "apidoc/pyhelayers.PythonBackedStorage", "apidoc/pyhelayers.RecordLinkageConfig", "apidoc/pyhelayers.RecordLinkageManager", "apidoc/pyhelayers.RecordLinkagePackage", "apidoc/pyhelayers.RecordLinkageRule", "apidoc/pyhelayers.RecordLinkageRuleType", "apidoc/pyhelayers.RotationSetType", "apidoc/pyhelayers.RtsPsiManager", "apidoc/pyhelayers.SealCkksContext", "apidoc/pyhelayers.Storage", "apidoc/pyhelayers.TTDim", "apidoc/pyhelayers.TTEncoder", "apidoc/pyhelayers.TTFunctionEvaluator", "apidoc/pyhelayers.TTShape", "apidoc/pyhelayers.Table", "apidoc/pyhelayers.Tile", "apidoc/pyhelayers.TileTensor", "apidoc/pyhelayers.Verbosity", "apidoc/pyhelayers.XGBoost", "apidoc/pyhelayers.XGBoostPlain", "apidoc/pyhelayers.decrypt_default_aes_encrypted_blocks_under_fhe", "apidoc/pyhelayers.ext", "apidoc/pyhelayers.ext.MODEL_ARCH", "apidoc/pyhelayers.ext.pyfhe", "apidoc/pyhelayers.ext.pyfhecommon", "apidoc/pyhelayers.ext.pyfhecommon.ABC", "apidoc/pyhelayers.ext.pyfhecommon.abstractmethod", "apidoc/pyhelayers.ext.pyfhemlimpl", "apidoc/pyhelayers.ext.pyfhemlimpl.pyfheml", "apidoc/pyhelayers.ext.pyfhemlimpl.pyfheml.MODEL_ARCH", "apidoc/pyhelayers.ext.replace", "apidoc/pyhelayers.ext.utils", "apidoc/pyhelayers.ext.utils.end_timer", "apidoc/pyhelayers.ext.utils.extract_batch", "apidoc/pyhelayers.ext.utils.report_duration", "apidoc/pyhelayers.ext.utils.start_timer", "apidoc/pyhelayers.get_print_options", "apidoc/pyhelayers.load_encrypted_data", "apidoc/pyhelayers.load_he_context", "apidoc/pyhelayers.load_he_context_from_file", "apidoc/pyhelayers.load_he_model", "apidoc/pyhelayers.load_io_processor", "apidoc/pyhelayers.mltoolbox", "apidoc/pyhelayers.mltoolbox.arguments", "apidoc/pyhelayers.mltoolbox.arguments.Arguments", "apidoc/pyhelayers.mltoolbox.data_loader", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.Subset", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.get_logger", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.per_image_standardization", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.train_test_split", "apidoc/pyhelayers.mltoolbox.data_loader.covidCT_dataset", "apidoc/pyhelayers.mltoolbox.data_loader.covidCT_dataset.CovidCTDataset", "apidoc/pyhelayers.mltoolbox.data_loader.covidCT_dataset.Dataset", "apidoc/pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper", "apidoc/pyhelayers.mltoolbox.data_loader.covidCT_dataset.get_logger", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.CovidXrayDataset", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.Dataset", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.get_logger", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.read_filepaths", "apidoc/pyhelayers.mltoolbox.data_loader.dataset_wrapper", "apidoc/pyhelayers.mltoolbox.data_loader.dataset_wrapper.Dataset", "apidoc/pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper", "apidoc/pyhelayers.mltoolbox.data_loader.dataset_wrapper.get_logger", "apidoc/pyhelayers.mltoolbox.data_loader.ds_factory", "apidoc/pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper", "apidoc/pyhelayers.mltoolbox.data_loader.ds_factory.get_logger", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.Dataset", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.Subset", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.get_logger", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.places205Dataset", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.random_split", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.train_test_split", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.FheFriendlyConvertor", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.ReduceLROnPlateau", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.SimpleNamespace", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.get_logger", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.get_optimizer", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.load_checkpoint", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.set_seed", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.starting_point", "apidoc/pyhelayers.mltoolbox.he_dl_lib", "apidoc/pyhelayers.mltoolbox.he_dl_lib.distillation", "apidoc/pyhelayers.mltoolbox.he_dl_lib.distillation.nd_loss", "apidoc/pyhelayers.mltoolbox.he_dl_lib.my_logger", "apidoc/pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger", "apidoc/pyhelayers.mltoolbox.he_dl_lib.my_logger.get_logger", "apidoc/pyhelayers.mltoolbox.he_dl_lib.my_logger.set_logger", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.change_module", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.create_or_update_weighted_activations", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.find_modules_by_type", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.forward_iterative_relu", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_activation_gen", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_logger", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_module_by_name", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_relu_activations", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.iterative_sqrt", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.poly_activation_non_trainable", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.replace_relu_activation", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.replace_relu_activations", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.round_noise_activation", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.set_activation_layer", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.square_activation", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.srelu_poly_activation", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.tryout", "apidoc/pyhelayers.mltoolbox.he_dl_lib.singleton", "apidoc/pyhelayers.mltoolbox.he_dl_lib.timers", "apidoc/pyhelayers.mltoolbox.he_dl_lib.timers.get_logger", "apidoc/pyhelayers.mltoolbox.he_dl_lib.timers.perf_counter", "apidoc/pyhelayers.mltoolbox.model", "apidoc/pyhelayers.mltoolbox.model.DNN_factory", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.Lenet5", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.get_logger", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.get_model", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.get_model_by_name", "apidoc/pyhelayers.mltoolbox.model.alexnet_fhe", "apidoc/pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe", "apidoc/pyhelayers.mltoolbox.model.lenet5", "apidoc/pyhelayers.mltoolbox.model.lenet5.Lenet5", "apidoc/pyhelayers.mltoolbox.model.lenet5.lenet5", "apidoc/pyhelayers.mltoolbox.model.nn_module", "apidoc/pyhelayers.mltoolbox.model.nn_module.tensor", "apidoc/pyhelayers.mltoolbox.model.squeezenet", "apidoc/pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE", "apidoc/pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE", "apidoc/pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE", "apidoc/pyhelayers.mltoolbox.model.squeezenetchet", "apidoc/pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET", "apidoc/pyhelayers.mltoolbox.model.squeezenetchet.squeezenet_chet", "apidoc/pyhelayers.mltoolbox.trainer", "apidoc/pyhelayers.mltoolbox.trainer.CovidCTDataset", "apidoc/pyhelayers.mltoolbox.trainer.CovidXrayDataset", "apidoc/pyhelayers.mltoolbox.trainer.DDP", "apidoc/pyhelayers.mltoolbox.trainer.DataLoader", "apidoc/pyhelayers.mltoolbox.trainer.DistributedSampler", "apidoc/pyhelayers.mltoolbox.trainer.SimpleNamespace", "apidoc/pyhelayers.mltoolbox.trainer.Trainer", "apidoc/pyhelayers.mltoolbox.trainer.accuracy", "apidoc/pyhelayers.mltoolbox.trainer.get_logger", "apidoc/pyhelayers.mltoolbox.trainer.get_model_by_name", "apidoc/pyhelayers.mltoolbox.trainer.get_optimizer", "apidoc/pyhelayers.mltoolbox.trainer.load_checkpoint", "apidoc/pyhelayers.mltoolbox.trainer.make_confusion_matrix", "apidoc/pyhelayers.mltoolbox.trainer.nd_loss", "apidoc/pyhelayers.mltoolbox.trainer.places205Dataset", "apidoc/pyhelayers.mltoolbox.trainer.print_summary", "apidoc/pyhelayers.mltoolbox.trainer.top_k_acc", "apidoc/pyhelayers.mltoolbox.trainer.tqdm", "apidoc/pyhelayers.mltoolbox.utils", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.comp_confusion_matrix", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.confusion_matrix", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.format_acc_results", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.get_accuracy_metrics", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.get_logger", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.hmean", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.make_1d_labels", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.make_confusion_matrix", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.namedtuple", "apidoc/pyhelayers.mltoolbox.utils.metrics_tracker", "apidoc/pyhelayers.mltoolbox.utils.training_debug", "apidoc/pyhelayers.mltoolbox.utils.util", "apidoc/pyhelayers.mltoolbox.utils.util.accuracy", "apidoc/pyhelayers.mltoolbox.utils.util.create_log_title", "apidoc/pyhelayers.mltoolbox.utils.util.date_str", "apidoc/pyhelayers.mltoolbox.utils.util.datetime", "apidoc/pyhelayers.mltoolbox.utils.util.get_logger", "apidoc/pyhelayers.mltoolbox.utils.util.get_optimizer", "apidoc/pyhelayers.mltoolbox.utils.util.has_nan", "apidoc/pyhelayers.mltoolbox.utils.util.load_checkpoint", "apidoc/pyhelayers.mltoolbox.utils.util.postproc_model", "apidoc/pyhelayers.mltoolbox.utils.util.print_summary", "apidoc/pyhelayers.mltoolbox.utils.util.read_filepaths", "apidoc/pyhelayers.mltoolbox.utils.util.save_checkpoint", "apidoc/pyhelayers.mltoolbox.utils.util.save_model", "apidoc/pyhelayers.mltoolbox.utils.util.save_onnx", "apidoc/pyhelayers.mltoolbox.utils.util.top_k_acc", "apidoc/pyhelayers.mltoolbox.utils.util.write_to_csv", "apidoc/pyhelayers.prepare_default_plain_blocks_for_aes_encryption", "apidoc/pyhelayers.set_neural_net_verbosity_level", "index", "install"], "filenames": ["api.rst", "apidoc/pyhelayers.rst", "apidoc/pyhelayers.ActionType.rst", "apidoc/pyhelayers.AesKey.rst", "apidoc/pyhelayers.AggregatorPsiManager.rst", "apidoc/pyhelayers.Arima.rst", "apidoc/pyhelayers.ArimaPlain.rst", "apidoc/pyhelayers.BootstrapConfig.rst", "apidoc/pyhelayers.CTile.rst", "apidoc/pyhelayers.CTileTensor.rst", "apidoc/pyhelayers.CTileTensorVector.rst", "apidoc/pyhelayers.CTileVector.rst", "apidoc/pyhelayers.ComparisonType.rst", "apidoc/pyhelayers.ConjugationSupport.rst", "apidoc/pyhelayers.Crf.rst", "apidoc/pyhelayers.CrfPlain.rst", "apidoc/pyhelayers.DefaultContext.rst", "apidoc/pyhelayers.DeviceType.rst", "apidoc/pyhelayers.DoubleTensor.rst", "apidoc/pyhelayers.Encoder.rst", "apidoc/pyhelayers.EncryptedBatch.rst", "apidoc/pyhelayers.EncryptedData.rst", "apidoc/pyhelayers.EvalType.rst", "apidoc/pyhelayers.Field.rst", "apidoc/pyhelayers.FieldType.rst", "apidoc/pyhelayers.FieldVector.rst", "apidoc/pyhelayers.FileStorage.rst", "apidoc/pyhelayers.FitHyperParams.rst", "apidoc/pyhelayers.FunctionEvaluator.rst", "apidoc/pyhelayers.HeConfigRequirement.rst", "apidoc/pyhelayers.HeContext.rst", "apidoc/pyhelayers.HeModel.rst", "apidoc/pyhelayers.HeModelRunner.rst", "apidoc/pyhelayers.HeProfile.rst", "apidoc/pyhelayers.HeRunRequirements.rst", "apidoc/pyhelayers.HeTraits.rst", "apidoc/pyhelayers.HeaanContext.rst", "apidoc/pyhelayers.HelibBgvContext.rst", "apidoc/pyhelayers.HelibCkksContext.rst", "apidoc/pyhelayers.HelibConfig.rst", "apidoc/pyhelayers.HelibContext.rst", "apidoc/pyhelayers.HelibPreset.rst", "apidoc/pyhelayers.KMeans.rst", "apidoc/pyhelayers.KMeansPlain.rst", "apidoc/pyhelayers.LRActivation.rst", "apidoc/pyhelayers.LattigoContext.rst", "apidoc/pyhelayers.LogisticRegression.rst", "apidoc/pyhelayers.LogisticRegressionPlain.rst", "apidoc/pyhelayers.ModelIoProcessor.rst", "apidoc/pyhelayers.NativeFunctionEvaluator.rst", "apidoc/pyhelayers.NeuralNet.rst", "apidoc/pyhelayers.NeuralNetConfig.rst", "apidoc/pyhelayers.NeuralNetPlain.rst", "apidoc/pyhelayers.NumberConfig.rst", "apidoc/pyhelayers.NumberSigned.rst", "apidoc/pyhelayers.NumberSize.rst", "apidoc/pyhelayers.OptimizationTarget.rst", "apidoc/pyhelayers.PTile.rst", "apidoc/pyhelayers.PTileTensor.rst", "apidoc/pyhelayers.Padding2d.rst", "apidoc/pyhelayers.PlainModel.rst", "apidoc/pyhelayers.PlainModelHyperParams.rst", "apidoc/pyhelayers.PrintOptions.rst", "apidoc/pyhelayers.PublicFunctions.rst", "apidoc/pyhelayers.PythonBackedStorage.rst", "apidoc/pyhelayers.RecordLinkageConfig.rst", "apidoc/pyhelayers.RecordLinkageManager.rst", "apidoc/pyhelayers.RecordLinkagePackage.rst", "apidoc/pyhelayers.RecordLinkageRule.rst", "apidoc/pyhelayers.RecordLinkageRuleType.rst", "apidoc/pyhelayers.RotationSetType.rst", "apidoc/pyhelayers.RtsPsiManager.rst", "apidoc/pyhelayers.SealCkksContext.rst", "apidoc/pyhelayers.Storage.rst", "apidoc/pyhelayers.TTDim.rst", "apidoc/pyhelayers.TTEncoder.rst", "apidoc/pyhelayers.TTFunctionEvaluator.rst", "apidoc/pyhelayers.TTShape.rst", "apidoc/pyhelayers.Table.rst", "apidoc/pyhelayers.Tile.rst", "apidoc/pyhelayers.TileTensor.rst", "apidoc/pyhelayers.Verbosity.rst", "apidoc/pyhelayers.XGBoost.rst", "apidoc/pyhelayers.XGBoostPlain.rst", "apidoc/pyhelayers.decrypt_default_aes_encrypted_blocks_under_fhe.rst", "apidoc/pyhelayers.ext.rst", "apidoc/pyhelayers.ext.MODEL_ARCH.rst", "apidoc/pyhelayers.ext.pyfhe.rst", "apidoc/pyhelayers.ext.pyfhecommon.rst", "apidoc/pyhelayers.ext.pyfhecommon.ABC.rst", "apidoc/pyhelayers.ext.pyfhecommon.abstractmethod.rst", "apidoc/pyhelayers.ext.pyfhemlimpl.rst", "apidoc/pyhelayers.ext.pyfhemlimpl.pyfheml.rst", "apidoc/pyhelayers.ext.pyfhemlimpl.pyfheml.MODEL_ARCH.rst", "apidoc/pyhelayers.ext.replace.rst", "apidoc/pyhelayers.ext.utils.rst", "apidoc/pyhelayers.ext.utils.end_timer.rst", "apidoc/pyhelayers.ext.utils.extract_batch.rst", "apidoc/pyhelayers.ext.utils.report_duration.rst", "apidoc/pyhelayers.ext.utils.start_timer.rst", "apidoc/pyhelayers.get_print_options.rst", "apidoc/pyhelayers.load_encrypted_data.rst", "apidoc/pyhelayers.load_he_context.rst", "apidoc/pyhelayers.load_he_context_from_file.rst", "apidoc/pyhelayers.load_he_model.rst", "apidoc/pyhelayers.load_io_processor.rst", "apidoc/pyhelayers.mltoolbox.rst", "apidoc/pyhelayers.mltoolbox.arguments.rst", "apidoc/pyhelayers.mltoolbox.arguments.Arguments.rst", "apidoc/pyhelayers.mltoolbox.data_loader.rst", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper.rst", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.Subset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.get_logger.rst", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.per_image_standardization.rst", "apidoc/pyhelayers.mltoolbox.data_loader.cifar10_dataset.train_test_split.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidCT_dataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidCT_dataset.CovidCTDataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidCT_dataset.Dataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidCT_dataset.get_logger.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.CovidXrayDataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.Dataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.get_logger.rst", "apidoc/pyhelayers.mltoolbox.data_loader.covidXray_dataset.read_filepaths.rst", "apidoc/pyhelayers.mltoolbox.data_loader.dataset_wrapper.rst", "apidoc/pyhelayers.mltoolbox.data_loader.dataset_wrapper.Dataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper.rst", "apidoc/pyhelayers.mltoolbox.data_loader.dataset_wrapper.get_logger.rst", "apidoc/pyhelayers.mltoolbox.data_loader.ds_factory.rst", "apidoc/pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper.rst", "apidoc/pyhelayers.mltoolbox.data_loader.ds_factory.get_logger.rst", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.Dataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper.rst", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.Subset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.get_logger.rst", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.places205Dataset.rst", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.random_split.rst", "apidoc/pyhelayers.mltoolbox.data_loader.places205_dataset.train_test_split.rst", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.rst", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.FheFriendlyConvertor.rst", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.ReduceLROnPlateau.rst", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.SimpleNamespace.rst", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer.rst", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.get_logger.rst", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.get_optimizer.rst", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.load_checkpoint.rst", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.set_seed.rst", "apidoc/pyhelayers.mltoolbox.fhe_friendly_convertor.starting_point.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.distillation.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.distillation.nd_loss.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.my_logger.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.my_logger.get_logger.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.my_logger.set_logger.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.change_module.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.create_or_update_weighted_activations.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.find_modules_by_type.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.forward_iterative_relu.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_activation_gen.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_logger.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_module_by_name.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_relu_activations.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.iterative_sqrt.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.poly_activation_non_trainable.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.replace_relu_activation.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.replace_relu_activations.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.round_noise_activation.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.set_activation_layer.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.square_activation.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.srelu_poly_activation.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.poly_activations.tryout.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.singleton.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.timers.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.timers.get_logger.rst", "apidoc/pyhelayers.mltoolbox.he_dl_lib.timers.perf_counter.rst", "apidoc/pyhelayers.mltoolbox.model.rst", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.rst", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.Lenet5.rst", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.rst", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.rst", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.rst", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.rst", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.get_logger.rst", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.get_model.rst", "apidoc/pyhelayers.mltoolbox.model.DNN_factory.get_model_by_name.rst", "apidoc/pyhelayers.mltoolbox.model.alexnet_fhe.rst", "apidoc/pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.rst", "apidoc/pyhelayers.mltoolbox.model.lenet5.rst", "apidoc/pyhelayers.mltoolbox.model.lenet5.Lenet5.rst", "apidoc/pyhelayers.mltoolbox.model.lenet5.lenet5.rst", "apidoc/pyhelayers.mltoolbox.model.nn_module.rst", "apidoc/pyhelayers.mltoolbox.model.nn_module.tensor.rst", "apidoc/pyhelayers.mltoolbox.model.squeezenet.rst", "apidoc/pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.rst", "apidoc/pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.rst", "apidoc/pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.rst", "apidoc/pyhelayers.mltoolbox.model.squeezenetchet.rst", "apidoc/pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.rst", "apidoc/pyhelayers.mltoolbox.model.squeezenetchet.squeezenet_chet.rst", "apidoc/pyhelayers.mltoolbox.trainer.rst", "apidoc/pyhelayers.mltoolbox.trainer.CovidCTDataset.rst", "apidoc/pyhelayers.mltoolbox.trainer.CovidXrayDataset.rst", "apidoc/pyhelayers.mltoolbox.trainer.DDP.rst", "apidoc/pyhelayers.mltoolbox.trainer.DataLoader.rst", "apidoc/pyhelayers.mltoolbox.trainer.DistributedSampler.rst", "apidoc/pyhelayers.mltoolbox.trainer.SimpleNamespace.rst", "apidoc/pyhelayers.mltoolbox.trainer.Trainer.rst", "apidoc/pyhelayers.mltoolbox.trainer.accuracy.rst", "apidoc/pyhelayers.mltoolbox.trainer.get_logger.rst", "apidoc/pyhelayers.mltoolbox.trainer.get_model_by_name.rst", "apidoc/pyhelayers.mltoolbox.trainer.get_optimizer.rst", "apidoc/pyhelayers.mltoolbox.trainer.load_checkpoint.rst", "apidoc/pyhelayers.mltoolbox.trainer.make_confusion_matrix.rst", "apidoc/pyhelayers.mltoolbox.trainer.nd_loss.rst", "apidoc/pyhelayers.mltoolbox.trainer.places205Dataset.rst", "apidoc/pyhelayers.mltoolbox.trainer.print_summary.rst", "apidoc/pyhelayers.mltoolbox.trainer.top_k_acc.rst", "apidoc/pyhelayers.mltoolbox.trainer.tqdm.rst", "apidoc/pyhelayers.mltoolbox.utils.rst", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.rst", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.comp_confusion_matrix.rst", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.confusion_matrix.rst", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.format_acc_results.rst", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.get_accuracy_metrics.rst", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.get_logger.rst", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.hmean.rst", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.make_1d_labels.rst", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.make_confusion_matrix.rst", "apidoc/pyhelayers.mltoolbox.utils.cf_matrix.namedtuple.rst", "apidoc/pyhelayers.mltoolbox.utils.metrics_tracker.rst", "apidoc/pyhelayers.mltoolbox.utils.training_debug.rst", "apidoc/pyhelayers.mltoolbox.utils.util.rst", "apidoc/pyhelayers.mltoolbox.utils.util.accuracy.rst", "apidoc/pyhelayers.mltoolbox.utils.util.create_log_title.rst", "apidoc/pyhelayers.mltoolbox.utils.util.date_str.rst", "apidoc/pyhelayers.mltoolbox.utils.util.datetime.rst", "apidoc/pyhelayers.mltoolbox.utils.util.get_logger.rst", "apidoc/pyhelayers.mltoolbox.utils.util.get_optimizer.rst", "apidoc/pyhelayers.mltoolbox.utils.util.has_nan.rst", "apidoc/pyhelayers.mltoolbox.utils.util.load_checkpoint.rst", "apidoc/pyhelayers.mltoolbox.utils.util.postproc_model.rst", "apidoc/pyhelayers.mltoolbox.utils.util.print_summary.rst", "apidoc/pyhelayers.mltoolbox.utils.util.read_filepaths.rst", "apidoc/pyhelayers.mltoolbox.utils.util.save_checkpoint.rst", "apidoc/pyhelayers.mltoolbox.utils.util.save_model.rst", "apidoc/pyhelayers.mltoolbox.utils.util.save_onnx.rst", "apidoc/pyhelayers.mltoolbox.utils.util.top_k_acc.rst", "apidoc/pyhelayers.mltoolbox.utils.util.write_to_csv.rst", "apidoc/pyhelayers.prepare_default_plain_blocks_for_aes_encryption.rst", "apidoc/pyhelayers.set_neural_net_verbosity_level.rst", "index.rst", "install.rst"], "titles": ["pyhelayers API", "pyhelayers", "pyhelayers.ActionType", "pyhelayers.AesKey", "pyhelayers.AggregatorPsiManager", "pyhelayers.Arima", "pyhelayers.ArimaPlain", "pyhelayers.BootstrapConfig", "pyhelayers.CTile", "pyhelayers.CTileTensor", "pyhelayers.CTileTensorVector", "pyhelayers.CTileVector", "pyhelayers.ComparisonType", "pyhelayers.ConjugationSupport", "pyhelayers.Crf", "pyhelayers.CrfPlain", "pyhelayers.DefaultContext", "pyhelayers.DeviceType", "pyhelayers.DoubleTensor", "pyhelayers.Encoder", "pyhelayers.EncryptedBatch", "pyhelayers.EncryptedData", "pyhelayers.EvalType", "pyhelayers.Field", "pyhelayers.FieldType", "pyhelayers.FieldVector", "pyhelayers.FileStorage", "pyhelayers.FitHyperParams", "pyhelayers.FunctionEvaluator", "pyhelayers.HeConfigRequirement", "pyhelayers.HeContext", "pyhelayers.HeModel", "pyhelayers.HeModelRunner", "pyhelayers.HeProfile", "pyhelayers.HeRunRequirements", "pyhelayers.HeTraits", "pyhelayers.HeaanContext", "pyhelayers.HelibBgvContext", "pyhelayers.HelibCkksContext", "pyhelayers.HelibConfig", "pyhelayers.HelibContext", "pyhelayers.HelibPreset", "pyhelayers.KMeans", "pyhelayers.KMeansPlain", "pyhelayers.LRActivation", "pyhelayers.LattigoContext", "pyhelayers.LogisticRegression", "pyhelayers.LogisticRegressionPlain", "pyhelayers.ModelIoProcessor", "pyhelayers.NativeFunctionEvaluator", "pyhelayers.NeuralNet", "pyhelayers.NeuralNetConfig", "pyhelayers.NeuralNetPlain", "pyhelayers.NumberConfig", "pyhelayers.NumberSigned", "pyhelayers.NumberSize", "pyhelayers.OptimizationTarget", "pyhelayers.PTile", "pyhelayers.PTileTensor", "pyhelayers.Padding2d", "pyhelayers.PlainModel", "pyhelayers.PlainModelHyperParams", "pyhelayers.PrintOptions", "pyhelayers.PublicFunctions", "pyhelayers.PythonBackedStorage", "pyhelayers.RecordLinkageConfig", "pyhelayers.RecordLinkageManager", "pyhelayers.RecordLinkagePackage", "pyhelayers.RecordLinkageRule", "pyhelayers.RecordLinkageRuleType", "pyhelayers.RotationSetType", "pyhelayers.RtsPsiManager", "pyhelayers.SealCkksContext", "pyhelayers.Storage", "pyhelayers.TTDim", "pyhelayers.TTEncoder", "pyhelayers.TTFunctionEvaluator", "pyhelayers.TTShape", "pyhelayers.Table", "pyhelayers.Tile", "pyhelayers.TileTensor", "pyhelayers.Verbosity", "pyhelayers.XGBoost", "pyhelayers.XGBoostPlain", "pyhelayers.decrypt_default_aes_encrypted_blocks_under_fhe", "pyhelayers.ext", "pyhelayers.ext.MODEL_ARCH", "pyhelayers.ext.pyfhe", "pyhelayers.ext.pyfhecommon", "pyhelayers.ext.pyfhecommon.ABC", "pyhelayers.ext.pyfhecommon.abstractmethod", "pyhelayers.ext.pyfhemlimpl", "pyhelayers.ext.pyfhemlimpl.pyfheml", "pyhelayers.ext.pyfhemlimpl.pyfheml.MODEL_ARCH", "pyhelayers.ext.replace", "pyhelayers.ext.utils", "pyhelayers.ext.utils.end_timer", "pyhelayers.ext.utils.extract_batch", "pyhelayers.ext.utils.report_duration", "pyhelayers.ext.utils.start_timer", "pyhelayers.get_print_options", "pyhelayers.load_encrypted_data", "pyhelayers.load_he_context", "pyhelayers.load_he_context_from_file", "pyhelayers.load_he_model", "pyhelayers.load_io_processor", "pyhelayers.mltoolbox", "pyhelayers.mltoolbox.arguments", "pyhelayers.mltoolbox.arguments.Arguments", "pyhelayers.mltoolbox.data_loader", "pyhelayers.mltoolbox.data_loader.cifar10_dataset", "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset", "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper", "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Subset", "pyhelayers.mltoolbox.data_loader.cifar10_dataset.get_logger", "pyhelayers.mltoolbox.data_loader.cifar10_dataset.per_image_standardization", "pyhelayers.mltoolbox.data_loader.cifar10_dataset.train_test_split", "pyhelayers.mltoolbox.data_loader.covidCT_dataset", "pyhelayers.mltoolbox.data_loader.covidCT_dataset.CovidCTDataset", "pyhelayers.mltoolbox.data_loader.covidCT_dataset.Dataset", "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper", "pyhelayers.mltoolbox.data_loader.covidCT_dataset.get_logger", "pyhelayers.mltoolbox.data_loader.covidXray_dataset", "pyhelayers.mltoolbox.data_loader.covidXray_dataset.CovidXrayDataset", "pyhelayers.mltoolbox.data_loader.covidXray_dataset.Dataset", "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper", "pyhelayers.mltoolbox.data_loader.covidXray_dataset.get_logger", "pyhelayers.mltoolbox.data_loader.covidXray_dataset.read_filepaths", "pyhelayers.mltoolbox.data_loader.dataset_wrapper", "pyhelayers.mltoolbox.data_loader.dataset_wrapper.Dataset", "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper", "pyhelayers.mltoolbox.data_loader.dataset_wrapper.get_logger", "pyhelayers.mltoolbox.data_loader.ds_factory", "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper", "pyhelayers.mltoolbox.data_loader.ds_factory.get_logger", "pyhelayers.mltoolbox.data_loader.places205_dataset", "pyhelayers.mltoolbox.data_loader.places205_dataset.Dataset", "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper", "pyhelayers.mltoolbox.data_loader.places205_dataset.Subset", "pyhelayers.mltoolbox.data_loader.places205_dataset.get_logger", "pyhelayers.mltoolbox.data_loader.places205_dataset.places205Dataset", "pyhelayers.mltoolbox.data_loader.places205_dataset.random_split", "pyhelayers.mltoolbox.data_loader.places205_dataset.train_test_split", "pyhelayers.mltoolbox.fhe_friendly_convertor", "pyhelayers.mltoolbox.fhe_friendly_convertor.FheFriendlyConvertor", "pyhelayers.mltoolbox.fhe_friendly_convertor.ReduceLROnPlateau", "pyhelayers.mltoolbox.fhe_friendly_convertor.SimpleNamespace", "pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer", "pyhelayers.mltoolbox.fhe_friendly_convertor.get_logger", "pyhelayers.mltoolbox.fhe_friendly_convertor.get_optimizer", "pyhelayers.mltoolbox.fhe_friendly_convertor.load_checkpoint", "pyhelayers.mltoolbox.fhe_friendly_convertor.set_seed", "pyhelayers.mltoolbox.fhe_friendly_convertor.starting_point", "pyhelayers.mltoolbox.he_dl_lib", "pyhelayers.mltoolbox.he_dl_lib.distillation", "pyhelayers.mltoolbox.he_dl_lib.distillation.nd_loss", "pyhelayers.mltoolbox.he_dl_lib.my_logger", "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger", "pyhelayers.mltoolbox.he_dl_lib.my_logger.get_logger", "pyhelayers.mltoolbox.he_dl_lib.my_logger.set_logger", "pyhelayers.mltoolbox.he_dl_lib.poly_activations", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.change_module", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.create_or_update_weighted_activations", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.find_modules_by_type", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.forward_iterative_relu", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_activation_gen", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_logger", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_module_by_name", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_relu_activations", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.iterative_sqrt", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.poly_activation_non_trainable", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.replace_relu_activation", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.replace_relu_activations", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.round_noise_activation", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.set_activation_layer", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.square_activation", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.srelu_poly_activation", "pyhelayers.mltoolbox.he_dl_lib.poly_activations.tryout", "pyhelayers.mltoolbox.he_dl_lib.singleton", "pyhelayers.mltoolbox.he_dl_lib.timers", "pyhelayers.mltoolbox.he_dl_lib.timers.get_logger", "pyhelayers.mltoolbox.he_dl_lib.timers.perf_counter", "pyhelayers.mltoolbox.model", "pyhelayers.mltoolbox.model.DNN_factory", "pyhelayers.mltoolbox.model.DNN_factory.Lenet5", "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE", "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE", "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET", "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe", "pyhelayers.mltoolbox.model.DNN_factory.get_logger", "pyhelayers.mltoolbox.model.DNN_factory.get_model", "pyhelayers.mltoolbox.model.DNN_factory.get_model_by_name", "pyhelayers.mltoolbox.model.alexnet_fhe", "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe", "pyhelayers.mltoolbox.model.lenet5", "pyhelayers.mltoolbox.model.lenet5.Lenet5", "pyhelayers.mltoolbox.model.lenet5.lenet5", "pyhelayers.mltoolbox.model.nn_module", "pyhelayers.mltoolbox.model.nn_module.tensor", "pyhelayers.mltoolbox.model.squeezenet", "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE", "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE", "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE", "pyhelayers.mltoolbox.model.squeezenetchet", "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET", "pyhelayers.mltoolbox.model.squeezenetchet.squeezenet_chet", "pyhelayers.mltoolbox.trainer", "pyhelayers.mltoolbox.trainer.CovidCTDataset", "pyhelayers.mltoolbox.trainer.CovidXrayDataset", "pyhelayers.mltoolbox.trainer.DDP", "pyhelayers.mltoolbox.trainer.DataLoader", "pyhelayers.mltoolbox.trainer.DistributedSampler", "pyhelayers.mltoolbox.trainer.SimpleNamespace", "pyhelayers.mltoolbox.trainer.Trainer", "pyhelayers.mltoolbox.trainer.accuracy", "pyhelayers.mltoolbox.trainer.get_logger", "pyhelayers.mltoolbox.trainer.get_model_by_name", "pyhelayers.mltoolbox.trainer.get_optimizer", "pyhelayers.mltoolbox.trainer.load_checkpoint", "pyhelayers.mltoolbox.trainer.make_confusion_matrix", "pyhelayers.mltoolbox.trainer.nd_loss", "pyhelayers.mltoolbox.trainer.places205Dataset", "pyhelayers.mltoolbox.trainer.print_summary", "pyhelayers.mltoolbox.trainer.top_k_acc", "pyhelayers.mltoolbox.trainer.tqdm", "pyhelayers.mltoolbox.utils", "pyhelayers.mltoolbox.utils.cf_matrix", "pyhelayers.mltoolbox.utils.cf_matrix.comp_confusion_matrix", "pyhelayers.mltoolbox.utils.cf_matrix.confusion_matrix", "pyhelayers.mltoolbox.utils.cf_matrix.format_acc_results", "pyhelayers.mltoolbox.utils.cf_matrix.get_accuracy_metrics", "pyhelayers.mltoolbox.utils.cf_matrix.get_logger", "pyhelayers.mltoolbox.utils.cf_matrix.hmean", "pyhelayers.mltoolbox.utils.cf_matrix.make_1d_labels", "pyhelayers.mltoolbox.utils.cf_matrix.make_confusion_matrix", "pyhelayers.mltoolbox.utils.cf_matrix.namedtuple", "pyhelayers.mltoolbox.utils.metrics_tracker", "pyhelayers.mltoolbox.utils.training_debug", "pyhelayers.mltoolbox.utils.util", "pyhelayers.mltoolbox.utils.util.accuracy", "pyhelayers.mltoolbox.utils.util.create_log_title", "pyhelayers.mltoolbox.utils.util.date_str", "pyhelayers.mltoolbox.utils.util.datetime", "pyhelayers.mltoolbox.utils.util.get_logger", "pyhelayers.mltoolbox.utils.util.get_optimizer", "pyhelayers.mltoolbox.utils.util.has_nan", "pyhelayers.mltoolbox.utils.util.load_checkpoint", "pyhelayers.mltoolbox.utils.util.postproc_model", "pyhelayers.mltoolbox.utils.util.print_summary", "pyhelayers.mltoolbox.utils.util.read_filepaths", "pyhelayers.mltoolbox.utils.util.save_checkpoint", "pyhelayers.mltoolbox.utils.util.save_model", "pyhelayers.mltoolbox.utils.util.save_onnx", "pyhelayers.mltoolbox.utils.util.top_k_acc", "pyhelayers.mltoolbox.utils.util.write_to_csv", "pyhelayers.prepare_default_plain_blocks_for_aes_encryption", "pyhelayers.set_neural_net_verbosity_level", "pyhelayers documentation", "Installing pyhelayers"], "terms": {"There": [0, 157, 163], "": [0, 5, 6, 8, 9, 14, 15, 19, 30, 31, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 50, 52, 57, 58, 60, 62, 63, 66, 71, 72, 74, 78, 80, 82, 83, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231, 249], "onli": [0, 3, 5, 6, 8, 9, 14, 15, 20, 21, 28, 29, 30, 31, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 51, 52, 57, 58, 60, 62, 63, 66, 71, 72, 74, 76, 78, 79, 80, 82, 83, 145, 161, 162, 163, 164, 165, 166, 167, 169, 179, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 231, 265], "one": [0, 8, 9, 14, 19, 23, 51, 62, 63, 66, 112, 120, 125, 130, 133, 137, 157, 163, 172, 191, 192, 193, 194, 195, 198, 200, 202, 207, 208, 209, 211, 217, 223, 239], "python": [0, 64, 157, 163, 231], "modul": [0, 1, 4, 71, 85, 91, 106, 109, 149, 150, 153, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 178, 189, 191, 192, 193, 194, 195, 197, 198, 200, 202, 207, 208, 209, 211, 223, 224, 225, 232, 242, 251, 253, 264], "ibm": [1, 264], "helay": [1, 3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 62, 78, 79, 80, 82, 264], "i": [1, 3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 19, 20, 21, 22, 23, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 57, 58, 60, 61, 62, 63, 64, 66, 68, 70, 71, 72, 74, 76, 77, 78, 79, 80, 82, 83, 85, 90, 102, 103, 111, 112, 115, 116, 118, 119, 120, 124, 125, 129, 130, 133, 136, 137, 140, 141, 142, 145, 147, 150, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 214, 217, 218, 220, 221, 225, 226, 228, 230, 231, 235, 239, 241, 242, 246, 249, 253, 254, 259, 260, 263, 264], "softwar": [1, 264], "develop": [1, 157, 264], "kit": [1, 264], "sdk": [1, 264], "practic": [1, 217, 264], "effici": [1, 49, 163, 231, 264], "execut": [1, 29, 76, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 263, 264], "encrypt": [1, 3, 5, 8, 9, 14, 19, 20, 21, 24, 25, 28, 31, 32, 33, 34, 42, 46, 48, 50, 58, 63, 66, 71, 75, 76, 78, 79, 80, 82, 84, 101, 262, 264], "workload": [1, 264], "us": [1, 4, 5, 6, 8, 9, 13, 14, 18, 19, 22, 23, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 51, 52, 57, 58, 59, 60, 61, 62, 64, 65, 66, 70, 71, 72, 74, 75, 76, 78, 79, 80, 82, 83, 89, 90, 112, 115, 116, 120, 125, 130, 133, 137, 141, 142, 147, 157, 161, 162, 163, 164, 165, 166, 167, 172, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 220, 226, 231, 235, 239, 241, 247, 249, 254, 259, 262, 264], "fulli": [1, 9, 33, 74, 77, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 264], "homomorph": [1, 19, 28, 194, 211, 264], "data": [1, 3, 5, 8, 9, 14, 15, 20, 21, 23, 26, 30, 31, 32, 42, 46, 48, 50, 57, 58, 64, 66, 67, 71, 77, 78, 79, 80, 82, 84, 101, 111, 112, 115, 116, 119, 120, 124, 125, 129, 130, 133, 136, 137, 141, 142, 147, 163, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 220, 235, 239, 261, 262, 264], "design": [1, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 264], "enabl": [1, 19, 38, 72, 157, 163, 231, 264], "applic": [1, 6, 30, 33, 36, 37, 38, 40, 43, 45, 47, 48, 52, 60, 72, 83, 116, 142, 157, 264], "scientist": [1, 264], "seamlessli": [1, 264], "appli": [1, 18, 29, 34, 46, 66, 68, 74, 76, 78, 116, 142, 145, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 264], "advanc": [1, 217, 264], "privaci": [1, 14, 66, 69, 264], "preserv": [1, 14, 19, 66, 69, 163, 205, 264], "techniqu": [1, 264], "without": [1, 15, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 264], "requir": [1, 3, 5, 9, 29, 30, 31, 32, 33, 34, 36, 42, 45, 46, 48, 50, 58, 63, 65, 72, 74, 76, 77, 78, 82, 90, 111, 140, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 197, 198, 200, 202, 207, 208, 209, 211, 223, 228, 249, 264], "special": [1, 157, 163, 264], "skill": [1, 264], "cryptographi": [1, 264], "function": [1, 5, 6, 8, 9, 10, 11, 14, 15, 19, 25, 28, 29, 30, 31, 32, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 63, 65, 66, 68, 71, 72, 76, 77, 78, 82, 83, 85, 88, 95, 110, 112, 115, 116, 117, 120, 122, 125, 128, 130, 132, 133, 135, 137, 142, 143, 154, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 169, 172, 179, 186, 190, 191, 192, 193, 194, 195, 200, 201, 202, 204, 207, 208, 209, 210, 211, 213, 217, 226, 231, 233, 241, 245, 247, 249], "class": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 88, 89, 90, 92, 93, 107, 108, 110, 111, 112, 113, 116, 117, 118, 119, 120, 122, 123, 124, 125, 128, 129, 130, 132, 133, 135, 136, 137, 138, 140, 142, 143, 144, 145, 146, 147, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 169, 190, 191, 192, 193, 194, 195, 197, 199, 200, 201, 202, 206, 207, 208, 209, 210, 211, 213, 214, 215, 217, 218, 219, 220, 228, 231, 235, 242, 245, 249], "base": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 85, 86, 89, 93, 108, 111, 112, 113, 118, 119, 120, 123, 124, 125, 129, 130, 133, 136, 137, 138, 140, 144, 145, 146, 147, 152, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211, 214, 215, 217, 218, 219, 220, 226, 228, 231, 241, 249], "pybind11_object": [2, 4, 7, 10, 11, 12, 13, 17, 18, 19, 22, 23, 24, 25, 27, 28, 34, 35, 39, 41, 44, 49, 51, 54, 55, 56, 61, 62, 66, 69, 70, 71, 73, 75, 76, 81], "action": [2, 74], "type": [2, 5, 6, 8, 9, 12, 13, 14, 15, 17, 19, 22, 24, 30, 31, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 49, 50, 51, 52, 56, 57, 58, 59, 60, 61, 63, 66, 68, 69, 70, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 102, 103, 111, 112, 115, 116, 118, 120, 125, 130, 133, 137, 140, 141, 142, 144, 147, 149, 150, 152, 161, 162, 163, 164, 165, 166, 167, 170, 172, 178, 191, 192, 193, 194, 195, 197, 198, 200, 202, 205, 207, 208, 209, 211, 214, 217, 220, 221, 223, 224, 225, 226, 228, 230, 231, 235, 239, 241, 246, 247, 248, 251, 252, 253, 254, 259, 260], "tile": [2, 8, 9, 19, 28, 33, 57, 58, 62, 74, 75, 76, 77, 80, 163], "tensor": [2, 9, 14, 15, 18, 58, 62, 74, 75, 76, 77, 80, 84, 115, 161, 162, 163, 164, 165, 166, 167, 184, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 221, 230, 246, 252, 260, 262, 263], "dimens": [2, 6, 9, 20, 33, 43, 47, 48, 52, 58, 60, 62, 74, 77, 80, 83, 161, 162, 163, 164, 165, 166, 167, 239], "member": [2, 12, 13, 17, 22, 24, 29, 32, 41, 44, 54, 55, 56, 63, 69, 70, 81, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "additive_action_typ": 2, "multiplicative_action_typ": 2, "other_action_typ": [2, 74, 77], "__init__": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 86, 89, 93, 108, 111, 112, 113, 118, 119, 120, 123, 124, 125, 129, 130, 133, 136, 137, 138, 140, 144, 145, 146, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 214, 215, 217, 218, 219, 220, 228, 231, 249], "self": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 90, 112, 120, 125, 130, 133, 137, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 249], "lib": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 100, 101, 102, 103, 104, 105, 262], "pyhelayers_cppwrapp": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 100, 101, 102, 103, 104, 105, 262], "valu": [2, 5, 6, 8, 9, 12, 13, 15, 17, 18, 19, 22, 23, 24, 28, 30, 31, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 50, 51, 52, 54, 55, 56, 57, 59, 60, 61, 62, 66, 69, 70, 72, 74, 76, 78, 79, 81, 82, 83, 86, 93, 108, 116, 142, 144, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 220, 226, 231, 235, 239, 241, 252], "int": [2, 3, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 56, 57, 58, 59, 60, 65, 66, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 111, 112, 113, 116, 118, 120, 125, 130, 133, 137, 138, 140, 141, 142, 144, 145, 147, 157, 161, 162, 163, 164, 165, 166, 167, 178, 191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211, 214, 217, 218, 220, 221, 228, 229, 230, 231, 239, 246, 249, 254, 255, 258, 259, 260, 262, 263], "none": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 94, 111, 112, 113, 116, 118, 120, 125, 130, 133, 137, 138, 140, 142, 144, 147, 157, 161, 162, 163, 164, 165, 166, 167, 172, 178, 181, 184, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 214, 217, 218, 220, 226, 228, 231, 235, 239, 241, 242, 249, 263], "method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 89, 90, 108, 111, 112, 113, 118, 119, 120, 123, 124, 125, 129, 130, 133, 136, 137, 138, 140, 144, 145, 146, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 214, 215, 217, 218, 219, 220, 228, 231, 249], "attribut": [2, 7, 12, 13, 17, 22, 24, 27, 29, 32, 35, 39, 41, 44, 54, 55, 56, 59, 61, 62, 63, 69, 70, 81, 86, 93, 113, 138, 145, 146, 157, 160, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 219, 231, 249], "properti": [2, 8, 12, 13, 17, 22, 24, 27, 29, 30, 32, 36, 37, 38, 40, 41, 44, 45, 54, 55, 56, 57, 59, 61, 62, 63, 69, 70, 72, 79, 81, 90, 163, 231], "name": [2, 3, 5, 6, 8, 9, 12, 13, 14, 15, 17, 20, 21, 22, 24, 26, 30, 31, 32, 33, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 52, 54, 55, 56, 57, 58, 60, 61, 64, 65, 68, 69, 70, 72, 73, 78, 79, 80, 81, 82, 83, 112, 120, 125, 130, 133, 137, 144, 147, 157, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 178, 179, 191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211, 220, 242, 261], "saveabl": [3, 5, 8, 9, 14, 15, 20, 21, 26, 31, 42, 46, 48, 50, 53, 57, 58, 63, 64, 73, 74, 77, 78, 79, 80, 82], "A": [3, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23, 26, 28, 29, 30, 31, 33, 34, 35, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 57, 58, 59, 60, 61, 63, 64, 65, 67, 68, 70, 71, 72, 75, 76, 78, 79, 80, 82, 83, 90, 111, 112, 118, 120, 123, 125, 130, 133, 137, 140, 145, 146, 157, 161, 162, 163, 164, 165, 166, 167, 172, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 214, 215, 219, 228, 231, 247], "hold": [3, 8, 19, 20, 21, 23, 33, 39, 49, 51, 57, 59, 144, 163], "ae": [3, 32, 34, 84, 262], "secret": [3, 5, 30, 31, 34, 36, 37, 38, 40, 42, 45, 46, 50, 66, 71, 72, 78, 82, 84], "kei": [3, 5, 29, 30, 31, 32, 34, 36, 37, 38, 40, 42, 45, 46, 50, 63, 66, 71, 72, 78, 82, 84, 119, 124, 129, 136, 161, 162, 163, 164, 165, 166, 167, 172, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "under": [3, 5, 30, 31, 32, 34, 36, 37, 38, 40, 42, 45, 46, 50, 71, 72, 82, 84, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 262], "fhe": [3, 5, 14, 31, 32, 34, 42, 46, 50, 82, 84, 106, 144, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 254], "decrpyt": 3, "ciphertext": [3, 8, 9, 19, 28, 29, 30, 34, 36, 37, 38, 40, 45, 57, 62, 72, 79], "he": [3, 5, 6, 8, 9, 14, 19, 20, 21, 23, 28, 30, 31, 32, 33, 34, 35, 36, 42, 43, 45, 46, 47, 48, 49, 50, 52, 57, 58, 60, 72, 75, 76, 78, 82, 83], "hecontext": [3, 4, 5, 6, 8, 9, 13, 14, 19, 20, 21, 23, 26, 28, 29, 31, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 49, 50, 52, 57, 58, 60, 63, 64, 70, 71, 72, 73, 75, 76, 78, 82, 83, 101, 102, 103, 104, 105], "construct": [3, 4, 8, 9, 18, 19, 20, 21, 23, 26, 29, 33, 42, 46, 49, 50, 52, 57, 58, 59, 61, 64, 65, 66, 68, 71, 75, 78, 82, 119, 124, 129, 136, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 231, 249], "new": [3, 8, 14, 19, 26, 30, 32, 36, 37, 38, 40, 45, 57, 59, 64, 65, 66, 68, 72, 74, 79, 112, 116, 120, 125, 130, 133, 137, 141, 142, 145, 161, 162, 163, 164, 165, 166, 167, 168, 169, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 235, 239, 242, 249], "object": [3, 4, 5, 6, 8, 9, 10, 11, 14, 15, 18, 19, 20, 21, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 89, 101, 102, 103, 104, 105, 108, 112, 120, 125, 130, 133, 137, 141, 144, 145, 146, 147, 149, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 219, 220, 224, 231, 239, 249, 251, 254, 257, 258, 259, 263], "paramet": [3, 4, 5, 6, 7, 8, 9, 14, 15, 18, 19, 20, 21, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 84, 101, 102, 103, 104, 105, 108, 113, 116, 138, 140, 141, 142, 144, 145, 147, 149, 150, 151, 152, 161, 162, 164, 165, 166, 167, 172, 178, 191, 192, 193, 194, 195, 197, 198, 200, 202, 205, 207, 208, 209, 211, 217, 218, 220, 221, 223, 224, 225, 228, 229, 230, 231, 235, 239, 246, 251, 252, 253, 254, 255, 257, 258, 259, 260, 261, 262, 263], "The": [3, 4, 5, 6, 8, 9, 14, 15, 18, 19, 20, 21, 23, 26, 28, 29, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 63, 64, 65, 66, 68, 70, 71, 72, 75, 76, 77, 78, 79, 80, 82, 83, 84, 90, 101, 104, 105, 111, 112, 113, 118, 120, 125, 130, 133, 137, 138, 140, 144, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 197, 198, 200, 202, 207, 208, 209, 211, 214, 217, 220, 221, 223, 226, 228, 230, 231, 239, 241, 246, 247, 249, 254, 259, 260, 262, 263], "context": [3, 5, 6, 19, 20, 21, 26, 30, 31, 32, 33, 34, 36, 37, 38, 40, 41, 42, 43, 45, 46, 47, 50, 52, 60, 64, 72, 73, 82, 83, 101, 102, 103, 104, 105, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "attach_input_storag": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82], "storag": [3, 5, 8, 9, 14, 15, 20, 21, 26, 31, 42, 46, 48, 50, 57, 58, 64, 78, 79, 80, 82, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "attach": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82, 163], "an": [3, 5, 6, 8, 9, 10, 11, 13, 14, 15, 18, 19, 20, 21, 23, 24, 25, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 62, 63, 66, 70, 71, 72, 73, 74, 75, 76, 78, 79, 80, 82, 83, 84, 85, 86, 89, 93, 101, 104, 105, 112, 116, 119, 120, 124, 125, 129, 130, 133, 136, 137, 142, 157, 161, 162, 163, 164, 165, 166, 167, 172, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 226, 231, 235, 239, 241, 249, 254], "input": [3, 5, 6, 8, 9, 14, 15, 19, 20, 21, 30, 31, 32, 33, 34, 42, 43, 46, 47, 48, 50, 51, 52, 57, 58, 60, 61, 75, 76, 78, 79, 80, 82, 83, 116, 142, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 178, 179, 182, 183, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 239, 252, 257, 262], "thi": [3, 5, 6, 8, 9, 14, 15, 18, 19, 20, 21, 22, 23, 26, 28, 29, 30, 31, 32, 34, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 60, 62, 63, 66, 71, 72, 74, 76, 77, 78, 79, 80, 82, 83, 108, 112, 115, 116, 120, 125, 130, 133, 137, 142, 144, 145, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 220, 221, 226, 230, 231, 235, 239, 241, 246, 247, 249, 260], "It": [3, 5, 8, 9, 14, 15, 19, 20, 21, 30, 31, 34, 39, 42, 46, 48, 50, 57, 58, 71, 78, 79, 80, 82, 144, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218], "immedi": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "look": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82, 157, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "header": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82, 101, 104, 105, 261], "insid": [3, 5, 8, 9, 14, 15, 20, 21, 28, 31, 34, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82], "verifi": [3, 5, 8, 9, 14, 15, 18, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82], "correct": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82, 163, 221, 230, 235, 246, 260], "attach_output_storag": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82], "output": [3, 5, 6, 8, 9, 14, 15, 20, 21, 31, 34, 42, 43, 46, 47, 48, 50, 51, 52, 57, 58, 60, 66, 71, 78, 79, 80, 82, 83, 116, 142, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 221, 230, 231, 239, 246, 249, 260], "write": [3, 5, 8, 9, 14, 15, 20, 21, 23, 30, 31, 36, 37, 38, 40, 42, 45, 46, 48, 50, 57, 58, 64, 72, 78, 79, 80, 82, 163, 231, 261], "flush_to_storag": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82], "For": [3, 5, 8, 9, 14, 15, 20, 21, 28, 30, 31, 33, 42, 46, 48, 50, 57, 58, 61, 76, 78, 79, 80, 82, 145, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 264], "flush": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82, 231], "some": [3, 5, 8, 9, 14, 15, 20, 21, 31, 33, 42, 46, 48, 50, 57, 58, 62, 65, 71, 78, 79, 80, 82, 108, 144, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 247, 263], "remain": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82, 231, 239, 249], "must": [3, 5, 6, 8, 9, 14, 15, 20, 21, 28, 31, 33, 34, 42, 43, 46, 47, 48, 50, 52, 57, 58, 60, 61, 64, 66, 68, 71, 74, 76, 78, 79, 80, 82, 83, 112, 116, 119, 120, 124, 125, 129, 130, 133, 136, 137, 142, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 239], "call": [3, 5, 8, 9, 14, 15, 20, 21, 31, 34, 42, 46, 48, 50, 57, 58, 61, 64, 66, 72, 74, 78, 79, 80, 82, 90, 116, 142, 145, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 231], "when": [3, 5, 8, 9, 14, 15, 19, 20, 21, 22, 26, 27, 28, 30, 31, 34, 36, 37, 38, 40, 42, 45, 46, 48, 50, 53, 57, 58, 61, 62, 64, 72, 78, 79, 80, 82, 144, 145, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 231, 239, 263], "finish": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82, 231], "deal": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82], "order": [3, 5, 6, 8, 9, 14, 15, 18, 20, 21, 31, 42, 43, 46, 47, 48, 50, 51, 52, 57, 58, 60, 65, 71, 76, 78, 79, 80, 82, 83, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 231, 235], "final": [3, 5, 8, 9, 14, 15, 20, 21, 31, 32, 42, 46, 48, 50, 57, 58, 71, 78, 79, 80, 82], "its": [3, 5, 8, 9, 14, 15, 20, 21, 28, 31, 33, 34, 42, 46, 48, 50, 51, 57, 58, 66, 76, 78, 79, 80, 82, 90, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 239], "store": [3, 5, 8, 9, 14, 15, 20, 21, 26, 30, 31, 36, 37, 38, 40, 42, 45, 46, 48, 50, 57, 58, 72, 74, 76, 78, 79, 80, 82, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "should": [3, 5, 8, 9, 14, 15, 20, 21, 30, 31, 36, 37, 38, 40, 42, 45, 46, 48, 50, 51, 57, 58, 61, 63, 64, 71, 72, 78, 79, 80, 82, 84, 116, 119, 124, 129, 136, 142, 145, 150, 161, 162, 163, 164, 165, 166, 167, 169, 179, 191, 192, 193, 194, 195, 197, 200, 202, 205, 207, 208, 209, 211, 217, 218, 225, 231, 253], "onc": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82, 145, 161, 162, 164, 165, 166, 167, 178, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231, 235], "get_class_nam": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 57, 58, 78, 79, 80, 82], "str": [3, 5, 6, 8, 9, 14, 15, 18, 19, 20, 21, 23, 26, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 59, 60, 61, 63, 64, 65, 66, 67, 68, 72, 73, 74, 75, 77, 78, 79, 80, 82, 83, 103, 145, 157, 161, 162, 163, 164, 165, 166, 167, 168, 172, 178, 191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211, 217, 229, 231, 242, 247, 255, 257, 261], "return": [3, 5, 6, 8, 9, 10, 11, 14, 15, 18, 19, 20, 21, 23, 25, 28, 29, 30, 31, 32, 33, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 52, 53, 57, 58, 59, 60, 63, 64, 65, 66, 71, 72, 74, 75, 76, 77, 78, 79, 80, 82, 83, 100, 111, 112, 115, 116, 118, 119, 120, 124, 125, 129, 130, 133, 136, 137, 140, 142, 144, 147, 149, 150, 152, 157, 161, 162, 163, 164, 165, 166, 167, 169, 170, 172, 174, 178, 179, 191, 192, 193, 194, 195, 197, 198, 200, 202, 205, 207, 208, 209, 211, 214, 217, 218, 220, 221, 223, 224, 225, 228, 230, 231, 235, 239, 242, 246, 247, 248, 249, 251, 252, 253, 254, 259, 260, 262], "he_encrypt": 3, "plain_kei": 3, "byte": [3, 5, 6, 8, 9, 14, 15, 20, 21, 23, 30, 31, 34, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 60, 61, 63, 64, 72, 74, 77, 78, 79, 80, 82, 83, 84, 101, 102, 104, 105, 163, 231, 262], "compress": [3, 34, 163], "bool": [3, 6, 8, 9, 14, 18, 19, 26, 28, 30, 33, 34, 36, 37, 38, 40, 43, 45, 46, 47, 51, 52, 57, 59, 60, 65, 66, 72, 74, 75, 76, 77, 78, 83, 112, 116, 120, 125, 130, 133, 137, 142, 145, 150, 161, 162, 163, 164, 165, 166, 167, 169, 178, 191, 192, 193, 194, 195, 197, 200, 202, 205, 207, 208, 209, 211, 217, 218, 225, 231, 239, 253], "true": [3, 8, 13, 14, 19, 26, 28, 29, 30, 32, 34, 36, 37, 38, 40, 45, 57, 61, 62, 65, 72, 74, 78, 112, 116, 120, 125, 130, 133, 137, 142, 145, 150, 157, 161, 162, 163, 164, 165, 166, 167, 169, 178, 179, 191, 192, 193, 194, 195, 197, 200, 202, 205, 207, 208, 209, 211, 217, 218, 221, 225, 226, 230, 231, 235, 239, 241, 246, 252, 253, 260], "given": [3, 5, 6, 8, 9, 10, 11, 14, 15, 18, 19, 25, 28, 30, 31, 33, 36, 37, 38, 40, 42, 43, 45, 46, 47, 49, 50, 52, 58, 60, 65, 66, 68, 71, 72, 74, 76, 77, 78, 80, 82, 83, 84, 101, 102, 103, 104, 105, 119, 124, 129, 136, 141, 144, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 220, 231, 235, 239, 262], "plaintext": [3, 5, 6, 8, 9, 15, 19, 30, 31, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 57, 58, 60, 72, 79, 80, 82, 83], "size": [3, 5, 8, 9, 23, 27, 31, 32, 33, 34, 42, 46, 50, 53, 58, 68, 74, 77, 80, 82, 116, 119, 124, 129, 136, 142, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 226, 231, 239, 241], "128": [3, 29, 32, 34, 84, 163], "192": [3, 163], "256": [3, 34, 166], "bit": [3, 8, 34, 53, 71, 78, 84, 157, 163], "16": [3, 33, 84, 116, 142, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "24": [3, 33], "32": [3, 163], "respect": [3, 18, 28, 33, 34, 76, 145, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "whether": [3, 6, 18, 19, 29, 30, 33, 34, 36, 37, 38, 40, 43, 45, 46, 47, 51, 52, 53, 60, 61, 63, 66, 72, 74, 78, 83, 116, 142, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "fashion": [3, 116, 141, 142, 163], "recommend": [3, 5, 22, 31, 34, 42, 46, 50, 82, 163, 231, 239], "result": [3, 5, 8, 9, 15, 19, 28, 29, 31, 32, 34, 42, 46, 49, 50, 58, 66, 71, 74, 75, 76, 78, 80, 82, 84, 141, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 231, 239, 259], "much": [3, 29, 157, 163], "smaller": [3, 9, 33, 145, 163, 217], "save": [3, 5, 8, 9, 14, 15, 20, 21, 23, 26, 30, 31, 34, 36, 37, 38, 39, 40, 42, 45, 46, 48, 50, 53, 57, 58, 63, 64, 72, 73, 74, 77, 78, 79, 80, 82, 150, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 225, 253, 254, 257, 258, 259], "binari": [3, 5, 8, 9, 14, 15, 20, 21, 23, 30, 31, 36, 37, 38, 40, 42, 45, 46, 48, 50, 57, 58, 72, 76, 78, 79, 80, 82, 163, 235], "more": [3, 8, 19, 23, 28, 51, 57, 66, 74, 76, 112, 116, 120, 125, 130, 133, 137, 142, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231, 235, 264], "time": [3, 5, 28, 33, 34, 61, 76, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 221, 230, 231, 246, 247, 249, 260], "uncompress": 3, "load": [3, 5, 6, 8, 9, 14, 15, 20, 21, 23, 26, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 57, 58, 60, 61, 63, 64, 72, 73, 74, 77, 78, 79, 80, 82, 83, 101, 102, 103, 104, 105, 144, 147, 150, 217, 218, 220, 225, 253], "load_from_buff": [3, 5, 8, 9, 14, 15, 20, 21, 23, 30, 31, 36, 37, 38, 39, 40, 42, 45, 46, 48, 50, 53, 57, 58, 61, 63, 72, 74, 77, 78, 79, 80, 82], "saveablebas": [3, 5, 8, 9, 14, 15, 20, 21, 31, 42, 46, 48, 50, 53, 57, 58, 63, 74, 77, 78, 79, 80, 82], "buf": [3, 5, 8, 9, 14, 15, 20, 21, 23, 30, 31, 36, 37, 38, 39, 40, 42, 45, 46, 48, 50, 53, 57, 58, 63, 72, 74, 77, 78, 79, 80, 82, 101, 102, 104, 105, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "from": [3, 5, 6, 8, 9, 14, 15, 19, 20, 21, 23, 26, 28, 29, 30, 31, 33, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 57, 58, 60, 61, 63, 64, 66, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 82, 83, 90, 101, 102, 103, 104, 105, 112, 116, 119, 120, 124, 125, 129, 130, 133, 136, 137, 142, 144, 145, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 220, 226, 231, 235, 239, 241, 242, 248, 249], "buffer": [3, 5, 6, 8, 9, 14, 15, 20, 21, 23, 26, 30, 31, 36, 37, 38, 39, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 60, 61, 63, 64, 72, 73, 74, 77, 78, 79, 80, 82, 83, 101, 102, 104, 105, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "memori": [3, 5, 8, 9, 14, 15, 20, 21, 23, 30, 31, 33, 34, 36, 37, 38, 39, 40, 42, 45, 46, 48, 50, 53, 57, 58, 63, 72, 74, 77, 78, 79, 80, 82, 102, 150, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 225, 253, 263], "load_from_fil": [3, 5, 8, 9, 14, 15, 20, 21, 23, 30, 31, 36, 37, 38, 40, 42, 45, 46, 48, 50, 57, 58, 72, 78, 79, 80, 82], "file_nam": [3, 5, 8, 9, 14, 15, 20, 21, 23, 30, 31, 36, 37, 38, 40, 42, 45, 46, 48, 50, 57, 58, 72, 78, 79, 80, 82, 103], "file": [3, 5, 6, 8, 9, 14, 15, 20, 21, 23, 26, 30, 31, 32, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 57, 58, 60, 61, 65, 66, 72, 78, 79, 80, 82, 83, 103, 112, 120, 125, 127, 130, 133, 137, 157, 159, 231, 254, 256, 257, 258, 259, 261], "save_to_fil": [3, 5, 8, 9, 14, 15, 20, 21, 23, 30, 31, 36, 37, 38, 40, 42, 45, 46, 48, 50, 57, 58, 72, 78, 79, 80, 82], "string": [3, 5, 6, 8, 9, 14, 15, 18, 19, 20, 21, 23, 26, 29, 30, 31, 32, 33, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 59, 60, 63, 64, 65, 67, 68, 72, 73, 74, 77, 78, 79, 80, 82, 83, 103, 157, 161, 162, 163, 164, 165, 166, 167, 174, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 226, 229, 231, 241, 247, 248, 249, 254, 255, 257, 259, 261], "save_to_buff": [3, 5, 8, 9, 14, 15, 20, 21, 23, 30, 31, 36, 37, 38, 39, 40, 42, 45, 46, 48, 50, 53, 57, 58, 63, 72, 74, 77, 78, 79, 80, 82], "contain": [3, 5, 8, 9, 14, 15, 20, 21, 23, 28, 30, 31, 33, 36, 37, 38, 39, 40, 42, 45, 46, 48, 50, 53, 57, 58, 63, 65, 66, 67, 71, 72, 74, 76, 77, 78, 79, 80, 82, 84, 101, 104, 105, 106, 116, 142, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 226, 241, 249, 262], "form": [3, 5, 8, 9, 14, 15, 20, 21, 23, 30, 31, 36, 37, 38, 40, 42, 45, 46, 48, 50, 57, 58, 72, 78, 79, 80, 82, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "to_str": [3, 5, 6, 8, 9, 14, 15, 20, 21, 29, 30, 31, 32, 33, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 59, 60, 63, 65, 67, 68, 72, 74, 77, 78, 79, 80, 82, 83], "printabl": [3, 5, 6, 8, 9, 14, 15, 20, 21, 29, 30, 31, 32, 33, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 59, 60, 63, 65, 67, 68, 72, 74, 77, 78, 79, 80, 82, 83], "verbos": [3, 4, 5, 6, 8, 9, 14, 15, 20, 21, 29, 30, 31, 32, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 59, 60, 61, 63, 65, 67, 68, 71, 72, 74, 77, 78, 79, 80, 82, 83, 145, 263], "verbosity_regular": [3, 5, 6, 8, 9, 14, 15, 20, 21, 29, 30, 31, 32, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 59, 60, 63, 65, 67, 68, 72, 74, 77, 78, 79, 80, 81, 82, 83], "2": [3, 5, 6, 8, 9, 14, 15, 19, 20, 21, 29, 30, 31, 32, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 59, 60, 62, 63, 65, 67, 68, 72, 74, 76, 77, 78, 79, 80, 82, 83, 112, 116, 120, 125, 130, 133, 137, 142, 145, 157, 161, 162, 163, 164, 165, 166, 167, 176, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 231, 235, 239], "convert": [3, 5, 6, 8, 9, 14, 15, 18, 20, 21, 29, 30, 31, 32, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 53, 57, 58, 59, 60, 63, 65, 67, 68, 72, 74, 77, 78, 79, 80, 82, 83, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 239, 242, 249, 259], "level": [3, 4, 5, 6, 8, 9, 14, 15, 19, 20, 21, 29, 30, 31, 32, 33, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 51, 52, 53, 57, 58, 59, 60, 63, 65, 67, 68, 71, 72, 74, 77, 78, 79, 80, 81, 82, 83, 157, 159, 163, 209, 263], "default": [3, 5, 6, 8, 9, 13, 14, 15, 18, 19, 20, 21, 28, 29, 30, 31, 32, 34, 36, 37, 38, 40, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 57, 58, 59, 60, 61, 63, 65, 66, 67, 68, 70, 71, 72, 74, 76, 77, 78, 79, 80, 82, 83, 84, 108, 116, 119, 124, 129, 136, 142, 145, 157, 161, 162, 163, 164, 165, 166, 167, 172, 178, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 226, 230, 231, 235, 239, 241, 242, 249, 254, 259, 260, 261, 263], "aggreg": [4, 71, 78], "side": [4, 9, 32, 34, 66, 71], "psi": [4, 71], "feder": [4, 71], "learn": [4, 14, 27, 71, 85, 144, 145, 191, 202], "psi_h": [4, 71], "fl_he": [4, 71], "privat": [4, 30, 71], "set": [4, 6, 8, 9, 13, 14, 15, 19, 29, 30, 33, 34, 35, 36, 37, 38, 40, 43, 45, 47, 51, 52, 57, 58, 59, 60, 61, 62, 63, 65, 66, 68, 70, 71, 72, 74, 78, 79, 80, 83, 106, 108, 113, 116, 138, 142, 150, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 225, 231, 239, 253, 257, 263], "intersect": [4, 66, 71], "algorithm": [4, 8, 22, 27, 61, 65, 66, 68, 71, 76], "get_verbos": [4, 65, 71], "get": [4, 8, 9, 20, 21, 46, 47, 58, 61, 65, 66, 68, 71, 72, 77, 112, 120, 125, 130, 133, 137, 157, 163, 231], "rearrange_indicator_vector": 4, "indicator_vector": 4, "ctiletensor": [4, 10, 14, 20, 58, 71, 75, 76, 80, 101], "map": [4, 71, 112, 119, 120, 124, 125, 129, 130, 133, 136, 137, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "numpi": [4, 5, 6, 9, 14, 15, 18, 19, 28, 30, 31, 32, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 58, 60, 63, 71, 72, 75, 76, 77, 80, 82, 83, 116, 142, 163, 205, 231, 239, 262], "ndarrai": [4, 5, 6, 9, 14, 15, 18, 19, 28, 30, 31, 32, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 58, 60, 63, 71, 72, 75, 76, 77, 80, 82, 83, 163, 205, 235, 239, 262], "uint64": [4, 30, 36, 37, 38, 40, 45, 71, 72], "rearrang": 4, "indic": [4, 6, 8, 9, 14, 19, 24, 28, 30, 33, 36, 37, 38, 40, 43, 45, 47, 51, 52, 58, 60, 61, 66, 71, 72, 74, 78, 80, 83, 90, 113, 119, 124, 129, 136, 138, 157, 163, 169, 217, 218, 231, 235], "vector": [4, 9, 10, 11, 15, 19, 25, 49, 58, 71, 76, 78, 79, 80, 84, 163], "produc": [4, 5, 9, 14, 31, 42, 46, 50, 51, 82, 141], "process": [4, 7, 14, 19, 31, 32, 66, 68, 71, 78, 157, 217, 218, 229, 254, 255, 259], "accord": [4, 9, 36, 45, 58, 66, 72, 80, 163], "sent": [4, 71], "first": [4, 8, 9, 18, 28, 30, 36, 45, 51, 58, 66, 71, 72, 76, 77, 80, 145, 157, 163, 169, 179, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "client": [4, 34, 71], "which": [4, 6, 8, 9, 15, 22, 28, 29, 30, 36, 37, 38, 40, 43, 45, 47, 52, 57, 60, 71, 72, 74, 77, 78, 79, 83, 115, 119, 124, 129, 136, 145, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231, 239], "need": [4, 8, 30, 36, 37, 38, 40, 45, 51, 72, 115, 147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 231], "set_verbos": [4, 65, 71], "hemodel": [5, 6, 42, 43, 46, 47, 50, 52, 60, 82, 83, 104], "implement": [5, 14, 15, 26, 36, 37, 38, 40, 45, 64, 72, 111, 112, 119, 120, 124, 125, 129, 130, 133, 136, 137, 140, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 228], "1": [5, 8, 9, 14, 15, 19, 28, 29, 32, 33, 34, 51, 53, 57, 58, 61, 66, 68, 74, 75, 76, 77, 79, 80, 112, 116, 120, 125, 130, 133, 137, 141, 142, 145, 155, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 221, 227, 231, 235, 239, 242, 246, 249], "seri": [5, 61, 231], "predict": [5, 6, 15, 31, 32, 34, 42, 43, 46, 47, 48, 50, 52, 60, 61, 82, 83, 221, 226, 230, 235, 241, 246, 260], "model": [5, 6, 14, 15, 31, 32, 33, 34, 42, 43, 46, 47, 48, 50, 51, 52, 60, 61, 82, 83, 106, 108, 144, 145, 147, 149, 150, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 174, 175, 178, 179, 181, 220, 223, 224, 225, 251, 253, 254, 258, 259], "constuctor": [5, 14, 59, 63], "static": [5, 6, 29, 30, 31, 36, 37, 38, 40, 42, 43, 45, 46, 47, 50, 52, 53, 60, 72, 82, 83, 231], "compil": [5, 31, 42, 46, 50, 82, 194, 211], "plain": [5, 6, 9, 14, 19, 31, 32, 42, 43, 46, 47, 50, 52, 60, 61, 76, 82, 83, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 242], "plainmodel": [5, 6, 31, 42, 43, 46, 47, 50, 52, 61, 82, 83], "he_run_req": [5, 31, 32, 42, 46, 50, 82], "herunrequir": [5, 31, 32, 42, 46, 50, 82], "list": [5, 6, 10, 11, 14, 19, 25, 28, 30, 31, 32, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 60, 61, 65, 71, 72, 82, 83, 84, 111, 112, 116, 118, 120, 125, 130, 133, 137, 140, 141, 142, 145, 161, 162, 163, 164, 165, 166, 167, 169, 170, 174, 179, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 214, 217, 221, 226, 228, 230, 235, 241, 246, 260, 261, 262], "doubletensor": [5, 31, 42, 46, 50, 71, 82], "option": [5, 13, 31, 32, 34, 42, 46, 48, 50, 51, 62, 82, 100, 116, 119, 124, 129, 136, 141, 142, 157, 161, 162, 163, 164, 165, 166, 167, 172, 178, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 230, 231, 239, 249, 254, 259, 260, 261], "heprofil": [5, 31, 42, 46, 50, 82], "run": [5, 6, 8, 31, 32, 33, 34, 42, 43, 46, 47, 50, 52, 60, 71, 82, 83, 84, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 247], "profil": [5, 31, 33, 34, 42, 46, 50, 82], "popul": [5, 31, 33, 42, 46, 50, 82, 84, 163, 235], "possibl": [5, 28, 29, 31, 34, 36, 42, 45, 46, 50, 72, 82, 106, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 231], "empti": [5, 6, 8, 9, 14, 15, 18, 19, 20, 21, 23, 31, 33, 42, 43, 46, 47, 49, 50, 52, 57, 58, 60, 61, 63, 75, 78, 82, 83, 163, 205, 231], "otherwis": [5, 8, 14, 15, 19, 28, 31, 42, 46, 50, 57, 66, 76, 78, 82, 161, 162, 163, 164, 165, 166, 167, 169, 179, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 252, 263], "initi": [5, 6, 9, 23, 29, 30, 31, 32, 34, 36, 37, 38, 39, 42, 43, 45, 46, 47, 50, 52, 58, 60, 61, 72, 77, 78, 82, 83, 84, 101, 104, 105, 144, 147, 152, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 220, 231], "repres": [5, 6, 8, 14, 23, 30, 31, 42, 46, 50, 51, 53, 57, 78, 79, 82, 83, 116, 119, 124, 129, 136, 142, 147, 157, 217, 220, 226, 241, 247, 249], "create_context": [5, 31, 42, 46, 50, 82], "creat": [5, 6, 14, 15, 19, 26, 29, 30, 31, 36, 37, 38, 40, 42, 43, 45, 46, 47, 50, 52, 59, 60, 63, 72, 78, 82, 83, 89, 112, 115, 120, 125, 130, 133, 137, 157, 161, 162, 163, 164, 165, 166, 167, 169, 179, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 218, 231, 247, 248], "wa": [5, 19, 31, 33, 34, 42, 46, 50, 78, 82, 157, 163, 178, 231], "obtain": [5, 31, 42, 46, 50, 62, 82, 163], "create_io_processor": [5, 31, 42, 46, 50, 82], "modelioprocessor": [5, 31, 42, 46, 50, 82, 105], "io": [5, 31, 42, 46, 48, 50, 82, 231], "processor": [5, 31, 42, 46, 50, 82], "prepar": [5, 31, 42, 46, 50, 82], "decrypt": [5, 9, 14, 19, 30, 31, 32, 34, 36, 37, 38, 40, 42, 45, 46, 48, 50, 72, 75, 82, 84, 262], "decrypt_decod": [5, 14, 31, 42, 46, 50, 82], "train": [5, 6, 14, 15, 27, 31, 42, 43, 46, 47, 50, 52, 60, 61, 82, 83, 111, 112, 116, 120, 125, 130, 133, 137, 142, 145, 147, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218, 220, 229, 255, 258], "after": [5, 6, 8, 19, 31, 34, 42, 43, 46, 47, 50, 52, 60, 66, 72, 82, 83, 141, 145, 147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 220, 231, 262], "fit": [5, 6, 14, 27, 31, 34, 42, 43, 46, 47, 48, 50, 51, 52, 60, 61, 82, 83, 163], "encod": [5, 9, 14, 30, 31, 32, 34, 36, 37, 38, 40, 42, 45, 46, 48, 50, 57, 72, 75, 79, 82, 231], "float64": [5, 6, 14, 15, 18, 19, 28, 31, 32, 42, 43, 46, 47, 48, 50, 52, 60, 71, 75, 76, 82, 83, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 239, 262], "have": [5, 9, 15, 19, 20, 21, 30, 31, 34, 36, 37, 38, 40, 42, 45, 46, 50, 58, 66, 72, 76, 77, 82, 112, 120, 125, 130, 133, 137, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231], "non": [5, 8, 9, 28, 31, 33, 34, 42, 46, 50, 52, 57, 62, 63, 66, 76, 79, 82, 119, 124, 129, 136, 141, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231], "weight": [5, 8, 15, 31, 33, 34, 42, 46, 47, 50, 61, 68, 82, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 235, 239, 263], "prevent": [5, 29, 31, 34, 42, 46, 50, 82], "overflow": [5, 31, 32, 34, 42, 46, 50, 51, 82], "includ": [5, 8, 30, 31, 33, 34, 42, 46, 50, 62, 66, 82, 116, 142, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 249], "ones": [5, 31, 42, 46, 50, 62, 82, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "might": [5, 31, 42, 46, 50, 51, 71, 82, 157, 163], "intermedi": [5, 31, 42, 46, 50, 82, 231, 239], "high": [5, 8, 22, 31, 42, 46, 50, 57, 82, 163], "dure": [5, 9, 15, 31, 34, 42, 46, 50, 51, 82, 147, 163, 220, 231], "comput": [5, 8, 17, 22, 28, 31, 34, 42, 46, 49, 50, 61, 76, 78, 82, 141, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 221, 230, 235, 239, 246, 260], "tune": [5, 31, 42, 46, 50, 51, 65, 66, 68, 82], "note": [5, 8, 29, 31, 34, 42, 46, 50, 82, 145, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 231, 239], "provid": [5, 31, 33, 34, 42, 46, 50, 82, 85, 89, 119, 124, 129, 136, 141, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "mechan": [5, 31, 42, 46, 50, 51, 82, 90, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "mai": [5, 8, 19, 20, 21, 31, 34, 42, 46, 50, 51, 57, 64, 79, 82, 90, 112, 120, 125, 130, 133, 137, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 235, 249], "deriv": [5, 31, 42, 46, 50, 82, 90, 163], "present": [5, 31, 42, 46, 50, 82, 147, 163, 220, 239], "ani": [5, 8, 9, 31, 34, 42, 46, 50, 64, 82, 90, 141, 147, 157, 161, 162, 163, 164, 165, 166, 167, 172, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 220, 231, 252, 254], "encode_encrypt": [5, 19, 31, 42, 46, 50, 75, 82], "while": [5, 31, 34, 42, 46, 50, 61, 82, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 239], "ar": [5, 6, 8, 9, 14, 15, 19, 22, 28, 29, 30, 31, 32, 36, 37, 38, 40, 42, 43, 45, 46, 47, 50, 52, 57, 58, 59, 60, 65, 70, 71, 72, 74, 76, 78, 79, 82, 83, 90, 116, 141, 142, 147, 150, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 220, 225, 226, 231, 235, 239, 241, 249, 253, 263], "architectur": [5, 31, 42, 46, 50, 82, 191, 195, 200, 202, 209], "structur": [5, 9, 30, 31, 42, 46, 50, 58, 59, 66, 80, 82], "hidden": [5, 31, 42, 46, 50, 51, 82, 163], "exampl": [5, 9, 20, 30, 31, 33, 42, 46, 50, 61, 66, 82, 112, 116, 120, 125, 130, 133, 137, 142, 145, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 226, 231, 235, 239, 241], "neural": [5, 31, 42, 46, 50, 52, 82, 194, 211], "network": [5, 31, 42, 46, 50, 52, 82, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "number": [5, 8, 9, 14, 15, 19, 20, 21, 22, 23, 27, 28, 29, 30, 31, 33, 34, 36, 37, 38, 40, 42, 45, 46, 48, 50, 53, 57, 58, 61, 62, 65, 66, 72, 74, 76, 78, 79, 80, 82, 84, 111, 112, 116, 118, 120, 125, 130, 133, 137, 140, 142, 144, 145, 147, 157, 161, 162, 163, 164, 165, 166, 167, 184, 191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211, 214, 217, 218, 220, 221, 226, 228, 229, 230, 231, 235, 241, 246, 249, 255, 260, 262], "layer": [5, 31, 42, 46, 50, 51, 52, 82, 85, 178, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "each": [5, 6, 8, 14, 15, 18, 20, 21, 30, 31, 36, 37, 38, 40, 42, 43, 45, 46, 47, 50, 52, 60, 61, 66, 72, 82, 83, 111, 112, 118, 120, 125, 130, 133, 137, 140, 141, 145, 147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 214, 217, 218, 220, 226, 228, 231, 239, 241], "shape": [5, 6, 9, 31, 42, 43, 46, 47, 50, 52, 58, 60, 71, 74, 75, 76, 77, 80, 82, 83, 116, 142, 161, 162, 163, 164, 165, 166, 167, 235, 239], "intern": [5, 9, 31, 42, 46, 50, 58, 80, 82, 161, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "e": [5, 8, 9, 14, 29, 31, 36, 42, 45, 46, 50, 58, 62, 72, 80, 82, 141, 157, 161, 162, 163, 164, 165, 166, 167, 172, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231, 239], "g": [5, 9, 14, 28, 29, 31, 36, 42, 45, 46, 50, 58, 62, 72, 76, 80, 82, 141, 157, 161, 162, 163, 164, 165, 166, 167, 172, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231, 239], "neuron": [5, 31, 42, 46, 50, 82], "dens": [5, 31, 42, 46, 50, 82, 163], "kernel": [5, 31, 42, 46, 50, 82], "stride": [5, 9, 31, 42, 46, 50, 82, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "pad": [5, 31, 42, 46, 50, 51, 59, 82, 163], "conv2d": [5, 31, 42, 46, 50, 82, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "degre": [5, 22, 28, 31, 42, 46, 50, 51, 76, 82, 161, 162, 164, 165, 166, 167, 171, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "polynomi": [5, 22, 28, 31, 42, 46, 50, 51, 62, 76, 82, 171], "activ": [5, 31, 42, 44, 46, 47, 50, 51, 61, 82, 144, 150, 166, 167, 169, 172, 178, 179, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 225, 253, 254, 259], "sign": [5, 28, 31, 42, 44, 46, 50, 51, 53, 54, 76, 78, 82, 163], "lead": [5, 29, 31, 33, 42, 46, 50, 51, 82], "coeffici": [5, 22, 31, 42, 46, 50, 51, 61, 76, 82, 166, 172], "etc": [5, 9, 31, 42, 46, 50, 82, 147, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 231, 235], "encrypteddata": [5, 31, 42, 46, 48, 50, 82, 84, 101], "get_fit_hyperparam": [5, 31, 42, 46, 50, 82], "fithyperparam": [5, 31, 42, 46, 50, 82], "common": [5, 27, 31, 42, 46, 50, 61, 82], "relat": [5, 19, 31, 42, 46, 50, 51, 65, 66, 82, 161, 166, 217, 258], "hyper": [5, 27, 31, 42, 46, 50, 61, 82], "get_profil": [5, 31, 42, 46, 50, 82], "build": [5, 31, 42, 46, 50, 53, 82, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "arg": [5, 6, 8, 9, 10, 11, 19, 25, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 51, 52, 57, 58, 59, 60, 62, 65, 68, 72, 73, 76, 77, 78, 79, 80, 82, 83, 119, 124, 129, 136, 144, 146, 147, 149, 150, 151, 152, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 198, 200, 202, 207, 208, 209, 211, 217, 219, 220, 223, 224, 225, 229, 242, 247, 251, 253, 254, 255, 258, 259], "kwarg": [5, 6, 8, 9, 10, 11, 19, 25, 27, 30, 31, 32, 34, 35, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 51, 52, 57, 58, 59, 60, 62, 65, 68, 72, 73, 76, 77, 78, 79, 80, 82, 83, 146, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 203, 207, 208, 209, 211, 212, 219, 231], "overload": [5, 6, 8, 9, 10, 11, 19, 25, 30, 31, 32, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 57, 58, 59, 60, 65, 68, 72, 76, 77, 78, 82, 83, 163, 231], "re": [5, 31, 42, 46, 48, 50, 75, 82, 84, 161, 162, 163, 164, 165, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "infer": [5, 6, 31, 32, 34, 42, 43, 46, 47, 50, 51, 52, 60, 82, 83, 163, 205], "over": [5, 6, 8, 9, 18, 30, 31, 32, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 51, 52, 58, 60, 72, 80, 82, 83, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 235, 239], "param": [5, 6, 8, 9, 19, 30, 31, 32, 34, 36, 37, 38, 40, 42, 43, 45, 46, 47, 48, 50, 52, 57, 58, 59, 60, 65, 68, 72, 76, 77, 78, 82, 83, 111, 112, 115, 118, 120, 125, 130, 133, 137, 140, 145, 161, 162, 164, 165, 166, 167, 168, 169, 170, 174, 179, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 214, 226, 228, 241, 247], "encryptedbatch": [5, 21, 31, 42, 46, 48, 50, 82], "singl": [5, 9, 31, 33, 34, 42, 46, 48, 50, 71, 74, 78, 82, 116, 142, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 220, 239], "batch": [5, 6, 20, 21, 23, 27, 31, 32, 33, 34, 42, 43, 46, 47, 48, 50, 52, 60, 82, 83, 163, 191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211, 217], "arima": [6, 61], "hyper_param": [6, 32, 43, 47, 52, 60, 83], "plainmodelhyperparam": [6, 32, 43, 47, 52, 60, 83], "hyperparamet": [6, 14, 32, 34, 43, 47, 52, 60, 61, 83], "content": [6, 8, 9, 10, 11, 25, 32, 33, 37, 38, 40, 43, 47, 52, 57, 58, 60, 64, 66, 78, 79, 80, 83, 102, 103], "depend": [6, 8, 19, 32, 43, 47, 52, 60, 83, 144, 163, 217], "underli": [6, 8, 30, 32, 36, 37, 38, 40, 43, 45, 47, 49, 52, 60, 72, 83, 163], "correspond": [6, 9, 28, 43, 47, 52, 58, 60, 78, 83, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 239, 249], "stream": [6, 14, 43, 47, 52, 60, 83, 163, 231], "all": [6, 8, 9, 10, 11, 18, 19, 20, 25, 30, 32, 34, 39, 42, 43, 47, 52, 57, 59, 60, 63, 65, 66, 71, 76, 77, 78, 83, 90, 112, 119, 120, 124, 125, 129, 130, 133, 136, 137, 145, 147, 157, 161, 162, 163, 164, 165, 166, 167, 169, 178, 179, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 220, 231, 235, 239, 263], "rewind": [6, 43, 47, 52, 60, 83], "get_empty_he_model": [6, 43, 47, 52, 60, 83], "he_context": [6, 43, 47, 52, 60, 83], "get_hyper_param": [6, 43, 47, 52, 60, 83], "get_input_shapes_for_fit": [6, 43, 47, 52, 60, 83], "expect": [6, 34, 43, 47, 51, 52, 60, 66, 83, 119, 124, 129, 136, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "If": [6, 8, 9, 15, 19, 28, 30, 33, 34, 36, 37, 38, 40, 43, 45, 47, 51, 52, 57, 58, 60, 66, 72, 74, 76, 77, 78, 79, 80, 83, 101, 104, 105, 116, 141, 142, 145, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 226, 231, 235, 239, 241, 249, 263], "zero": [6, 9, 19, 43, 47, 51, 52, 57, 59, 60, 61, 83, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 231], "get_input_shapes_for_predict": [6, 43, 47, 52, 60, 83], "get_inputs_names_for_fit": [6, 43, 47, 52, 60, 83], "deduc": [6, 43, 47, 52, 60, 83], "multipl": [6, 8, 9, 20, 21, 22, 28, 29, 34, 43, 47, 49, 51, 52, 57, 58, 60, 61, 76, 79, 80, 83, 116, 142, 163, 217, 218, 231], "get_inputs_names_for_predict": [6, 43, 47, 52, 60, 83], "get_outputs_names_of_predict": [6, 43, 47, 52, 60, 83], "init": [6, 32, 33, 34, 36, 37, 38, 43, 45, 47, 52, 60, 72, 83, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "init_from_fil": [6, 43, 47, 52, 60, 83], "is_fit_mod": [6, 43, 47, 52, 60, 83], "mode": [6, 34, 43, 47, 51, 52, 60, 72, 83, 84, 112, 120, 125, 130, 133, 137, 145, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218, 229, 231, 255], "is_verbos": [6, 43, 47, 52, 60, 83], "turn": [6, 43, 47, 52, 60, 62, 63, 74, 77, 83], "off": [6, 9, 43, 47, 52, 60, 63, 74, 83, 157, 184, 226, 241], "validate_init": [6, 43, 47, 52, 60, 83], "valid": [6, 9, 43, 47, 52, 58, 60, 80, 83, 111, 112, 116, 120, 125, 130, 133, 137, 142, 145, 147, 150, 163, 220, 225, 229, 249, 253, 255], "ha": [6, 8, 9, 15, 30, 34, 36, 37, 38, 40, 43, 45, 47, 52, 60, 72, 74, 83, 90, 111, 145, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 220, 239, 252, 254, 259], "been": [6, 43, 47, 52, 60, 66, 83, 145, 217], "configur": [7, 29, 30, 34, 36, 37, 38, 39, 40, 41, 45, 51, 53, 66, 68, 72, 84, 157, 198, 217, 223, 262], "bootstrap": [7, 29, 30, 36, 37, 38, 40, 45, 72], "via": [7, 163, 231], "variou": [7, 30, 32, 36, 37, 38, 40, 45, 50, 52, 65, 66, 68, 72], "setup": [7, 32], "becaus": [8, 57, 147, 163, 217, 220], "point": [8, 29, 53, 57, 61, 62, 66, 144, 147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 242], "view": [8, 57, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "we": [8, 28, 57, 145, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 235], "ll": [8, 57], "usual": [8, 19, 34, 57, 76, 163, 231], "sever": [8, 57, 157, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "combin": [8, 57, 163, 217, 231, 249], "complic": [8, 57], "matrix": [8, 9, 43, 57, 147, 163, 220, 226, 235, 239, 241, 258], "lower": [8, 28, 51, 61, 76, 145], "document": [8, 63, 76, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "differ": [8, 18, 19, 20, 28, 33, 34, 76, 145, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218, 235], "effect": [8, 9, 32, 34, 61, 62, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "chainindex": [8, 19], "see": [8, 9, 15, 28, 37, 38, 40, 51, 58, 63, 66, 74, 76, 80, 112, 116, 120, 125, 130, 133, 137, 142, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 226, 231, 239, 241], "scheme": [8, 19, 29, 30, 35, 36, 37, 38, 40, 45, 49, 62, 72, 163], "constructor": [8, 9, 10, 11, 14, 15, 19, 20, 21, 23, 25, 28, 29, 30, 33, 42, 46, 49, 50, 52, 57, 58, 61, 75, 76, 77, 78, 82], "src": [8, 9, 19, 28, 57, 58, 65, 67, 68, 75, 76, 77, 163], "copi": [8, 9, 10, 11, 19, 25, 57, 58, 65, 67, 68, 77, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217], "add": [8, 9, 10, 11, 18, 25, 58, 62, 77, 80, 112, 120, 125, 130, 133, 137, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218, 231], "other": [8, 9, 18, 19, 30, 34, 36, 37, 38, 40, 45, 57, 58, 62, 66, 71, 72, 74, 77, 78, 79, 80, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 231, 235, 258], "anoth": [8, 9, 57, 58, 80, 163], "elementwis": [8, 9, 49, 58, 76, 80, 161, 166], "place": [8, 49, 76, 77, 140, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 228, 231], "perform": [8, 9, 30, 32, 34, 51, 63, 66, 106, 147, 161, 162, 163, 164, 165, 166, 167, 178, 188, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 231, 239], "addit": [8, 62, 112, 120, 125, 130, 133, 137, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 249], "light": 8, "task": 8, "allow": [8, 18, 19, 30, 61, 64, 73, 116, 142, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231], "smooth": [8, 231], "sequenc": [8, 113, 116, 138, 141, 142, 163, 217], "oper": [8, 29, 30, 34, 36, 37, 38, 40, 45, 64, 72, 74, 76, 84, 145, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 231, 263], "add_raw": [8, 9], "raw": [8, 226, 241], "add_plain": [8, 9], "ptile": [8, 17, 19, 30, 36, 37, 38, 40, 45, 58, 72], "add_plain_raw": [8, 9], "add_scalar": [8, 9, 18], "scalar": [8, 9, 18, 145, 163, 205, 239], "float": [8, 9, 15, 18, 19, 28, 30, 34, 36, 37, 38, 40, 45, 51, 53, 57, 58, 62, 72, 75, 76, 78, 79, 80, 116, 141, 142, 145, 150, 161, 162, 163, 164, 165, 166, 167, 188, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 221, 225, 230, 231, 246, 249, 253, 260], "doubl": [8, 9, 15, 18, 19, 28, 30, 36, 37, 38, 40, 43, 45, 57, 58, 72, 76, 78, 79, 80, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "slot": [8, 9, 18, 19, 23, 28, 29, 30, 34, 36, 37, 38, 40, 45, 49, 57, 72, 74, 77, 78, 79], "integ": [8, 15, 19, 29, 32, 34, 53, 57, 71, 79, 157, 163, 239], "add_til": 8, "argument": [8, 28, 43, 71, 76, 78, 144, 147, 149, 150, 151, 152, 157, 161, 162, 163, 164, 165, 166, 167, 172, 178, 191, 192, 193, 194, 195, 198, 200, 202, 205, 207, 208, 209, 211, 220, 223, 224, 225, 229, 231, 247, 249, 251, 253, 254, 255, 258, 259], "add_tile_raw": 8, "conjug": [8, 13, 38, 63, 163], "complex": [8, 19, 62, 74, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "conjugate_raw": 8, "get_chain_index": [8, 9, 57, 58, 79], "chain": [8, 9, 19, 29, 30, 36, 37, 38, 40, 45, 57, 58, 72, 79, 163, 263], "index": [8, 9, 10, 11, 14, 19, 20, 21, 25, 29, 30, 36, 37, 38, 40, 45, 57, 58, 72, 77, 78, 79, 80, 112, 116, 119, 120, 124, 125, 129, 130, 133, 136, 137, 142, 163, 169, 217, 235, 242, 263, 264], "neg": [8, 9, 15, 28, 57, 76, 79, 163, 217, 235], "support": [8, 9, 13, 19, 29, 30, 31, 33, 34, 36, 37, 38, 40, 42, 45, 46, 50, 52, 57, 58, 59, 61, 63, 70, 72, 78, 79, 80, 84, 119, 124, 129, 136, 163, 217, 231, 265], "get_current_devic": [8, 9, 57, 58, 80], "devicetyp": [8, 9, 19, 30, 36, 37, 38, 40, 45, 57, 58, 72, 80], "current": [8, 9, 57, 58, 61, 66, 74, 77, 80, 111, 140, 144, 147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218, 220, 228, 229, 231, 247, 248, 249, 255, 258, 265], "devic": [8, 9, 14, 17, 19, 30, 36, 37, 38, 40, 45, 57, 58, 72, 80, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217], "get_multipli": [8, 9, 58, 80], "reli": [8, 9, 30, 36, 37, 38, 40, 45, 58, 72, 80, 163], "multipli": [8, 9, 49, 58, 62, 66, 78, 80, 163], "get_scal": [8, 57, 79], "meta": [8, 57, 77, 79, 163], "scale": [8, 19, 30, 36, 37, 38, 40, 45, 57, 61, 72, 79, 163, 231], "inner_sum": 8, "rot1": 8, "rot2": 8, "revers": [8, 163], "fals": [8, 9, 13, 14, 18, 19, 26, 28, 30, 32, 34, 36, 37, 38, 40, 45, 57, 62, 66, 72, 74, 75, 76, 77, 78, 96, 111, 112, 116, 120, 125, 130, 133, 137, 142, 145, 147, 157, 161, 162, 163, 164, 165, 166, 167, 178, 179, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 220, 226, 231, 235, 239, 241, 242, 252], "inner": [8, 9, 163], "sum": [8, 9, 15, 34, 58, 78, 80, 141, 163, 239], "repeat": [8, 163, 231], "rotat": [8, 9, 13, 63, 70], "4": [8, 51, 116, 141, 142, 145, 163, 205, 239], "up": [8, 34, 59, 141, 157, 163], "exclus": [8, 9, 217, 218], "properli": [8, 218], "higher": [8, 9, 28, 33, 34, 51, 57, 58, 61, 76, 79, 80, 163], "loop": [8, 157, 231], "last": [8, 9, 10, 11, 25, 51, 77, 157, 163, 217, 231, 258], "flip": [8, 163], "left": [8, 19, 59, 141, 163, 239], "right": [8, 59], "vice": [8, 163], "versa": [8, 163], "is_empti": 8, "doe": [8, 9, 19, 30, 36, 37, 38, 40, 45, 49, 72, 101, 104, 105, 163, 231, 262], "multiplyraw": [8, 9, 58, 80], "multiply_by_chainging_scal": 8, "factor": [8, 34, 62, 145, 231], "chang": [8, 57, 74, 79, 145, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "everi": [8, 9, 14, 49, 58, 71, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231], "done": [8, 64, 163], "therefor": [8, 163], "exterm": 8, "fast": [8, 231], "avail": [8, 14, 23, 28, 30, 32, 34, 36, 37, 38, 40, 45, 72, 76, 111, 140, 169, 228], "also": [8, 9, 58, 63, 66, 76, 80, 111, 116, 119, 124, 129, 136, 140, 142, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 228, 231, 242], "caus": [8, 9, 163], "difficulti": 8, "down": [8, 59], "line": [8, 157, 161, 162, 164, 165, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "due": [8, 101, 104, 105, 163], "mismatch": 8, "rais": [8, 9, 14, 15, 19, 30, 36, 37, 38, 40, 45, 49, 57, 58, 72, 74, 76, 78, 79, 80, 101, 104, 105, 147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 198, 200, 202, 207, 208, 209, 211, 220, 223, 239, 254, 259], "runtimeerror": [8, 9, 14, 19, 30, 36, 37, 38, 40, 45, 57, 58, 72, 78, 79, 80, 101, 104, 105, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "multiply_imaginary_unit": 8, "imaginari": [8, 62, 163], "unit": [8, 231], "multiply_plain": [8, 9], "multiply_plain_raw": [8, 9], "multiply_raw": [8, 9], "multiply_scalar": [8, 9], "multiply_til": 8, "multiply_tile_raw": 8, "negat": [8, 9, 46, 61], "nullify_imaginary_part": 8, "nullifi": 8, "part": [8, 29, 32, 34, 53, 62, 66, 161, 162, 164, 165, 166, 167, 174, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "reduce_chain_index": [8, 9, 57, 58, 79], "reduc": [8, 9, 51, 57, 58, 78, 79, 145, 163, 231, 239], "ignor": [8, 19, 57, 79, 145, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 239], "alreadi": [8, 14, 26, 30, 36, 37, 38, 40, 45, 57, 66, 72, 74, 79, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "lowest": [8, 57, 79], "relinear": [8, 9, 63], "version": [8, 82, 116, 142, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 235, 239], "take": [8, 33, 34, 163], "care": 8, "automat": [8, 29, 30, 36, 37, 38, 40, 45, 72, 116, 141, 142, 163, 197, 217, 231], "rescal": [8, 9], "modulu": [8, 30, 36, 37, 38, 40, 45, 72], "rescale_raw": 8, "n": [8, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 239], "offset": [8, 9, 63, 163, 231], "element": [8, 9, 18, 20, 33, 48, 62, 78, 163, 164, 165, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 239], "10": [8, 32, 34, 116, 141, 142, 145, 163, 194, 211, 231], "move": [8, 9, 57, 58, 80, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "back": [8, 9, 71, 75], "set_chain_index": [8, 9, 57, 58, 79], "chain_index": [8, 9, 19, 57, 58, 72, 75, 79], "equal": [8, 9, 15, 18, 19, 23, 51, 57, 58, 63, 79, 112, 118, 120, 125, 130, 133, 137, 140, 163, 214, 221, 228, 231, 235, 239, 246], "specifi": [8, 9, 14, 15, 19, 22, 29, 30, 34, 36, 37, 38, 40, 43, 45, 57, 58, 59, 61, 63, 70, 72, 74, 77, 78, 79, 80, 113, 138, 157, 161, 162, 163, 164, 165, 166, 167, 184, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231, 239, 249], "can": [8, 28, 29, 30, 34, 51, 57, 62, 63, 74, 75, 76, 79, 90, 144, 157, 161, 162, 163, 164, 165, 166, 167, 172, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 231, 235, 239, 247, 265], "less": [8, 19, 34, 57, 79, 163, 239], "than": [8, 9, 19, 30, 33, 34, 36, 37, 38, 40, 45, 57, 62, 66, 72, 78, 79, 145, 157, 163, 217, 231, 239], "terget": [8, 57, 79], "set_scal": [8, 57, 79], "wai": [8, 57, 79, 89, 163, 231], "interpret": [8, 57, 79], "slot_count": [8, 30, 36, 37, 38, 40, 45, 57, 72, 79], "consist": [8, 50, 52, 57, 79, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "squar": [8, 9, 18, 78, 163, 167, 178, 226, 241], "square_raw": [8, 9], "sub": [8, 9, 58, 77, 80, 157, 163], "subtract": [8, 9, 58, 80, 163], "wise": [8, 76, 164, 165, 167], "sub_raw": [8, 9], "sub_plain": [8, 9], "sub_plain_raw": [8, 9], "sub_til": 8, "sub_tile_raw": 8, "sum_exp_by_squaring_left_to_right": 8, "where": [8, 26, 28, 30, 36, 37, 38, 40, 43, 45, 51, 71, 72, 76, 78, 157, 161, 162, 163, 164, 165, 166, 167, 205, 221, 230, 231, 246, 260], "cyclic": 8, "roll": [8, 163], "start": [8, 9, 30, 64, 77, 112, 120, 125, 130, 133, 137, 163, 217, 231], "out": [8, 9, 66, 159, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "edg": 8, "summat": [8, 9, 58, 80], "similar": [8, 66, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "summar": 8, "sum_exp_by_squaring_right_to_left": 8, "to_devic": [8, 9, 57, 58, 80], "tiletensor": [9, 58, 76], "multipi": [9, 58, 80], "dimension": [9, 58, 80, 163, 205], "arrai": [9, 18, 19, 43, 58, 59, 62, 71, 76, 80, 116, 142, 147, 163, 205, 220, 235, 239], "matric": [9, 58, 80, 116, 142, 163], "fix": [9, 34, 53, 58, 80, 141, 163], "case": [9, 15, 18, 19, 33, 34, 51, 58, 63, 71, 80, 147, 163, 217, 218, 220, 231, 235, 239], "ttshape": [9, 58, 74, 75, 80], "certain": [9, 29, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "ctile": [9, 11, 17, 19, 23, 28, 29, 30, 36, 37, 38, 40, 45, 49, 58, 72, 76, 78, 80], "ptiletensor": [9, 75], "keep_unknowns_clear": 9, "boolean": [9, 18, 19, 28, 30, 36, 37, 38, 40, 45, 72, 163, 169], "add_to": [9, 58, 80], "equival": [9, 58, 80, 112, 118, 120, 125, 130, 133, 137, 140, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 214, 228], "add_to_raw": [9, 58, 80], "adjust_chain_index": 9, "assert_integr": [9, 58, 80], "epsilon": [9, 58, 80], "1e": [9, 18, 19, 58, 75, 80, 145, 163], "06": [9, 19, 58, 75, 80], "integr": [9, 58, 80, 85, 119, 124, 129, 136, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "check": [9, 19, 58, 74, 80, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220], "maxim": [9, 18, 34, 58, 80], "diff": [9, 18, 58, 80, 163], "found": [9, 19, 30, 36, 45, 58, 72, 80, 157, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "uniniti": [9, 30, 34, 36, 37, 38, 40, 45, 58, 72, 80, 163], "0": [9, 15, 28, 33, 34, 51, 58, 61, 71, 76, 80, 116, 141, 142, 145, 157, 161, 162, 163, 164, 165, 166, 167, 178, 184, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 231, 235, 239, 242, 249, 254, 259, 263], "toler": [9, 19, 58, 80], "6": [9, 19, 58, 80, 116, 142, 163, 231, 239, 249], "test": [9, 58, 80, 111, 112, 116, 120, 125, 130, 133, 137, 142, 147, 184, 220, 229, 255], "fail": [9, 18, 58, 80, 101, 104, 105], "clear_unknown": [9, 77], "clear": [9, 10, 11, 25, 51, 63, 231], "unknown": [9, 51, 71, 74, 77], "duplicate_over_dim": 9, "dim": [9, 58, 74, 77, 80, 163], "becom": [9, 77, 163], "duplic": [9, 74, 77, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "flatten": [9, 58, 80, 163], "start_dim": [9, 163], "end_dim": [9, 163], "consecut": [9, 163], "product": [9, 22, 49, 51, 71, 163], "consid": [9, 19, 34, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 230, 231, 260, 262], "interleav": [9, 74], "end": [9, 10, 11, 25, 34, 62, 66, 76, 77, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "b": [9, 28, 76, 163], "do": [9, 163, 231], "exist": [9, 26, 30, 36, 37, 38, 40, 45, 72, 74, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 198, 200, 202, 207, 208, 209, 211, 223, 231], "startdim": 9, "enddim": 9, "get_add": [9, 58, 80], "get_add_plain": 9, "addplain": 9, "get_add_plain_raw": 9, "addplainraw": 9, "get_add_raw": [9, 58, 80], "addraw": [9, 58, 80], "get_add_scalar": 9, "val": [9, 18, 19, 74, 75, 112, 120, 125, 130, 133, 137], "thei": [9, 58, 61, 66, 74, 147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220], "maintain": [9, 22, 58, 217], "get_clear_unknown": 9, "clera": 9, "get_convolut": 9, "filter": [9, 157, 163], "bias": 9, "stride_row": 9, "stride_col": 9, "appl": 9, "convolut": [9, 59, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "row": [9, 43, 51, 71, 163, 226, 235, 239, 241, 261], "col": [9, 51], "get_duplicate_over_dim": 9, "get_estimated_memory_usage_byt": [9, 58, 80], "estim": [9, 33, 34, 58, 80, 217, 231, 235], "usag": [9, 58, 80, 85, 90, 163], "get_multiply_and_sum": [9, 58, 80], "between": [9, 18, 19, 28, 51, 58, 61, 67, 71, 80, 116, 142, 145, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "multiplyandsum": [9, 58, 80], "get_multiply_plain": 9, "multiplyplain": 9, "get_multiply_plain_and_sum": 9, "sum_dim": 9, "sumdim": 9, "get_multiply_plain_raw": 9, "multiplyplainraw": 9, "get_multiply_raw": [9, 58, 80], "get_multiply_scalar": 9, "get_num_used_til": [9, 58, 77, 80], "get_reduce_chain_index": [9, 58], "get_relinear": 9, "get_rescal": 9, "get_set_chain_index": [9, 58], "get_shap": [9, 58, 80], "get_slic": 9, "start_index": 9, "slice_depth": 9, "slice": [9, 163, 239], "specif": [9, 20, 21, 23, 29, 30, 34, 36, 37, 38, 40, 45, 65, 68, 72, 74, 163, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 258], "same": [9, 20, 30, 33, 36, 37, 38, 40, 45, 72, 76, 111, 116, 142, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218, 239, 249], "origin": [9, 51, 62, 66, 71, 74, 84, 85, 163, 218, 231], "getslic": 9, "startindex": 9, "slicedepth": 9, "along": [9, 20, 33, 48, 74, 77, 163, 239], "count": [9, 15, 19, 74, 78, 141, 226, 235, 241], "backward": [9, 147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220], "previoud": 9, "depth": [9, 14, 22, 28, 29, 49, 51, 61, 76, 157, 180], "get_squar": 9, "get_square_raw": 9, "squareraw": 9, "get_sub": 9, "get_sub_plain": 9, "subplain": 9, "get_sub_plain_raw": 9, "subplainraw": 9, "get_sub_raw": 9, "subraw": 9, "get_sum_in_tiles_over_dim": 9, "get_sum_over_dim": 9, "get_sum_tiles_over_dim": 9, "get_tile_at": [9, 58, 80], "arg0": [9, 10, 11, 18, 19, 25, 26, 34, 37, 38, 40, 58, 64, 73, 77, 80], "int32": [9, 19, 58, 63, 77, 80, 163], "ind": [9, 58, 80], "pyarrai": [9, 58, 77, 80], "get_tile_by_flat_index": [9, 58, 80], "th": [9, 14, 15, 28, 43, 58, 80, 163, 235], "convent": [9, 18, 51, 58, 80, 163, 235], "flat": [9, 58, 80], "multiply_and_sum": 9, "both": [9, 15, 65, 66, 161, 162, 163, 164, 165, 166, 167, 184, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231], "length": [9, 19, 116, 141, 142, 163, 217, 239], "t1": 9, "t2": 9, "similarli": [9, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 239], "matrix1": 9, "t3": 9, "matrix2": 9, "c": [9, 15, 19, 30, 38, 43, 49, 65, 67, 68, 75, 90, 163, 194, 211, 235], "multiply_and_sum_to": [9, 58, 80], "multiply_plain_and_sum": 9, "consum": [9, 29, 34, 217, 263], "As": [9, 163], "unus": [9, 74, 77], "thu": [9, 51, 71, 235], "elimin": [9, 163], "multiply_to": [9, 58, 80], "multiply_to_raw": [9, 58, 80], "re_encrypt": 9, "again": [9, 75], "bring": 9, "top": [9, 221, 230, 246, 260], "relinearize_and_rescal": 9, "rotate_along_dim": 9, "rot": 9, "originals": [9, 74], "fall": 9, "cycl": [9, 163], "extern": [9, 74], "work": [9, 30, 34, 49, 62, 76, 119, 124, 129, 136, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 218, 231], "regardless": [9, 217], "flag": [9, 19, 29, 30, 35, 36, 37, 38, 39, 40, 45, 61, 62, 72, 74, 77, 78], "being": [9, 34, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 235], "succe": 9, "trivial": [9, 62], "valueerror": [9, 15, 30, 36, 45, 72, 74, 76, 239], "satisfi": [9, 34, 78, 163, 170], "abov": [9, 15, 34, 64, 66, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 239], "shift_along_dim": 9, "shift": [9, 163], "posit": [9, 10, 11, 15, 25, 77, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231, 235, 242], "follow": [9, 19, 64, 66, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 235], "mark": [9, 74], "unkown": 9, "greater": [9, 19, 61, 163, 231], "sub_from": [9, 58, 80], "sub_from_raw": [9, 58, 80], "sum_in_tiles_over_dim": 9, "sum_over_dim": 9, "sum_tiles_over_dim": 9, "validate_pack": [9, 58, 80], "assert": [9, 18, 19, 58, 80, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "pack": [9, 48, 58, 74, 77, 80, 84, 262], "fill": [9, 58, 80, 163, 231], "iter": [10, 11, 25, 27, 66, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 231], "append": [10, 11, 25, 163, 231], "x": [10, 11, 25, 28, 76, 116, 142, 161, 163, 165, 166, 171, 176, 177, 180, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 226, 231, 241, 242], "item": [10, 11, 20, 25, 112, 120, 125, 130, 133, 137, 163, 231], "extend": [10, 11, 25, 112, 120, 125, 130, 133, 137], "l": [10, 11, 25, 37, 38, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "insert": [10, 11, 25, 51, 71, 77], "pop": [10, 11, 25], "remov": [10, 11, 25, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "comparison": [12, 18, 19, 28, 61, 76, 78, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "tabl": [12, 23, 24, 25, 62, 66, 71], "queri": [12, 30, 78, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "is_equ": [12, 78], "is_great": 12, "is_smal": 12, "is_greater_equ": 12, "is_smaller_equ": 12, "describ": [13, 34, 53, 68, 70, 84, 163, 262], "librari": [13, 19, 29, 30, 34, 36, 37, 38, 40, 45, 72, 85], "completlei": 14, "random": [14, 15, 30, 36, 37, 38, 40, 45, 61, 72, 116, 141, 142, 163, 217, 218, 231], "forest": [14, 15], "statist": [14, 226, 231, 239, 241], "machin": 14, "paper": [14, 28, 161, 166, 191, 194, 202, 209, 211], "http": [14, 19, 28, 112, 120, 125, 130, 133, 137, 140, 161, 166, 194, 211, 226, 228, 231, 239, 241], "arxiv": [14, 161, 166], "org": [14, 19, 28, 112, 120, 125, 130, 133, 137, 161, 166, 226, 239, 241], "pdf": [14, 19, 28, 161, 166, 194, 211], "1508": 14, "06845": 14, "cannot": [14, 34, 72, 90, 163, 217], "befor": [14, 15, 46, 72, 116, 142, 145, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 239], "complet": [14, 15, 33, 163, 217, 231, 254, 259], "sethyperparam": 14, "system": [14, 26, 34, 231], "are_hyper_params_set": 14, "crfplain": 14, "post": [14, 32, 78, 115, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 254, 259], "assum": [14, 48, 51, 74, 78, 84, 218], "yet": [14, 39], "encode_encrypt_input": 14, "x_train": [14, 116, 142], "y_train": [14, 116, 142], "tupl": [14, 15, 66, 78, 161, 162, 163, 164, 165, 166, 167, 169, 170, 179, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 226, 231, 241, 242, 249], "sampl": [14, 15, 20, 32, 34, 51, 61, 71, 111, 112, 116, 118, 119, 120, 124, 125, 129, 130, 133, 136, 137, 140, 142, 163, 214, 217, 218, 221, 228, 235, 246], "xtrain": 14, "f": [14, 15, 28, 76, 163, 239], "featur": [14, 15, 19, 61], "label": [14, 20, 116, 142, 221, 226, 230, 235, 241, 246, 260], "ytrain": 14, "set_hyper_param": 14, "num_tre": 14, "categorical_predictor": 14, "ordinal_predictor": 14, "seed": [14, 30, 36, 37, 38, 40, 45, 72, 217, 218], "tree": [14, 15], "column": [14, 15, 46, 78, 163, 235], "categor": 14, "predictor": 14, "ordin": [14, 163, 249], "get_num_input_col": 15, "categori": [15, 226, 241], "predict_count_all_tre": 15, "t": [15, 26, 30, 36, 37, 38, 39, 40, 45, 72, 76, 78, 141, 145, 147, 155, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 198, 200, 202, 205, 207, 208, 209, 211, 217, 220, 223, 227, 231, 249], "leaf": [15, 163, 205], "l_": 15, "reach": [15, 231], "phase": 15, "here": [15, 65, 163], "defin": [15, 19, 53, 77, 108, 147, 149, 157, 163, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 220, 224, 231, 239, 251], "predict_proba": 15, "probabl": [15, 163], "belong": 15, "set_category_weight": 15, "category_weight": 15, "categoryweight": 15, "set_nan_handling_method": 15, "nan_handl": 15, "nan_proba": 15, "handl": [15, 32, 34, 48, 51, 64, 144, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231, 239], "how": [15, 28, 62, 66, 76, 157, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 239, 262], "nan": [15, 147, 163, 220, 239, 252], "data_ratio": 15, "ratio": [15, 51, 163, 167, 169, 178, 181, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "had": [15, 66], "categroi": 15, "descript": [15, 231], "In": [15, 34, 63, 145, 147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218, 220, 231, 235, 239], "set_prediction_method": 15, "pm": 15, "counter": [15, 84, 188, 231], "normal": [15, 51, 76, 90, 145, 163, 191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211, 226, 235, 241], "vote": 15, "except": [15, 26, 30, 36, 37, 38, 40, 45, 72, 147, 157, 163, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 259], "alia": [16, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 216], "sealckkscontext": 16, "device_cpu": 17, "device_gpu": 17, "thin": 18, "wrapper": [18, 111, 118, 123, 140, 214, 215, 228, 231], "boost": 18, "numer": [18, 22, 217, 231], "ubla": 18, "assert_equ": [18, 19, 75], "titl": [18, 19, 75, 226, 241], "ep": [18, 19, 75, 145], "05": [18, 163], "rel": [18, 19, 145], "mean": [18, 42, 59, 61, 74, 161, 162, 163, 164, 165, 166, 167, 217, 239, 263], "error": [18, 29, 61, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "mse": 18, "print": [18, 19, 30, 32, 36, 37, 38, 40, 45, 62, 66, 72, 100, 145, 147, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 229, 231, 255, 263], "5": [18, 28, 51, 68, 76, 116, 142, 163, 194, 195, 200, 205, 211, 239], "to_numpi": 18, "decod": [19, 48], "expected_v": [19, 75], "percent": [19, 75, 226, 241], "v": [19, 30, 36, 37, 38, 40, 45, 49, 72, 77, 163], "fab": 19, "foreach": 19, "maximum": [19, 59, 61, 163, 231], "absolut": [19, 28, 116, 142, 163], "compar": [19, 28, 34, 61, 76, 78, 231], "expectedv": 19, "failur": 19, "messag": [19, 145, 157, 231, 263], "complex128": [19, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "decode_complex": 19, "decode_doubl": [19, 75], "decode_int": 19, "decrypt_decode_complex": 19, "ctxt": 19, "decrypt_decode_doubl": [19, 75], "decrypt_decode_int": 19, "decrypt_decode_tile_doubl": 19, "effeci": 19, "regular": [19, 242], "ckk": [19, 36, 37, 38, 40, 62, 72], "encrpyt": 19, "rtype": [19, 78], "thrown": [19, 26, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "len": [19, 76, 116, 141, 142, 163, 217, 231], "encrypt_til": 19, "get_decrypt_added_noise_en": 19, "ad": [19, 66, 76, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211, 231], "nois": [19, 51], "get_decrypt_added_noise_precis": 19, "precis": [19, 29, 32, 34, 61, 62, 184, 239], "und": 19, "get_default_devic": [19, 30, 36, 37, 38, 40, 45, 72], "gener": [19, 29, 30, 36, 37, 38, 40, 45, 66, 68, 71, 72, 119, 124, 129, 136, 141, 147, 163, 169, 172, 179, 217, 220, 231, 247], "get_default_scal": [19, 30, 36, 37, 38, 40, 45, 72], "setdefaultscal": 19, "previous": [19, 30, 36, 37, 38, 40, 45, 72, 163], "affect": [19, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "sacl": 19, "print_error_stat": 19, "actual_c": 19, "expected_z": 19, "as_csv": 19, "statstic": 19, "inform": [19, 66, 157, 161, 162, 163, 164, 165, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 264], "stat": [19, 32, 231, 239], "csv": [19, 65, 66, 78, 157, 261], "restore_default_scal": 19, "restor": 19, "set_decrypt_added_noise_en": 19, "determin": [19, 30, 36, 37, 38, 40, 45, 61, 72, 102, 103, 157], "behaviour": [19, 51], "relev": [19, 61, 157], "purpos": [19, 62, 66, 163], "ensur": [19, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218], "secur": [19, 29, 30, 32, 33, 34, 36, 37, 38, 40, 45, 72], "refer": [19, 30, 52, 75, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 235, 239], "On": 19, "approxim": [19, 28, 61, 76, 161], "baiyu": 19, "li": 19, "daniel": 19, "micciancio": 19, "eprint": [19, 28], "iacr": [19, 28], "2020": 19, "1533": 19, "set_decrypt_added_noise_precis": 19, "set_default_devic": [19, 30, 36, 37, 38, 40, 45, 72], "set_default_scal": [19, 30, 36, 37, 38, 40, 45, 72], "like": [19, 62, 116, 142, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 220, 230, 231, 235, 242, 249, 260], "unset": 19, "henceforth": 19, "get_item": 20, "get_num_item": 20, "nubmer": 20, "get_batch": 21, "get_num_batch": 21, "evalu": [22, 28, 32, 51, 76, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 235], "patersonstockmay": 22, "paterson": 22, "stockmay": 22, "efficient_pow": 22, "reus": [22, 163], "power": [22, 34, 49, 76], "aim": [22, 34], "minim": [22, 51, 74, 106, 145], "min_depth": [22, 76], "numerical_st": [22, 51], "stabil": 22, "veri": [22, 163, 231], "small": [22, 29], "entri": [23, 78, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 235, 239], "record": [23, 65, 66, 67, 68, 69, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "whose": [23, 76, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 235], "field": [24, 25, 65, 66, 68, 78, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 242, 249], "databas": [24, 25, 78], "hybrid_bitwis": 24, "num": [24, 74, 231], "mask": [24, 71, 78, 163, 239], "root_path": [26, 108], "folder": 26, "clean": 26, "invalid_argu": 26, "doesn": [26, 30, 36, 37, 38, 39, 40, 45, 72, 163, 198, 223], "arg1": [26, 64, 73], "sav": [26, 64, 73], "savabl": [26, 64, 73], "most": [27, 61, 163, 230, 247, 260], "fit_batch_s": 27, "stochast": 27, "gradient": [27, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "descent": 27, "learning_r": 27, "rate": [27, 61, 144, 145, 231], "number_of_epoch": 27, "epoch": [27, 144, 145, 147, 217, 218, 220, 226, 229, 241, 255, 258], "number_of_iter": 27, "invers": [28, 76, 78, 163, 249], "g_rep": [28, 76], "f_rep": [28, 76], "max_possible_abs_of_diff": 28, "two": [28, 34, 61, 66, 76, 85, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "calcul": [28, 42, 76, 78, 239], "second": [28, 34, 76, 231, 249], "mani": [28, 30, 62, 76, 119, 124, 129, 136, 163, 217], "repetit": [28, 76], "further": [28, 30], "explan": [28, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "upper": [28, 61, 76, 157, 163], "bound": [28, 74, 76, 145, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "tighter": [28, 76], "accur": [28, 72, 76], "compareinplac": 28, "lower_bound": [28, 76], "upper_bound": [28, 76], "bit_resolut": [28, 76], "detail": [28, 30, 36, 37, 38, 40, 45, 51, 72, 76, 77, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 263], "arithmet": [28, 239], "p": [28, 37, 49, 61, 163, 242], "15": [28, 33, 163], "2016": 28, "421": 28, "control": [28, 30, 36, 37, 38, 40, 45, 61, 72, 76, 116, 142], "accuraci": [28, 61, 76, 209, 230, 235, 260], "increas": [28, 29, 33, 61, 76, 145], "account": [28, 61, 76], "consumig": [28, 76], "one_hot": 28, "possible_valu": 28, "ctilevector": [28, 49, 76, 78], "formal": 28, "j": [28, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 235], "sourc": [28, 76, 157, 163], "max_abs_v": 28, "binary_r": 28, "7": [28, 33, 76, 116, 141, 142, 163, 239, 249], "appear": [28, 68, 76, 163, 235, 239], "composit": [28, 76], "rang": [28, 51, 61, 76, 116, 141, 142, 145, 163, 218, 231], "want": [28, 163], "find": [28, 66, 157, 170, 230, 260], "close": [28, 231], "security_level": [29, 34], "integerpartprecis": 29, "num_slot": 29, "multiplication_depth": 29, "fractional_part_precis": [29, 34], "integer_part_precis": [29, 34], "fraction": [29, 32, 34, 53, 141], "automatic_bootstrap": 29, "runtim": [29, 34, 78, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "too": [29, 34, 163], "logic": [29, 144], "decid": [29, 51], "But": [29, 163], "deli": 29, "bootstrapp": 29, "creation": 29, "bootsrapevalu": 29, "upon": [29, 30, 231], "bootstrapevalutor": 29, "insecur": 29, "public_funct": [29, 30, 36, 37, 38, 40, 45, 72], "public": [29, 30, 36, 37, 38, 40, 45, 63, 72, 231], "hecontex": 29, "abstract": [30, 73, 85, 90, 119, 124, 129, 136], "main": [30, 85, 112, 120, 125, 130, 133, 137, 159, 163, 217], "readi": [30, 231], "initali": 30, "inherit": [30, 89, 231], "concret": [30, 40], "helibckkscontext": 30, "Then": 30, "continu": [30, 163], "oblivi": 30, "bundl": 30, "togeth": [30, 49, 144, 247], "either": [30, 37, 38, 40, 74, 79, 144, 147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 239], "pair": [30, 61, 66, 163], "just": [30, 77, 157, 163], "everyth": [30, 34], "clone": [30, 36, 37, 38, 40, 45, 72, 163, 205], "context_nam": [30, 36, 37, 38, 40, 45, 72], "req": [30, 36, 45, 72], "heconfigrequir": [30, 33, 36, 45, 72], "config": [30, 33, 36, 45, 66, 68, 72], "prioritized_context_nam": [30, 36, 45, 72], "instanc": [30, 36, 45, 72, 116, 142, 144, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 231, 249], "priorit": [30, 36, 45, 72], "highest": [30, 36, 37, 38, 40, 45, 51, 72], "prioriti": [30, 36, 45, 72], "match": [30, 36, 45, 66, 71, 72, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "get_automatic_bootstrap": [30, 36, 37, 38, 40, 45, 72], "automaticbootstrap": [30, 36, 37, 38, 40, 45, 72], "get_context_id": [30, 36, 37, 38, 40, 45, 72], "id": [30, 36, 37, 38, 40, 45, 71, 72, 217, 247], "identifi": [30, 36, 37, 38, 40, 45, 71, 72, 157], "get_library_nam": [30, 36, 37, 38, 40, 45, 72], "get_modulus_chain": [30, 36, 37, 38, 40, 45, 72], "prime": [30, 36, 37, 38, 40, 45, 72], "pyarrayuint64": [30, 36, 37, 38, 40, 45, 72], "get_public_funct": [30, 36, 37, 38, 40, 45, 72], "publicfunct": [30, 36, 37, 38, 40, 45, 72], "get_scheme_nam": [30, 36, 37, 38, 40, 45, 72], "get_security_level": [30, 36, 37, 38, 40, 45, 72], "suppli": [30, 36, 37, 38, 40, 45, 49, 72], "get_signatur": [30, 36, 37, 38, 40, 45, 72], "signatur": [30, 36, 37, 38, 40, 45, 72, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "distinguish": [30, 36, 37, 38, 40, 45, 72, 247], "enough": [30, 33, 36, 37, 38, 40, 45, 72], "abl": [30, 36, 37, 38, 40, 45, 72], "get_top_chain_index": [30, 36, 37, 38, 40, 45, 72], "get_trait": [30, 36, 37, 38, 40, 45, 72], "hetrait": [30, 36, 37, 38, 40, 45, 72], "has_secret_kei": [30, 36, 37, 38, 40, 45, 72], "throw": [30, 36, 37, 38, 40, 45, 72, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "is_registered_context": [30, 36, 37, 38, 40, 45, 72], "regist": [30, 36, 37, 38, 40, 45, 72, 112, 120, 125, 130, 133, 137, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "load_secret_kei": [30, 36, 37, 38, 40, 45, 72], "seed_onli": [30, 36, 37, 38, 40, 45, 72], "o": [30, 36, 37, 38, 40, 45, 72, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "load_secret_key_from_fil": [30, 36, 37, 38, 40, 45, 72], "savetofil": [30, 36, 37, 38, 40, 45, 72], "print_signatur": [30, 36, 37, 38, 40, 45, 72], "summari": [30, 36, 37, 38, 40, 45, 72, 147, 220, 226, 229, 241, 255], "public_functions_support": [30, 36, 37, 38, 40, 45, 72], "save_secret_kei": [30, 36, 37, 38, 40, 45, 72], "rather": [30, 36, 37, 38, 40, 45, 72, 157, 239], "whole": [30, 36, 37, 38, 40, 45, 72, 113, 138, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "save_secret_key_to_fil": [30, 36, 37, 38, 40, 45, 72], "public_fuct": [30, 36, 37, 38, 40, 45, 72], "set_automatic_bootstrap": [30, 36, 37, 38, 40, 45, 72], "ai": [31, 32, 61], "possibli": [31, 231], "util": [32, 33, 112, 116, 120, 125, 130, 133, 137, 141, 142, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "easili": [32, 34], "0x7f0021f909b0": 32, "optim": [32, 33, 34, 145, 147, 149, 150, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 224, 225, 251, 253], "target": [32, 34, 56, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 221, 230, 235, 242, 246, 260], "server": [32, 34], "cpu": [32, 34, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 231], "consumpt": [32, 33], "per": [32, 34, 65, 115, 163, 217], "35": [32, 34], "lazi": [32, 34], "heaan_ckk": 32, "seal_ckk": 32, "exhaust": [32, 34], "search": [32, 34, 157, 264], "parallel": [32, 218], "necessari": [32, 163, 218, 231], "step": [32, 63, 66, 71, 112, 120, 125, 130, 133, 137, 145, 147, 163, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220], "backend": [32, 36, 37, 38, 45, 72], "through": [32, 157, 163], "decrypt_tim": 32, "tba": 32, "encrypt_tim": 32, "he_input_s": 32, "he_model_s": 32, "he_output_s": 32, "key_creation_tim": 32, "keys_siz": 32, "model_encode_tim": 32, "preform": 32, "pre": [32, 66, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "predict_tim": 32, "total_predict_tim": 32, "total_setup_tim": 32, "layout": [33, 163], "measur": [33, 145], "from_str": 33, "format": [33, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 247, 249], "get_context_nam": 33, "get_he_config_requir": 33, "get_is_model_encrypt": 33, "shall": 33, "get_optimal_batch_s": 33, "improv": [33, 51, 145], "8": [33, 116, 142, 145, 163], "cost": 33, "bigger": 33, "better": [33, 34], "resourc": 33, "9": [33, 76, 116, 142, 145, 163, 205, 239], "17": 33, "23": [33, 163], "even": [33, 62, 163], "set_not_secur": [33, 34], "set_not_secure_mockup": 33, "mockup": 33, "user": [34, 37, 38, 66, 70, 108, 116, 142, 144, 147, 149, 150, 151, 152, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 198, 200, 202, 207, 208, 209, 211, 217, 220, 223, 224, 225, 229, 235, 247, 251, 253, 254, 255, 258, 259], "packag": [34, 85, 157], "consider": 34, "optimize_for_batch_s": 34, "batch_siz": [34, 97, 108, 217], "big": 34, "set_aes_key_s": 34, "key_siz": 34, "set_aes_number_config": 34, "number_config": [34, 84, 262], "numberconfig": [34, 84, 262], "characterist": 34, "set_compress_aes_kei": 34, "compress_aes_kei": 34, "set_exhaustive_search": 34, "exhaustive_search": 34, "set_fixed_num_slot": 34, "fixed_num_slot": 34, "set_fractional_part_precis": 34, "use_max_feas": 34, "feasibl": 34, "still": [34, 145, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "fulfil": [34, 36, 45, 72], "set_handle_overflow": 34, "handle_overflow": 34, "set_he_context_opt": 34, "he_context_opt": 34, "set_integer_part_precis": 34, "set_lazy_encod": 34, "lazy_encod": 34, "free": [34, 76], "set_max_batch_memori": 34, "max_batch_memori": 34, "set_max_client_inference_cpu_tim": 34, "max_client_inference_cpu_tim": 34, "micro": 34, "set_max_client_inference_memori": 34, "max_client_inference_memori": 34, "set_max_context_memori": 34, "max_context_memori": 34, "set_max_decrypt_output_cpu_tim": 34, "max_decrypt_output_cpu_tim": 34, "set_max_encrypt_input_cpu_tim": 34, "max_encrypt_input_cpu_tim": 34, "set_max_fit_cpu_tim": 34, "max_fit_cpu_tim": 34, "set_max_inference_cpu_tim": 34, "max_inference_cpu_tim": 34, "set_max_inference_memori": 34, "max_inference_memori": 34, "set_max_init_model_cpu_tim": 34, "max_init_model_cpu_tim": 34, "set_max_input_memori": 34, "max_input_memori": 34, "set_max_model_memori": 34, "max_model_memori": 34, "set_max_output_memori": 34, "max_output_memori": 34, "set_max_predict_cpu_tim": 34, "max_predict_cpu_tim": 34, "set_model_encrypt": 34, "model_encrypt": 34, "set_no_fixed_batch_s": 34, "unfix": 34, "throughput": 34, "larg": [34, 231], "explicit": [34, 163], "broken": [34, 217], "quick": [34, 116, 142], "experi": 34, "sometim": 34, "faster": 34, "warn": [34, 157, 231], "issu": 34, "set_optimization_target": 34, "optimizationtarget": 34, "server_side_cpu_per_sampl": [34, 56], "low": [34, 163], "client_side_cpu_per_sampl": [34, 56], "end_to_end_latency_per_sampl": [34, 56], "latenc": 34, "commun": 34, "exclud": 34, "set_system_spec": 34, "set_security_level": 34, "client_parallelization_speedup": 34, "server_parallelization_speedup": 34, "client_upload_spe": 34, "server_upload_spe": 34, "speedup": 34, "achiev": [34, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "them": [34, 66, 71, 73, 163, 217], "environ": [34, 231], "thread": [34, 231], "With": [34, 239], "lack": 34, "upload": 34, "speed": [34, 231], "sec": 34, "set_use_aes_input": 34, "use_aes_input": 34, "character": 35, "underyl": 35, "heaan": 36, "securitylevel": [36, 45, 72], "numslot": [36, 45, 72], "helibcontext": [37, 38], "helib": [37, 38, 39, 40, 41], "bgv": [37, 38, 40], "preset": [37, 38, 39, 40, 41], "helibpreset": [37, 38, 39, 40], "helibconfig": [37, 38, 40], "h": [37, 38, 40, 163, 231], "m": [37, 38, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "r": [37, 38, 163], "conf": [37, 38], "configgur": [37, 38], "set_ntl_num_thread": [37, 38, 40], "get_enable_conjug": 38, "enable_conjug": 38, "cover": 39, "init_preset": 39, "api": [40, 85, 163, 231, 264], "subclass": [40, 119, 124, 129, 136, 157, 163, 242, 249], "helib_not_secure_ckks_512_fast": 41, "helib_ckks_8192": 41, "helib_ckks_16384": 41, "helib_ckks_32768": 41, "helib_not_secure_bgv_24": 41, "distanc": 42, "represent": [43, 47, 60, 161, 162, 163, 164, 165, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "kmean": [43, 61], "set_centroid": 43, "centroid": 43, "num_cent": [43, 61], "num_featur": [43, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "logist": [44, 46, 61], "regress": [44, 46, 61], "sigmoid_poly_3": 44, "sigmoid_poly_7": 44, "sigmoid_poly_9": 44, "lattigo": 45, "get_activ": [46, 47], "lractiv": [46, 47], "get_negate_sigmoid": 46, "get_num_featur": 46, "logisticregress": 47, "get_bia": 47, "bia": [47, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "get_weight": 47, "mainli": 48, "decrypt_decode_output": 48, "encode_encrypt_inputs_for_fit": 48, "encode_encrypt_inputs_for_predict": 48, "get_data_pack": 48, "num_el": 48, "datapack": [48, 84], "directli": 49, "power_in_plac": 49, "total_product": 49, "so": [49, 61, 112, 120, 125, 130, 133, 137, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "manner": [49, 163], "nn": [51, 52, 147, 149, 150, 161, 162, 163, 164, 165, 166, 167, 178, 191, 192, 193, 194, 195, 197, 198, 200, 202, 207, 208, 209, 211, 218, 220, 223, 224, 225, 251, 253], "get_clear_for_physical_pad": 51, "set_clear_for_physical_pad": 51, "get_io_channels_last": 51, "set_io_channels_last": 51, "get_normalize_poly_activ": 51, "set_normalize_poly_activ": 51, "get_overflow_margin": 51, "set_overflow_margin": 51, "get_poly_activation_eval_typ": 51, "evaltyp": [51, 76], "set_poly_activation_eval_typ": 51, "clear_for_physical_pad": 51, "slide": 51, "2d": [51, 59, 163, 239], "physic": 51, "io_channels_last": 51, "channel": [51, 157, 163, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "By": [51, 163, 218, 235], "unless": [51, 90, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 239], "onnx": [51, 259], "normalize_poly_activ": 51, "often": [51, 145, 163], "howev": [51, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231], "make": [51, 106, 119, 124, 129, 136, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218, 226, 241], "occur": [51, 163], "overflow_margin": 51, "margin": 51, "dataset": [51, 111, 112, 113, 116, 118, 120, 125, 130, 133, 137, 138, 140, 141, 142, 214, 217, 218, 228], "actual": [51, 254], "threshold": [51, 61, 145], "closer": 51, "stricter": 51, "vari": 51, "lot": 51, "impact": [51, 231], "littl": 51, "futur": [51, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "well": [51, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "poly_activation_eval_typ": 51, "desir": [51, 65, 84, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "get_neural_net_config": 52, "neuralnetconfig": 52, "const": 52, "fixed_point": 53, "numbers": 53, "numbersign": 53, "fractional_part_bit": 53, "alloc": [53, 78, 163, 205], "floating_point": 53, "unsign": 54, "size_1_bit": 55, "size_8_bit": 55, "size_16_bit": 55, "size_32_bit": 55, "heprofileoptim": 56, "unencrypt": 57, "is_all_zero": 57, "pool": [59, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "all_zero": 59, "get_max_left_right": 59, "get_max_up_down": 59, "ml": 60, "struct": [61, 63], "d": [61, 111, 163, 176, 239, 242], "differenti": [61, 163], "feature_rang": 61, "minimum": [61, 163, 231], "xgboost": [61, 83], "dtree": 61, "features_bin_s": 61, "closest": 61, "mid": 61, "features_scale_target": 61, "featuresscaletarget": 61, "500": 61, "fit_hyper_param": 61, "frep": [61, 76], "deeper": [61, 76], "slower": [61, 76], "grep": [61, 76], "init_random_weight": 61, "json": 61, "logistic_regression_activ": 61, "max_rand_valu": 61, "limit": [61, 157, 231], "min_rand_valu": 61, "mu": [61, 163], "negate_sigmoid_input": 61, "sigmoid": [61, 76, 163], "center": [61, 163], "num_sampl": [61, 163, 229, 255], "num_values_used_for_predict": 61, "previou": [61, 66, 163], "number_of_featur": 61, "past": 61, "phi": 61, "q": [61, 163], "sparse_r": 61, "3": [61, 76, 116, 141, 142, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 230, 231, 239, 249, 260], "30": [61, 141, 163], "70": 61, "min": [61, 65, 66, 145, 163], "max": [61, 71, 145, 163, 191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211], "theta1": 61, "trainabl": [61, 166], "varw": 61, "varianc": 61, "debug": [62, 66, 157], "global": [62, 100, 231], "get_print_opt": 62, "num_printed_el": 62, "num_printed_last_el": 62, "print_complex_numb": 62, "discard": 62, "print_encrypted_cont": 62, "itself": [62, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "crt": 62, "residu": 62, "table_cell_width": 62, "width": [62, 71, 163, 231], "tt_demo_til": 62, "demonstr": 62, "get_rotation_step": 63, "custom_rot": [63, 70], "rotationsettyp": 63, "set_rotation_step": 63, "rotation_step": 63, "rotaions_step": 63, "hook": [64, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "code": [64, 163, 217, 239], "custom": [64, 112, 115, 119, 120, 124, 125, 129, 130, 133, 136, 137, 161, 162, 163, 164, 165, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231], "engin": [64, 163], "handler": [64, 157], "read": [64, 66, 116, 142, 145, 157, 163, 231, 235], "def": [64, 90, 112, 120, 125, 130, 133, 137, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "get_buffer_for_read": 64, "on_buffer_write_open": 64, "entir": [64, 74, 144, 231], "on_buffer_write_clos": 64, "definit": [65, 66, 68, 235], "linkag": [65, 66, 67, 68, 69], "heurist": [65, 66, 68, 217], "tor": [65, 67, 68], "get_fields_nam": 65, "get_name_field_nam": 65, "get_num_band": 65, "band": 65, "hash": [65, 66, 71], "get_size_band": 65, "is_fully_initi": 65, "set_num_bands_and_size_band": 65, "num_band": 65, "size_band": 65, "set_records_field": 65, "fields_nam": 65, "name_field_nam": 65, "player": 65, "manag": [66, 163, 231], "pprl": [66, 69], "protocol": [66, 67, 69], "basic_exampl": 66, "er_python_exampl": 66, "ipynb": 66, "recordlinkageconfig": [66, 68], "apply_secret_key_to_record": 66, "package_oth": 66, "recordlinkagepackag": 66, "particip": [66, 67, 218], "ec": 66, "encrypt_fields_for_equal_rul": 66, "concaten": 66, "rl_rule_eqaul": 66, "transform": [66, 111, 115, 140, 228], "transfer": 66, "encrypt_fields_for_similar_rul": 66, "rule": [66, 68, 69, 76, 163], "rl_rule_equ": [66, 69], "shingl": [66, 68], "get_next_expected_function_nam": 66, "next": [66, 116, 142, 163, 218], "state": [66, 144, 150, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 225, 253, 257, 258], "get_num_matched_record": 66, "report_block": 66, "parti": 66, "To": [66, 119, 124, 129, 136, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "carri": [66, 163], "block": [66, 84, 163, 231, 262], "report": 66, "get_num_of_record": 66, "init_records_from_fil": 66, "csv_path": 66, "num_of_samples_to_tak": 66, "path": [66, 112, 118, 120, 123, 125, 130, 133, 137, 140, 150, 161, 162, 164, 165, 166, 167, 168, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 214, 215, 225, 228, 253, 254, 257, 259, 261], "impli": 66, "match_records_by_equal_rul": 66, "package_own": 66, "doubli": 66, "rl_rule_similar": [66, 68, 69], "kept": 66, "temporari": [66, 163], "updat": [66, 145, 147, 161, 162, 163, 164, 165, 166, 167, 169, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 231], "graph": [66, 163], "match_records_by_similar_rul": 66, "report_matched_record": 66, "report_matched_records_along_with_other_side_record": 66, "rlm": 66, "printout": 66, "exract": 66, "about": [66, 163], "sinc": [66, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "access": [66, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 242], "set_current_rul": 66, "recordlinkagerul": 66, "encryptfieldsforequalrul": 66, "applysecretkeytorecord": 66, "matchrecordsbyequalrul": 66, "At": 66, "try": 66, "pass": [67, 71, 116, 142, 144, 147, 157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218, 220, 226, 231, 241], "get_field_rule_typ": 68, "field_nam": [68, 242], "recordlinkageruletyp": 68, "get_field_shingles_s": 68, "get_field_shingles_weight": 68, "set_field": 68, "shingles_weight": 68, "shingles_s": 68, "rl_rule_non": 69, "no_rot": 70, "default_rot": 70, "rts_id": 71, "uid": 71, "clients_secret": 71, "uid_bit": 71, "64": 71, "uniqu": [71, 157, 163, 247], "rt": 71, "datafram": [71, 116, 142, 231], "share": [71, 161, 163, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "rtss": 71, "compact": 71, "final_indicator_vector": 71, "flhe": 71, "generate_indicator_vector": 71, "source_rts_id": 71, "masked_hash_t": 71, "receiv": [71, 76, 157, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "send": 71, "get_uids_map": 71, "get_uninserted_uid": 71, "were": [71, 84, 163], "cuckoo": 71, "led": 71, "collis": 71, "insert_to_hash": 71, "multiply_indicator_vector": 71, "rtss_id": 71, "uint8": [71, 163], "masked_indicator_vector": 71, "ctiletensorvector": 71, "notic": 71, "seal": 72, "get_accurate_scal": 72, "get_use_accurate_sc": 72, "set_use_accurate_sc": 72, "use_accurate_sc": 72, "original_s": [74, 77], "tile_s": [74, 77], "num_dupl": [74, 77], "are_unused_slots_unkown": [74, 77], "is_interleav": [74, 77], "is_complex_pack": [74, 77], "apply_compatibility_adjust": [74, 77], "actiontyp": [74, 77], "compat": [74, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 249], "dup": 74, "incomplet": [74, 217], "get_are_unused_slots_unknown": 74, "get_external_s": [74, 77], "get_is_complex_pack": 74, "get_max_used_slots_in_til": 74, "get_num_dupl": 74, "get_num_duplicated_slot": 74, "get_num_unused_slot": 74, "get_num_used_slot": 74, "get_original_s": [74, 77], "get_original_size_slot": 74, "get_tile_s": [74, 77], "is_compat": [74, 77], "action_typ": [74, 77], "is_degenerate_til": 74, "is_equal_on_original_slot": 74, "enforceinterleavedexternals": 74, "is_fully_dupl": 74, "is_incomplet": [74, 77], "reduce_original_s": 74, "new_original_s": 74, "new_interleaved_external_s": 74, "set_are_unused_slots_unknown": 74, "are_unknown": 74, "areuknown": 74, "set_incomplet": 74, "set_interleav": 74, "external_size_divisor": 74, "isinterleav": 74, "you": [74, 112, 120, 125, 130, 133, 137, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 265], "forc": [74, 163, 231], "divis": [74, 163, 217, 218], "set_interleaved_external_s": 74, "new_siz": 74, "setinterleav": 74, "least": [74, 163, 235], "getminexternals": 74, "set_is_complex_pack": 74, "set_num_dupl": 74, "set_original_s": [74, 77], "keep_interleaved_plac": 74, "set_tile_s": 74, "set_unused_slots_unknown": 74, "parami": 75, "get_encod": 75, "basic": [75, 112, 120, 125, 130, 133, 137, 231], "max_diff": 76, "functionevalu": 76, "broadcast": [76, 163, 239], "ptype": 76, "don": [76, 163, 231], "poly_eval_in_plac": 76, "coef": [76, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "documnet": 76, "compos": [76, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "coeff": 76, "extra": [76, 157, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218], "term": [76, 163, 249], "pow_in_plac": 76, "expon": [76, 163], "sigmoid3_in_plac": 76, "sigmoid7_in_plac": 76, "sigmoid9_in_plac": 76, "sign_in_plac": 76, "maxabsv": 76, "notat": [77, 231], "tshape": 77, "add_dim": 77, "ttdim": 77, "are_all_dims_incomplet": 77, "assert_compat": 77, "text": [77, 163], "contains_unknown_unused_slot": 77, "get_dim": 77, "get_incomplete_tile_s": 77, "get_num_dim": 77, "get_num_slots_in_til": 77, "include_dupl": 77, "get_rotate_offset_of_dim": 77, "get_sub_shap": 77, "retur": 77, "get_with_duplicated_dim": 77, "dims_to_dupl": 77, "insert_dim_at": 77, "po": [77, 231], "is_first_non_degenerate_tile_dim": 77, "set_all_unused_slots_unknown": 77, "org_siz": 77, "tile_layout_to_str": 77, "analysi": 78, "tabular": 78, "one_slot_r": 78, "inverse_optimisation_on": 78, "distribut": [78, 141, 163, 218], "among": [78, 230, 260], "would": [78, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "inverse_optimsation_on": 78, "optimis": 78, "won": [78, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "csv_file": 78, "average_queri": 78, "average_field": 78, "field_to_compar": 78, "compare_valu": 78, "ct": 78, "comparisontyp": 78, "fieldvector": 78, "averag": [78, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 239], "condit": [78, 163, 170, 235], "post_process_average_queri": 78, "extract": [78, 235], "comparison_typ": 78, "count_queri": 78, "postprocesscountqueri": 78, "create_compare_valu": 78, "value_to_seek": 78, "column_nam": 78, "is_sign": [78, 163], "hybrid": [78, 163], "bitwis": 78, "intend": 78, "bit_len": 78, "create_indicators_for_col": 78, "col_nam": 78, "val_to_compar": 78, "mult_by_mask": 78, "std": [78, 163], "shared_ptr": 78, "ith": 78, "fieldtyp": 78, "defautl": 78, "get_cell_cont": 78, "row_num": 78, "get_num_of_row": 78, "mult_ind": 78, "query_r": 78, "standard_deviation_queri": 78, "standard": [78, 89, 111, 115, 163, 231], "deviat": [78, 163], "post_process_count_queri": 78, "post_process_std_dev_queri": 78, "post_process_sum_queri": 78, "sum_queri": 78, "post_process_sum_squares_queri": 78, "sum_squares_queri": 78, "set_inverse_optim": 78, "inverseoptimis": 78, "void": 78, "std_dev_field": 78, "field_to_sum": 78, "sum_squares_field": 78, "verbosity_non": 81, "verbosity_low": 81, "verbosity_detail": 81, "verbosity_extra_detail": 81, "beta": [82, 163, 166], "encrypted_block": 84, "aes_kei": 84, "aeskei": 84, "iv": 84, "data_pack": 84, "ctr": 84, "arrang": [84, 262], "accor": 84, "extens": 85, "simplifi": 85, "easi": 85, "scikit": 85, "kera": 85, "enum": [86, 93], "enumer": [86, 93, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "helper": 89, "funcobj": 90, "decor": [90, 112, 120, 125, 130, 133, 137, 231], "metaclass": 90, "abcmeta": 90, "instanti": [90, 242], "overridden": [90, 157], "super": 90, "declar": [90, 112, 120, 125, 130, 133, 137], "descriptor": 90, "my_abstract_method": 90, "func": [94, 157], "classes_shap": 94, "config_fil": 94, "hyper_params_fil": 94, "op_nam": [96, 98], "silent": 96, "x_test": [97, 116, 142], "y_test": [97, 116, 142], "batch_num": 97, "durat": 98, "printopt": 100, "illeg": [101, 104, 105], "dynam": [102, 103, 231], "tool": 106, "friendli": [106, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 254], "drop": [106, 157, 163, 217, 218], "dataset_nam": 108, "num_epoch": 108, "resiz": [111, 163, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "data_path": 111, "cifar_data": 111, "normalization_mod": 111, "per_dataset": 111, "augment": [111, 115], "hflip": 111, "input_nois": 111, "datasetwrapp": [111, 118, 123, 140, 214, 215, 228], "cifar10": 111, "torchvis": 111, "supply": [111, 140, 228], "get_samples_per_class": [111, 112, 118, 120, 125, 130, 133, 137, 140, 214, 228], "imag": [111, 115, 163, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "visiondataset": 111, "get_test_data": [111, 112, 120, 125, 130, 133, 137], "get_train_data": [111, 112, 120, 125, 130, 133, 137], "get_val_data": [111, 112, 120, 125, 130, 133, 137], "is_imbalanc": [111, 112, 120, 125, 130, 133, 137], "alwai": [111, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 218], "balanc": [111, 112, 118, 120, 125, 130, 133, 137, 140, 214, 228], "serv": [112, 120, 125, 130, 133, 137], "interfac": [112, 120, 125, 130, 133, 137], "retriev": [112, 120, 125, 130, 133, 137, 163, 218], "torch": [112, 115, 120, 125, 130, 133, 137, 141, 145, 149, 150, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 218, 224, 225, 251, 253], "built": [112, 120, 125, 130, 133, 137], "pytorch": [112, 120, 125, 130, 133, 137, 163, 217], "vision": [112, 120, 125, 130, 133, 137], "stabl": [112, 120, 125, 130, 133, 137], "html": [112, 120, 125, 130, 133, 137, 226, 241], "your": [112, 120, 125, 130, 133, 137, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231], "tutori": [112, 120, 125, 130, 133, 137], "beginn": [112, 120, 125, 130, 133, 137], "data_tutori": [112, 120, 125, 130, 133, 137], "dsfactori": [112, 120, 125, 130, 133, 137], "dataset_wrapp": [112, 120, 125, 133, 137], "import": [112, 116, 120, 125, 130, 133, 137, 142, 163, 231, 235, 239], "ds_factori": [112, 120, 125, 130, 137], "new_dataset": [112, 120, 125, 130, 133, 137], "newdataset": [112, 120, 125, 130, 133, 137], "_newdatasetload": [112, 120, 125, 130, 133, 137], "_mynewdatasetload": [112, 120, 125, 130, 133, 137], "__getitem__": [112, 119, 120, 124, 125, 129, 130, 133, 136, 137], "image_tensor": [112, 120, 125, 130, 133, 137], "label_tensor": [112, 120, 125, 130, 133, 137], "get_class_labels_dict": [112, 120, 125, 130, 133, 137], "class_nam": [112, 120, 125, 130, 133, 137], "dictionari": [112, 120, 125, 130, 133, 137, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 242], "class_index": [112, 120, 125, 130, 133, 137], "split": [112, 116, 118, 120, 125, 130, 133, 137, 140, 141, 142, 163, 214, 228], "imbalanc": [112, 120, 125, 130, 133, 137], "otherwai": [112, 120, 125, 130, 133, 137], "t_co": [113, 119, 124, 129, 136, 138, 217, 218], "select": [113, 138, 163, 235], "logger": [114, 121, 126, 131, 134, 139, 148, 158, 173, 187, 196, 222, 238, 250], "test_siz": [116, 142], "train_siz": [116, 142], "random_st": [116, 142], "shuffl": [116, 142, 217, 218], "stratifi": [116, 142], "subset": [116, 141, 142, 218, 235], "wrap": [116, 142, 145, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "shufflesplit": [116, 142], "y": [116, 142, 163, 226, 240, 241, 242], "subsampl": [116, 142], "onelin": [116, 142], "guid": [116, 142, 235], "scipi": [116, 142, 239], "spars": [116, 142, 163], "panda": [116, 142, 231], "proport": [116, 142, 226, 241], "complement": [116, 142], "25": [116, 142, 163], "randomst": [116, 142], "reproduc": [116, 141, 142, 151, 217], "across": [116, 142, 163, 217, 218], "glossari": [116, 142], "csr_matrix": [116, 142], "els": [116, 142, 157, 163, 218], "np": [116, 142, 147, 220, 231, 239], "sklearn": [116, 142, 226, 235, 241], "model_select": [116, 142], "arang": [116, 142, 163], "reshap": [116, 142, 163], "33": [116, 142, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 242], "42": [116, 141, 142], "kward": [118, 123, 140, 214, 215, 228], "_covidct2a_dataset": [118, 214], "kwd": [119, 124, 129, 136], "overwrit": [119, 124, 129, 136], "fetch": [119, 124, 129, 136], "could": [119, 124, 129, 136], "__len__": [119, 124, 129, 136, 217], "sampler": [119, 124, 129, 136, 217, 218], "dataload": [119, 124, 129, 136, 147, 163, 218, 220], "yield": [119, 124, 129, 136, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218], "style": [119, 124, 129, 136, 217, 249], "_covidxraydataset": [123, 215], "201": [140, 228], "places205_data": [140, 228], "places205": [140, 228], "csail": [140, 228], "mit": [140, 228], "edu": [140, 194, 211, 228], "_type_": [140, 228, 258], "_description_": [140, 228], "union": [141, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "_c": 141, "randomli": 141, "overlap": [141, 231], "floor": [141, 163], "frac": [141, 163, 239], "remaind": [141, 163], "round": [141, 163, 184, 217], "robin": 141, "until": [141, 163, 231], "manual_se": 141, "permut": [141, 163], "train_stat": [144, 150, 225, 253], "was_complet": 144, "help": [144, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "convers": [144, 163], "replac": [144, 163, 168, 169, 178, 179, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 242, 249, 254, 259], "ca": 144, "scratch": [144, 147, 220], "useful": 144, "mnodel": 144, "checkpoint": [144, 150, 225, 253, 257, 259], "create_train_st": 144, "namespac": [144, 146, 157, 219], "group": [144, 145, 163, 218, 235], "start_epoch": [144, 218], "wait_before_chang": 144, "groupp": 144, "simplenamespac": [144, 150, 225, 253], "replace_activ": 144, "trainer": [144, 152, 258, 259], "schedul": [144, 145], "reducelronplateau": 144, "reduct": [144, 163], "schedual": 144, "patienc": 145, "0001": 145, "threshold_mod": 145, "cooldown": 145, "min_lr": 145, "08": [145, 163], "metric": [145, 147, 150, 220, 221, 225, 229, 230, 231, 235, 246, 253, 255, 258, 260], "stop": [145, 157], "benefit": 145, "stagnat": 145, "quantiti": 145, "seen": [145, 163], "One": [145, 163], "lr": 145, "monitor": [145, 231], "decreas": 145, "new_lr": 145, "3rd": [145, 163], "loss": [145, 150, 225, 253], "hasn": 145, "optimum": 145, "focu": 145, "signific": 145, "ab": [145, 163, 231], "dynamic_threshold": 145, "best": [145, 217, 254, 258, 259], "wait": 145, "resum": 145, "decai": 145, "old": 145, "stdout": 145, "xdoctest": [145, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218], "skip": [145, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218, 231], "sgd": 145, "momentum": 145, "val_loss": 145, "simpl": [146, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 219], "compon": [147, 220], "those": [147, 157, 163, 220, 235], "partual": [147, 220], "get_model": [147, 220], "get_optim": [147, 220], "exit": [147, 220, 231], "continue_with_nan": [147, 220], "confus": [147, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220, 226, 235, 241, 258], "metricstrack": [147, 150, 220, 225, 229, 253, 255, 258], "train_step": [147, 220], "tqdm": [147, 220], "forward": [147, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 220], "progress": [147, 220, 231], "from_checkpoint": [150, 225, 253], "is_complet": [150, 225, 253], "relu": [150, 161, 162, 166, 178, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 225, 253], "impos": 151, "fhefriendlyconvertor": [152, 254, 258, 259], "in_": [155, 227], "in_t": [155, 227], "log": [157, 159, 163], "area": 157, "exactli": [157, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "nest": [157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "xl": 157, "gnumer": 157, "cater": 157, "natur": [157, 239], "organ": 157, "hierarchi": 157, "separ": [157, 249], "period": 157, "java": 157, "gnu": 157, "arbitrari": [157, 163, 231], "addfilt": 157, "addhandl": 157, "hdlr": 157, "callhandl": 157, "parent": 157, "sy": [157, 231], "stderr": [157, 231], "whenev": 157, "propag": [157, 163, 239], "critic": 157, "msg": [157, 231], "keyword": [157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217, 242], "exc_info": 157, "houston": 157, "major": 157, "disast": 157, "thorni": 157, "problem": 157, "conveni": 157, "fatal": 157, "loggabl": 157, "consult": 157, "veto": 157, "callabl": [157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "findcal": 157, "stack_info": 157, "stacklevel": 157, "stack": 157, "frame": [157, 231], "caller": [157, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "getchild": 157, "suffix": [157, 231], "descend": [157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "getlogg": 157, "abc": 157, "ghi": 157, "__name__": 157, "liter": [157, 163], "geteffectivelevel": 157, "unpickl": [157, 217], "socket": 157, "local": [157, 161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 249, 254, 259], "hashandl": 157, "info": 157, "interest": 157, "isenabledfor": 157, "mysteri": 157, "makerecord": 157, "fn": [157, 161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 235], "lno": 157, "sinfo": 157, "factori": 157, "logrecord": 157, "removefilt": 157, "removehandl": 157, "setlevel": 157, "20": [159, 163, 166, 231], "suggest": 161, "1911": 161, "11377": 161, "scriptmodul": [161, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "add_modul": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "child": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "recurs": [161, 162, 164, 165, 166, 167, 178, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "submodul": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "children": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "typic": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "doc": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "no_grad": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "init_weight": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "linear": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "fill_": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "net": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "sequenti": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "in_featur": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "out_featur": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "requires_grad": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "bfloat16": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "cast": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "datatyp": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "modifi": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "direct": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "undefin": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "var": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "20l": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "1l": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "5l": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "cuda": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217], "gpu": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "associ": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 239], "live": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "eval": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "particular": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "behavior": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "dropout": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "batchnorm": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "disabl": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "grad": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "extra_repr": [161, 162, 164, 165, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "own": [161, 162, 164, 165, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "multi": [161, 162, 164, 165, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217], "accept": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "get_buff": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "docstr": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 242], "get_submodul": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "correctli": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 239], "qualifi": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "referenc": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "attributeerror": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "invalid": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "resolv": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "someth": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "get_extra_st": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "state_dict": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "set_extra_st": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "pickleabl": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "serial": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "guarante": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "break": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "pickl": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "get_paramet": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "let": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "sai": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "net_b": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "net_c": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "conv": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "kernel_s": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "100": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 242], "200": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "diagram": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "show": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 226, 241, 263], "against": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 239], "named_modul": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "transit": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "half": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "ipu": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "load_state_dict": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "strict": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "dict": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "persist": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "strictli": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "enforc": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "missing_kei": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "miss": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "unexpected_kei": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "unexpect": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "namedtupl": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "idx": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "named_buff": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "prefix": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231, 257], "prepend": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "running_var": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "named_children": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "conv4": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "conv5": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "memo": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "remove_dupl": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "named_paramet": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "register_backward_hook": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "removablehandl": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "deprec": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "favor": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "register_full_backward_hook": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "register_buff": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "running_mean": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "alongsid": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "latter": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "register_forward_hook": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "inplac": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "register_forward_pre_hook": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "invok": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "grad_input": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "grad_output": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "subsequ": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "technic": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "reason": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "register_load_state_dict_post_hook": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "incompatible_kei": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "modif": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "clearn": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "avoid": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217], "register_modul": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "register_paramet": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "requires_grad_": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "autograd": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "freez": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "finetun": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "individu": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "gan": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "within": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 218, 231], "share_memori": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "share_memory_": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "destin": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "keep_var": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "shallow": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "releas": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "pleas": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "ordereddict": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 231], "detach": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211], "dtype": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 239], "non_block": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "memory_format": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "channels_last": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "Its": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "unchang": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "tri": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "asynchron": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "host": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "pin": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 205, 207, 208, 209, 211, 217], "below": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 226, 241], "4d": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "ignore_w": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "determinist": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "1913": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "3420": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "5113": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "2325": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "env": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "torch_doctest_cuda1": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "gpu1": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "1914": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "5112": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "2324": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "float16": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "cdoubl": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "3741": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "2382": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "5593": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "4443": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "6122": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "1150": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "to_empti": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "dst_type": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "xpu": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "zero_grad": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "set_to_non": [161, 162, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "instead": [161, 162, 163, 164, 165, 166, 167, 191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 217, 231], "kind": 163, "assign": 163, "cach": 163, "rnn": 163, "transpos": 163, "conj": 163, "real": 163, "mh": 163, "mt": 163, "ndim": 163, "abs_": 163, "absolute_": 163, "aco": 163, "acos_": 163, "acosh": 163, "acosh_": 163, "alpha": [163, 166], "add_": 163, "addbmm": 163, "batch1": 163, "batch2": 163, "addbmm_": 163, "addcdiv": 163, "tensor1": 163, "tensor2": 163, "addcdiv_": 163, "addcmul": 163, "addcmul_": 163, "addmm": 163, "mat1": 163, "mat2": 163, "addmm_": 163, "addmv": 163, "mat": 163, "vec": 163, "addmv_": 163, "addr": 163, "vec1": 163, "vec2": 163, "addr_": 163, "adjoint": 163, "align_a": 163, "align": 163, "align_to": 163, "randint": [163, 231], "127": 163, "refine_nam": 163, "w": 163, "img": 163, "randn": [163, 166], "masked_fill_": 163, "scale_channel": 163, "num_channel": 163, "rand": 163, "more_img": 163, "video": 163, "agnost": 163, "experiment": 163, "subject": 163, "ellipsi": 163, "expand": 163, "mention": 163, "unment": 163, "named_tensor": 163, "front": 163, "keep": [163, 231], "rest": 163, "keepdim": [163, 239], "allclos": 163, "rtol": 163, "atol": 163, "equal_nan": 163, "amax": 163, "amin": 163, "aminmax": 163, "angl": 163, "apply_": 163, "section": 163, "arcco": 163, "arccos_": 163, "arccosh": 163, "arccosh_": 163, "arcsin": 163, "arcsin_": 163, "arcsinh": 163, "arcsinh_": 163, "arctan": 163, "arctan2": 163, "arctan2_": 163, "atan2_": 163, "arctan_": 163, "arctanh": 163, "arctanh_": 163, "argmax": 163, "longtensor": 163, "argmin": 163, "argsort": 163, "argwher": 163, "as_strid": 163, "storage_offset": 163, "as_strided_scatt": 163, "as_subclass": 163, "cl": 163, "pointer": 163, "mirror": 163, "stai": [163, 231], "asin": 163, "asin_": 163, "asinh": 163, "asinh_": 163, "atan": 163, "atan2": 163, "atan_": 163, "atanh": 163, "atanh_": 163, "retain_graph": 163, "create_graph": 163, "leav": [163, 231], "addition": 163, "locat": [163, 257], "accumul": [163, 239], "op": 163, "semant": 163, "grad_fn": 163, "though": 163, "60521": 163, "freed": 163, "nearli": 163, "around": 163, "attr": 163, "baddbmm": 163, "baddbmm_": 163, "bernoulli": 163, "texttt": 163, "independ": 163, "bernoulli_": 163, "draw": [163, 217], "_tensor": 163, "preserve_format": 163, "bincount": 163, "minlength": 163, "bitwise_and": 163, "bitwise_and_": 163, "bitwise_left_shift": 163, "bitwise_left_shift_": 163, "bitwise_not": 163, "bitwise_not_": 163, "bitwise_or": 163, "bitwise_or_": 163, "bitwise_right_shift": 163, "bitwise_right_shift_": 163, "bitwise_xor": 163, "bitwise_xor_": 163, "bmm": 163, "broadcast_to": 163, "cauchy_": 163, "median": 163, "sigma": 163, "drawn": 163, "cauchi": 163, "dfrac": 163, "pi": 163, "ceil": 163, "ceil_": 163, "cfloat": 163, "complex64": 163, "chalf": 163, "complex32": 163, "char": 163, "int8": 163, "choleski": 163, "cholesky_invers": 163, "cholesky_solv": 163, "input2": 163, "chunk": [163, 231], "clamp": 163, "clamp_": 163, "clip": 163, "clip_": 163, "coalesc": 163, "uncoalesc": 163, "coo": 163, "col_indic": 163, "inttensor": 163, "csr": 163, "sparse_csr": 163, "nnz": 163, "int64": 163, "mkl": 163, "routin": 163, "downcast": 163, "potenti": 163, "lose": 163, "ey": 163, "to_sparse_csr": 163, "conj_phys": 163, "conj_physical_": 163, "contigu": 163, "contiguous_format": 163, "copy_": 163, "resid": 163, "copysign": 163, "copysign_": 163, "corrcoef": 163, "co": 163, "cos_": 163, "cosh": 163, "cosh_": 163, "count_nonzero": 163, "cov": 163, "fweight": 163, "aweight": 163, "cross": 163, "crow_indic": 163, "cummax": 163, "cummin": 163, "cumprod": 163, "cumprod_": 163, "cumsum": 163, "cumsum_": 163, "data_ptr": 163, "address": 163, "deg2rad": 163, "deg2rad_": 163, "dense_dim": 163, "sparse_dim": 163, "dequant": 163, "quantiz": 163, "det": 163, "never": 163, "trigger": [163, 231], "resize_": 163, "resize_as_": 163, "set_": 163, "transpose_": 163, "now": [163, 231, 249], "anymor": 163, "zero_": 163, "detach_": 163, "diag": 163, "diagon": 163, "diag_emb": 163, "dim1": 163, "dim2": 163, "diagflat": 163, "diagonal_scatt": 163, "digamma": 163, "digamma_": 163, "dist": 163, "div": 163, "rounding_mod": 163, "div_": 163, "divid": 163, "divide_": 163, "dot": 163, "dsplit": 163, "split_size_or_sect": 163, "element_s": 163, "eq": 163, "eq_": 163, "erf": 163, "erf_": 163, "erfc": 163, "erfc_": 163, "erfinv": 163, "erfinv_": 163, "exp": 163, "exp2": 163, "exp2_": 163, "exp_": 163, "singleton": 163, "larger": 163, "especi": [163, 218], "incorrect": 163, "expand_a": 163, "expm1": 163, "expm1_": 163, "exponential_": 163, "lambd": 163, "exponenti": [163, 231], "lambda": [163, 172, 217, 231], "fill_diagonal_": 163, "fill_valu": 163, "tall": 163, "fix_": 163, "fliplr": 163, "flipud": 163, "float32": 163, "float_pow": 163, "float_power_": 163, "floor_": 163, "floor_divid": 163, "floor_divide_": 163, "fmax": 163, "fmin": 163, "fmod": 163, "divisor": [163, 231], "fmod_": 163, "frac_": 163, "frexp": 163, "mantissa": 163, "gather": 163, "gcd": 163, "gcd_": 163, "ge": 163, "ge_": 163, "geometric_": 163, "geometr": [163, 239], "k": [163, 230, 231, 260], "geqrf": 163, "ger": 163, "get_devic": 163, "floattensor": 163, "greater_": 163, "greater_equ": 163, "greater_equal_": 163, "gt": 163, "gt_": 163, "hardshrink": 163, "has_nam": 163, "heavisid": 163, "heaviside_": 163, "histc": 163, "bin": 163, "histogram": 163, "densiti": 163, "hsplit": 163, "hypot": 163, "hypot_": 163, "i0": 163, "i0_": 163, "igamma": 163, "igamma_": 163, "igammac": 163, "igammac_": 163, "3100": 163, "3553j": 163, "5445": 163, "7896j": 163, "6492": 163, "0633j": 163, "0638": 163, "8119j": 163, "3553": 163, "7896": 163, "0633": 163, "8119": 163, "index_add": 163, "index_add_": 163, "behav": 163, "nondeterminist": 163, "index_copi": 163, "index_copy_": 163, "index_fil": 163, "index_fill_": 163, "index_put": 163, "index_put_": 163, "put": 163, "express": 163, "index_reduce_": 163, "include_self": 163, "prod": 163, "treat": 163, "identit": 163, "11": [163, 242], "12": [163, 195, 200], "44": 163, "72": 163, "14": 163, "18": [163, 235], "22": [163, 242], "36": [163, 239], "index_select": 163, "int_repr": 163, "uint8_t": 163, "is_coalesc": 163, "is_complex": 163, "is_conj": 163, "is_contigu": 163, "is_cpu": 163, "is_cuda": 163, "is_floating_point": 163, "is_infer": 163, "is_ipu": 163, "is_leaf": 163, "retain_grad": 163, "track": 163, "is_meta": 163, "is_mp": 163, "mp": 163, "is_neg": 163, "is_pin": 163, "is_quant": 163, "is_set_to": 163, "exact": 163, "is_shar": 163, "is_spars": 163, "is_sparse_csr": 163, "is_xpu": 163, "isclos": 163, "isfinit": 163, "isinf": 163, "isnan": 163, "isneginf": 163, "isposinf": 163, "isreal": 163, "istft": 163, "n_fft": 163, "hop_length": 163, "win_length": 163, "window": [163, 231], "onesid": 163, "return_complex": 163, "tolist": 163, "kron": 163, "kthvalu": 163, "lcm": 163, "lcm_": 163, "ldexp": 163, "ldexp_": 163, "le": 163, "le_": 163, "lerp": 163, "lerp_": 163, "lt": 163, "less_": 163, "less_equ": 163, "less_equal_": 163, "lgamma": 163, "lgamma_": 163, "log10": 163, "log10_": 163, "log1p": 163, "log1p_": 163, "log2": 163, "log2_": 163, "log_": 163, "log_normal_": 163, "parameter": 163, "sqrt": 163, "ln": 163, "logaddexp": 163, "logaddexp2": 163, "logcumsumexp": 163, "logdet": 163, "logical_and": 163, "logical_and_": 163, "logical_not": 163, "logical_not_": 163, "logical_or": 163, "logical_or_": 163, "logical_xor": 163, "logical_xor_": 163, "logit": 163, "logit_": 163, "logsumexp": 163, "long": [163, 231], "lt_": 163, "lu": 163, "pivot": 163, "get_info": 163, "lu_solv": 163, "lu_data": 163, "lu_pivot": 163, "map_": 163, "masked_fil": 163, "booltensor": 163, "masked_scatt": 163, "masked_scatter_": 163, "masked_select": 163, "matmul": 163, "matrix_exp": 163, "matrix_pow": 163, "linalg": 163, "mm": [163, 231, 249], "moveaxi": 163, "movedim": 163, "msort": 163, "mul": 163, "mul_": 163, "multinomi": 163, "multiply_": 163, "mv": 163, "mvlgamma": 163, "mvlgamma_": 163, "unnam": 163, "charact": [163, 231], "underscor": 163, "furthermor": 163, "variabl": 163, "nan_to_num": 163, "posinf": 163, "neginf": 163, "nan_to_num_": 163, "nanmean": 163, "nanmedian": 163, "nanquantil": 163, "interpol": 163, "nansum": 163, "narrow": 163, "narrow_copi": 163, "ndimens": 163, "ne": 163, "ne_": 163, "neg_": 163, "negative_": 163, "nelement": 163, "numel": 163, "new_empti": 163, "pin_memori": [163, 205, 217], "8182e": 163, "5765e": 163, "41": 163, "0545e": 163, "0949e": 163, "4842e": 163, "0000e": 163, "00": 163, "new_empty_strid": 163, "new_ful": 163, "141592": 163, "1416": [163, 205], "new_on": 163, "new_tensor": 163, "from_numpi": [163, 205], "whatev": 163, "array_lik": [163, 205, 239], "new_zero": 163, "nextaft": 163, "nextafter_": 163, "nonzero": 163, "norm": 163, "fro": 163, "normal_": 163, "not_equ": 163, "not_equal_": 163, "reflect": 163, "resolve_conj": 163, "resolve_neg": 163, "isn": 163, "shorthand": 163, "orgqr": 163, "ormqr": 163, "input3": 163, "outer": 163, "pinvers": 163, "polygamma": 163, "polygamma_": 163, "pow": 163, "pow_": 163, "put_": 163, "necessarili": 163, "q_per_channel_axi": 163, "affin": 163, "q_per_channel_scal": 163, "q_per_channel_zero_point": 163, "zero_point": 163, "q_scale": 163, "q_zero_point": 163, "qr": 163, "qscheme": 163, "qtensor": 163, "quantil": 163, "rad2deg": 163, "rad2deg_": 163, "random_": 163, "discret": 163, "uniform": 163, "unspecifi": [163, 231], "53": 163, "ravel": [163, 235, 239], "reciproc": 163, "reciprocal_": 163, "record_stream": 163, "queu": 163, "awar": 163, "life": 163, "unexpectedli": 163, "know": 163, "refin": 163, "renam": [163, 242], "lift": 163, "coexist": 163, "give": [163, 239], "nice": 163, "greedili": 163, "named_img": 163, "register_hook": 163, "remainder_": 163, "rename_map": 163, "position": 163, "renamed_img": 163, "height": [163, 231], "rename_": 163, "renorm": 163, "maxnorm": 163, "renorm_": 163, "unlik": 163, "repeat_interleav": 163, "output_s": 163, "fact": 163, "tell": 163, "begin": [163, 218, 239], "preprocess": 163, "saved_weight": 163, "loaded_weight": 163, "5503": 163, "4926": 163, "1158": 163, "8303": 163, "1007": 163, "9853": 163, "2316": 163, "6606": 163, "reshape_a": 163, "reinterpret": 163, "go": 163, "unaffect": 163, "retains_grad": 163, "rot90": 163, "decim": 163, "round_": 163, "rsqrt": 163, "rsqrt_": 163, "scatter": 163, "scatter_": 163, "moreov": 163, "inclus": 163, "pick": 163, "arbitrarili": 163, "indici": 163, "scatter_add_": 163, "axi": [163, 226, 239, 241], "full": [163, 168, 254, 259], "0000": 163, "4600": 163, "2300": 163, "scatter_add": 163, "scatter_reduc": 163, "scatter_reduce_": 163, "select_scatt": 163, "sgn": 163, "sgn_": 163, "short": 163, "int16": 163, "sigmoid_": 163, "sign_": 163, "signbit": 163, "sin": 163, "sin_": 163, "sinc_": 163, "sinh": 163, "sinh_": 163, "slice_scatt": 163, "slogdet": 163, "smm": 163, "sort": [163, 235], "sparse_mask": 163, "nse": 163, "cat": [163, 235], "sparse_coo_tensor": 163, "6550": 163, "2397": 163, "1611": 163, "0779": 163, "2326": 163, "0558": 163, "4711": 163, "9678": 163, "5138": 163, "0411": 163, "9417": 163, "5158": 163, "0793": 163, "0036": 163, "2569": 163, "1055": 163, "sparse_coo": 163, "sparse_resize_": 163, "sparse_resize_and_clear_": 163, "split_siz": 163, "sqrt_": 163, "square_": 163, "squeez": 163, "squeeze_": 163, "sspaddmm": 163, "unbias": 163, "stft": 163, "pad_mod": 163, "storage_typ": 163, "jump": 163, "sub_": 163, "subtract_": 163, "sum_to_s": 163, "svd": 163, "compute_uv": 163, "swapax": 163, "axis0": 163, "axis1": 163, "swapaxes_": 163, "swapdim": 163, "dim0": 163, "swapdims_": 163, "symeig": 163, "eigenvector": 163, "t_": 163, "take_along_dim": 163, "tan": 163, "tan_": 163, "tanh": 163, "tanh_": 163, "tensor_split": 163, "indices_or_sect": 163, "rep": 163, "5044": 163, "0005": 163, "3310": 163, "0584": 163, "cuda0": 163, "to_dens": 163, "to_mkldnn": 163, "mkldnn": 163, "to_padded_tensor": 163, "to_spars": 163, "sparsedim": 163, "coordin": 163, "to_sparse_bsc": 163, "blocksiz": 163, "bsc": 163, "sparse_bsc": 163, "row_indic": 163, "to_sparse_bsr": 163, "bsr": 163, "sparse_bsr": 163, "to_sparse_coo": 163, "_nnz": 163, "to_sparse_csc": 163, "csc": 163, "012766935862600803": 163, "5415473580360413": 163, "08909505605697632": 163, "7729271650314331": 163, "topk": 163, "largest": 163, "trace": [163, 231], "triangular_solv": 163, "unitriangular": 163, "tril": 163, "tril_": 163, "triu": 163, "triu_": 163, "true_divid": 163, "true_divide_": 163, "trunc": 163, "trunc_": 163, "async": 163, "type_a": 163, "unbind": 163, "seq": 163, "unflatten": 163, "unfold": 163, "sizedim": 163, "happen": 163, "uniform_": 163, "return_invers": 163, "return_count": 163, "unique_consecut": 163, "unsafe_chunk": 163, "unsafe_split": 163, "unsqueez": 163, "unsqueeze_": 163, "vdot": 163, "subspac": 163, "span": 163, "foral": 163, "unclear": 163, "advis": 163, "z": 163, "swap": 163, "2nd": 163, "proportion": 163, "twice": 163, "met": 163, "torchscript": 163, "program": 163, "9482": 163, "0310": 163, "4999": 163, "5316": 163, "1520": 163, "7472": 163, "5617": 163, "8649": 163, "4724": 163, "0334": 163, "2976": 163, "8499": 163, "2109": 163, "9913": 163, "9607": 163, "6123": 163, "1064483442": 163, "1124191867": 163, "1069546515": 163, "1089989247": 163, "1105482831": 163, "1061112040": 163, "1057999968": 163, "1084397505": 163, "1071760287": 163, "1123489973": 163, "1097310419": 163, "1084649136": 163, "1101533110": 163, "1073668768": 163, "1082790149": 163, "1088634448": 163, "1000000000": 163, "0047": 163, "0310j": 163, "5316j": 163, "7472j": 163, "8649j": 163, "0334j": 163, "8499j": 163, "9913j": 163, "6123j": 163, "202": 163, "154": 163, "59": 163, "182": 163, "243": 163, "253": 163, "188": 163, "185": 163, "252": 163, "191": 163, "63": 163, "240": 163, "227": 163, "165": 163, "27": 163, "190": 163, "146": 163, "203": 163, "106": 163, "93": 163, "205": 163, "112": 163, "206": 163, "189": 163, "95": 163, "152": 163, "147": 163, "89": 163, "43": 163, "246": 163, "87": 163, "235": 163, "226": 163, "254": 163, "111": 163, "117": 163, "177": 163, "28": 163, "view_a": 163, "vsplit": 163, "xlogi": 163, "xlogy_": 163, "coefficients_arg": 166, "max_val": 166, "soft": 166, "gamma": 166, "1602": 166, "01321": 166, "a1": 166, "new_modul": 168, "activation_gen": [169, 179], "change_index": 169, "change_ratio": 169, "replace_all_at_onc": [169, 178, 179], "change_requir": 169, "exce": 169, "m_type": 170, "9th": 171, "activation_typ": [172, 178, 181], "activation_arg": [172, 178, 181], "later": 172, "activation_functions_dict": 172, "detect": [174, 217], "predefin": [178, 198, 223], "prec": [180, 184], "orig_layer_nam": 181, "digit": 184, "model_precision_phas": 184, "benchmark": 188, "num_class": [191, 192, 193, 194, 202, 207, 208, 209, 211], "nn_modul": [191, 194, 195, 200, 202, 209, 211], "recognit": [191, 202], "lecun": [191, 202], "et": [191, 202], "al": [191, 202], "1998": [191, 202], "addbatchnormafteractiv": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "bn_info": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "add_batch_norm_after_conv": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "add_batch_norm_before_conv": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "asserts": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "assertionerror": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "after_layer_nam": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "get_input_s": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "make_fhe_friendli": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "add_bn": [191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211], "pooling_typ": [191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211], "bn_list": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "toward": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "avg": [191, 192, 193, 194, 195, 197, 200, 202, 207, 208, 209, 211], "post_process_activ": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "weightedrelu": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211, 254], "trainablepolyrelu": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "09679805487394333": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "13760216534137726": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "set_max_pooling_to_avg": [191, 192, 193, 194, 195, 200, 202, 207, 208, 209, 211], "squeezenet_fh": [192, 193, 207, 208], "_summary_": [192, 193, 207, 208], "squeezenet1_0": [192, 207], "partial": [192, 193, 207, 208], "squeezenet1_1": [193, 208], "chet": [194, 211], "inferenc": [194, 211], "www": [194, 211], "utexa": [194, 211], "roshan": [194, 211], "alexnet": [195, 200, 209], "pretrain": [195, 200, 209], "imagenet": [195, 200, 209], "adapt": [195, 200, 209], "nameerror": [198, 223], "histori": 205, "known": [205, 235], "prefer": 205, "readabl": 205, "as_tensor": 205, "1000": [205, 231], "2000": 205, "9000": 205, "11111": 205, "222222": 205, "3333333": 205, "1111": 205, "2222": 205, "3333": 205, "14159": 205, "get_cnn": 209, "50x": 209, "fewer": 209, "5mb": 209, "distributeddataparallel": [216, 218], "batch_sampl": 217, "num_work": 217, "collate_fn": 217, "drop_last": [217, 218], "timeout": 217, "worker_init_fn": 217, "multiprocessing_context": 217, "prefetch_factor": 217, "persistent_work": 217, "pin_memory_devic": 217, "loader": [217, 218], "collat": 217, "page": [217, 264], "reshuffl": 217, "strategi": 217, "mutual": 217, "subprocess": 217, "merg": 217, "mini": 217, "collect": 217, "worker": 217, "rng": 217, "randomsampl": 217, "multiprocess": 217, "base_se": 217, "total": [217, 231], "prefetch": 217, "shutdown": 217, "aliv": 217, "spawn": 217, "iterabledataset": 217, "proper": 217, "guess": 217, "trust": 217, "shard": 217, "inaccur": 217, "worth": 217, "unfortun": 217, "_": [217, 231], "interact": 217, "question": [217, 231], "num_replica": 218, "rank": [218, 230, 254, 259, 260], "restrict": 218, "conjunct": 218, "constant": 218, "world_siz": 218, "ident": 218, "tail": 218, "evenli": 218, "replica": 218, "set_epoch": 218, "is_distribut": 218, "n_epoch": 218, "classif": [221, 230, 235, 246, 260], "score": [221, 230, 246, 260], "cf": [226, 237, 241], "val_metr": [226, 241], "auto": [226, 241, 249], "group_nam": [226, 241], "cbar": [226, 241], "xytick": [226, 241], "xyplotlabel": [226, 241], "sum_stat": [226, 241], "figsiz": [226, 241], "cmap": [226, 241], "blue": [226, 241], "pretti": [226, 241], "plot": [226, 235, 241], "cm": [226, 241], "seaborn": [226, 241], "heatmap": [226, 241], "visual": [226, 235, 241], "shown": [226, 241], "displai": [226, 231, 241], "color": [226, 241], "bar": [226, 231, 241], "tick": [226, 241], "figur": [226, 241], "matplotlib": [226, 231, 241], "rcparam": [226, 241], "colormaps_refer": [226, 241], "colormap": [226, 241], "pyplot": [226, 241], "sumpl": [229, 255], "outcom": [230, 260], "top_k": [230, 260], "__": 231, "act": 231, "progressbar": 231, "request": 231, "desc": 231, "ncol": 231, "mininterv": 231, "maxinterv": 231, "minit": 231, "ascii": 231, "unit_scal": 231, "dynamic_ncol": 231, "bar_format": 231, "postfix": 231, "unit_divisor": 231, "write_byt": 231, "lock_arg": 231, "nrow": 231, "colour": 231, "delai": 231, "gui": 231, "blank": 231, "manual": 231, "inf": 231, "resort": 231, "eta": 231, "9e9": 231, "termin": 231, "textiowrapp": 231, "stringio": 231, "attempt": 231, "fallback": 231, "meter": 231, "interv": 231, "adjust": 231, "lag": 231, "dynamic_minit": 231, "good": 231, "tight": 231, "tweak": 231, "errat": 231, "slow": 231, "unicod": 231, "123456789": 231, "tty": 231, "kilo": 231, "mega": 231, "constantli": 231, "alter": 231, "instantan": 231, "l_bar": 231, "r_bar": 231, "percentag": 231, "0f": 231, "n_fmt": 231, "total_fmt": 231, "elaps": 231, "rate_fmt": 231, "elapsed_": 231, "rate_noinv": 231, "rate_noinv_fmt": 231, "rate_inv": 231, "rate_inv_fmt": 231, "remaining_": 231, "trail": 231, "restart": 231, "3f": 231, "eg": 231, "set_postfix": 231, "written": 231, "refresh": 231, "initialis": 231, "screen": 231, "hide": 231, "outsid": 231, "green": 231, "00ff00": 231, "anim": 231, "graphic": 231, "nolock": 231, "cleanup": 231, "sp": 231, "some_frontend": 231, "format_dict": 231, "what": 231, "repr": 231, "moveto": 231, "classmethod": 231, "external_write_mod": 231, "format_interv": 231, "clock": 231, "ss": [231, 249], "format_met": 231, "extra_kwarg": 231, "meaningless": 231, "appropri": [231, 239], "si": 231, "overrid": 231, "382": 231, "format_num": 231, "intellig": 231, "scientif": 231, "3g": 231, "format_sizeof": 231, "uniti": 231, "magnitud": 231, "get_lock": 231, "lock": 231, "tqdm_kwarg": 231, "core": 231, "groupbi": 231, "dataframegroupbi": 231, "seriesgroupbi": 231, "progress_appli": 231, "pd": 231, "tqdm_gui": 231, "df": 231, "100000": 231, "50": 231, "stackoverflow": 231, "com": 231, "18603270": 231, "acquir": 231, "reset": 231, "set_descript": 231, "set_description_str": 231, "set_lock": 231, "ordered_dict": 231, "set_postfix_str": 231, "expans": 231, "status_print": 231, "longer": 231, "unpaus": 231, "timer": 231, "files": 231, "current_buff": 231, "highli": 231, "increment": 231, "wrapattr": 231, "file_obj": 231, "fobj": 231, "chunk_siz": 231, "y_true": [234, 235], "y_pred": [234, 235], "sample_weight": 235, "c_": 235, "observ": 235, "n_sampl": 235, "ground": 235, "truth": 235, "classifi": 235, "n_class": 235, "reorder": 235, "pred": 235, "confusionmatrixdisplai": 235, "from_estim": 235, "from_predict": 235, "wikipedia": [235, 239], "ax": [235, 239], "ant": 235, "bird": 235, "tn": 235, "fp": 235, "tp": 235, "accuracymetr": 236, "nan_polici": 239, "harmon": 239, "a_i": 239, "w_i": 239, "sum_": 239, "platform": 239, "omit": 239, "insuffici": 239, "gmean": 239, "en": 239, "wiki": 239, "harmonic_mean": 239, "weighted_harmonic_mean": 239, "ferger": 239, "journal": 239, "american": 239, "vol": 239, "26": 239, "pp": 239, "40": 239, "1931": 239, "6000000000000001": 239, "6997245179063363": 239, "9029126213592233": 239, "typenam": 242, "__doc__": 242, "unpack": 242, "_asdict": 242, "_replac": 242, "date_str": 247, "uniq_id": 247, "convini": 247, "date": [247, 248, 249], "ymd_hm": [247, 248], "year": 249, "month": 249, "dai": 249, "hour": 249, "minut": 249, "microsecond": 249, "tzinfo": 249, "astimezon": 249, "tz": 249, "timezon": 249, "ctime": 249, "dst": 249, "fromisocalendar": 249, "iso": 249, "week": 249, "weekdai": 249, "isocalendar": 249, "fromisoformat": 249, "isoformat": 249, "fromordin": 249, "prolept": 249, "gregorian": 249, "fromtimestamp": 249, "timestamp": 249, "posix": 249, "sep": 249, "8601": 249, "yyyi": 249, "ddt": 249, "hh": 249, "mmm": 249, "uuu": 249, "timespec": 249, "millisecond": 249, "isoweekdai": 249, "mondai": 249, "sundai": 249, "strftime": 249, "strptime": 249, "pars": 249, "timetupl": 249, "localtim": 249, "timetz": 249, "todai": 249, "__class__": 249, "toordin": 249, "januari": 249, "tzname": 249, "utcfromtimestamp": 249, "naiv": 249, "utc": 249, "utcnow": 249, "utcoffset": 249, "utctimetupl": 249, "fhe_friendli": [254, 258, 259], "procc": 254, "ddp": [254, 259], "filenotfounderror": 254, "henc": [254, 259], "chp": 257, "filenam": 257, "confusion_matrix": 258, "save_freq": 258, "rowdata": 261, "dir": 261, "fname": 261, "deafult": 262, "neuralnet": 263, "suppress": 263, "verbositii": 263, "amount": 263, "visit": 264, "websit": 264, "instal": 264, "pip": 265, "linux": 265, "x86_64": 265, "s390x": 265}, "objects": {"": [[1, 0, 0, "-", "pyhelayers"]], "pyhelayers": [[2, 1, 1, "", "ActionType"], [3, 1, 1, "", "AesKey"], [4, 1, 1, "", "AggregatorPsiManager"], [5, 1, 1, "", "Arima"], [6, 1, 1, "", "ArimaPlain"], [7, 1, 1, "", "BootstrapConfig"], [8, 1, 1, "", "CTile"], [9, 1, 1, "", "CTileTensor"], [10, 1, 1, "", "CTileTensorVector"], [11, 1, 1, "", "CTileVector"], [12, 1, 1, "", "ComparisonType"], [13, 1, 1, "", "ConjugationSupport"], [14, 1, 1, "", "Crf"], [15, 1, 1, "", "CrfPlain"], [16, 4, 1, "", "DefaultContext"], [17, 1, 1, "", "DeviceType"], [18, 1, 1, "", "DoubleTensor"], [19, 1, 1, "", "Encoder"], [20, 1, 1, "", "EncryptedBatch"], [21, 1, 1, "", "EncryptedData"], [22, 1, 1, "", "EvalType"], [23, 1, 1, "", "Field"], [24, 1, 1, "", "FieldType"], [25, 1, 1, "", "FieldVector"], [26, 1, 1, "", "FileStorage"], [27, 1, 1, "", "FitHyperParams"], [28, 1, 1, "", "FunctionEvaluator"], [29, 1, 1, "", "HeConfigRequirement"], [30, 1, 1, "", "HeContext"], [31, 1, 1, "", "HeModel"], [32, 1, 1, "", "HeModelRunner"], [33, 1, 1, "", "HeProfile"], [34, 1, 1, "", "HeRunRequirements"], [35, 1, 1, "", "HeTraits"], [36, 1, 1, "", "HeaanContext"], [37, 1, 1, "", "HelibBgvContext"], [38, 1, 1, "", "HelibCkksContext"], [39, 1, 1, "", "HelibConfig"], [40, 1, 1, "", "HelibContext"], [41, 1, 1, "", "HelibPreset"], [42, 1, 1, "", "KMeans"], [43, 1, 1, "", "KMeansPlain"], [44, 1, 1, "", "LRActivation"], [45, 1, 1, "", "LattigoContext"], [46, 1, 1, "", "LogisticRegression"], [47, 1, 1, "", "LogisticRegressionPlain"], [48, 1, 1, "", "ModelIoProcessor"], [49, 1, 1, "", "NativeFunctionEvaluator"], [50, 1, 1, "", "NeuralNet"], [51, 1, 1, "", "NeuralNetConfig"], [52, 1, 1, "", "NeuralNetPlain"], [53, 1, 1, "", "NumberConfig"], [54, 1, 1, "", "NumberSigned"], [55, 1, 1, "", "NumberSize"], [56, 1, 1, "", "OptimizationTarget"], [57, 1, 1, "", "PTile"], [58, 1, 1, "", "PTileTensor"], [59, 1, 1, "", "Padding2d"], [60, 1, 1, "", "PlainModel"], [61, 1, 1, "", "PlainModelHyperParams"], [62, 1, 1, "", "PrintOptions"], [63, 1, 1, "", "PublicFunctions"], [64, 1, 1, "", "PythonBackedStorage"], [65, 1, 1, "", "RecordLinkageConfig"], [66, 1, 1, "", "RecordLinkageManager"], [67, 1, 1, "", "RecordLinkagePackage"], [68, 1, 1, "", "RecordLinkageRule"], [69, 1, 1, "", "RecordLinkageRuleType"], [70, 1, 1, "", "RotationSetType"], [71, 1, 1, "", "RtsPsiManager"], [72, 1, 1, "", "SealCkksContext"], [73, 1, 1, "", "Storage"], [74, 1, 1, "", "TTDim"], [75, 1, 1, "", "TTEncoder"], [76, 1, 1, "", "TTFunctionEvaluator"], [77, 1, 1, "", "TTShape"], [78, 1, 1, "", "Table"], [79, 1, 1, "", "Tile"], [80, 1, 1, "", "TileTensor"], [81, 1, 1, "", "Verbosity"], [82, 1, 1, "", "XGBoost"], [83, 1, 1, "", "XGBoostPlain"], [84, 5, 1, "", "decrypt_default_aes_encrypted_blocks_under_fhe"], [85, 0, 0, "-", "ext"], [100, 5, 1, "", "get_print_options"], [101, 5, 1, "", "load_encrypted_data"], [102, 5, 1, "", "load_he_context"], [103, 5, 1, "", "load_he_context_from_file"], [104, 5, 1, "", "load_he_model"], [105, 5, 1, "", "load_io_processor"], [106, 0, 0, "-", "mltoolbox"], [262, 5, 1, "", "prepare_default_plain_blocks_for_aes_encryption"], [263, 5, 1, "", "set_neural_net_verbosity_level"]], "pyhelayers.ActionType": [[2, 2, 1, "", "__init__"], [2, 3, 1, "", "name"]], "pyhelayers.AesKey": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "attach_input_storage"], [3, 2, 1, "", "attach_output_storage"], [3, 2, 1, "", "flush_to_storage"], [3, 2, 1, "", "get_class_name"], [3, 2, 1, "", "he_encrypt"], [3, 2, 1, "", "load_from_buffer"], [3, 2, 1, "", "load_from_file"], [3, 2, 1, "", "save_to_buffer"], [3, 2, 1, "", "save_to_file"], [3, 2, 1, "", "to_string"]], "pyhelayers.AggregatorPsiManager": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "get_verbosity"], [4, 2, 1, "", "rearrange_indicator_vector"], [4, 2, 1, "", "set_verbosity"]], "pyhelayers.Arima": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "attach_input_storage"], [5, 2, 1, "", "attach_output_storage"], [5, 2, 1, "", "compile"], [5, 2, 1, "", "create_context"], [5, 2, 1, "", "create_io_processor"], [5, 2, 1, "", "decrypt_decode"], [5, 2, 1, "", "encode"], [5, 2, 1, "", "encode_encrypt"], [5, 2, 1, "", "fit"], [5, 2, 1, "", "flush_to_storage"], [5, 2, 1, "", "get_class_name"], [5, 2, 1, "", "get_fit_hyperparams"], [5, 2, 1, "", "get_profile"], [5, 2, 1, "", "load_from_buffer"], [5, 2, 1, "", "load_from_file"], [5, 2, 1, "", "predict"], [5, 2, 1, "", "save_to_buffer"], [5, 2, 1, "", "save_to_file"], [5, 2, 1, "", "to_string"]], "pyhelayers.ArimaPlain": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "create"], [6, 2, 1, "", "fit"], [6, 2, 1, "", "get_empty_he_model"], [6, 2, 1, "", "get_hyper_params"], [6, 2, 1, "", "get_input_shapes_for_fit"], [6, 2, 1, "", "get_input_shapes_for_predict"], [6, 2, 1, "", "get_inputs_names_for_fit"], [6, 2, 1, "", "get_inputs_names_for_predict"], [6, 2, 1, "", "get_outputs_names_of_predict"], [6, 2, 1, "", "init"], [6, 2, 1, "", "init_from_files"], [6, 2, 1, "", "is_fit_mode"], [6, 2, 1, "", "is_verbose"], [6, 2, 1, "", "predict"], [6, 2, 1, "", "to_string"], [6, 2, 1, "", "validate_init"]], "pyhelayers.BootstrapConfig": [[7, 2, 1, "", "__init__"]], "pyhelayers.CTile": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "add"], [8, 2, 1, "", "add_plain"], [8, 2, 1, "", "add_plain_raw"], [8, 2, 1, "", "add_raw"], [8, 2, 1, "", "add_scalar"], [8, 2, 1, "", "add_tile"], [8, 2, 1, "", "add_tile_raw"], [8, 2, 1, "", "attach_input_storage"], [8, 2, 1, "", "attach_output_storage"], [8, 2, 1, "", "conjugate"], [8, 2, 1, "", "conjugate_raw"], [8, 2, 1, "", "flush_to_storage"], [8, 2, 1, "", "get_chain_index"], [8, 2, 1, "", "get_class_name"], [8, 2, 1, "", "get_current_device"], [8, 2, 1, "", "get_multiply"], [8, 2, 1, "", "get_scale"], [8, 2, 1, "", "inner_sum"], [8, 2, 1, "", "is_empty"], [8, 2, 1, "", "load_from_buffer"], [8, 2, 1, "", "load_from_file"], [8, 2, 1, "", "multiply"], [8, 2, 1, "", "multiply_by_chainging_scale"], [8, 2, 1, "", "multiply_imaginary_unit"], [8, 2, 1, "", "multiply_plain"], [8, 2, 1, "", "multiply_plain_raw"], [8, 2, 1, "", "multiply_raw"], [8, 2, 1, "", "multiply_scalar"], [8, 2, 1, "", "multiply_tile"], [8, 2, 1, "", "multiply_tile_raw"], [8, 2, 1, "", "negate"], [8, 2, 1, "", "nullify_imaginary_part"], [8, 2, 1, "", "reduce_chain_index"], [8, 2, 1, "", "relinearize"], [8, 2, 1, "", "rescale"], [8, 2, 1, "", "rescale_raw"], [8, 2, 1, "", "rotate"], [8, 2, 1, "", "save_to_buffer"], [8, 2, 1, "", "save_to_file"], [8, 2, 1, "", "set_chain_index"], [8, 2, 1, "", "set_scale"], [8, 2, 1, "", "slot_count"], [8, 2, 1, "", "square"], [8, 2, 1, "", "square_raw"], [8, 2, 1, "", "sub"], [8, 2, 1, "", "sub_plain"], [8, 2, 1, "", "sub_plain_raw"], [8, 2, 1, "", "sub_raw"], [8, 2, 1, "", "sub_tile"], [8, 2, 1, "", "sub_tile_raw"], [8, 2, 1, "", "sum_exp_by_squaring_left_to_right"], [8, 2, 1, "", "sum_exp_by_squaring_right_to_left"], [8, 2, 1, "", "to_device"], [8, 2, 1, "", "to_string"]], "pyhelayers.CTileTensor": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "add"], [9, 2, 1, "", "add_plain"], [9, 2, 1, "", "add_plain_raw"], [9, 2, 1, "", "add_raw"], [9, 2, 1, "", "add_scalar"], [9, 2, 1, "", "add_to"], [9, 2, 1, "", "add_to_raw"], [9, 2, 1, "", "adjust_chain_index"], [9, 2, 1, "", "assert_integrity"], [9, 2, 1, "", "attach_input_storage"], [9, 2, 1, "", "attach_output_storage"], [9, 2, 1, "", "clear_unknowns"], [9, 2, 1, "", "duplicate_over_dim"], [9, 2, 1, "", "flatten"], [9, 2, 1, "", "flush_to_storage"], [9, 2, 1, "", "get_add"], [9, 2, 1, "", "get_add_plain"], [9, 2, 1, "", "get_add_plain_raw"], [9, 2, 1, "", "get_add_raw"], [9, 2, 1, "", "get_add_scalar"], [9, 2, 1, "", "get_chain_index"], [9, 2, 1, "", "get_class_name"], [9, 2, 1, "", "get_clear_unknowns"], [9, 2, 1, "", "get_convolution"], [9, 2, 1, "", "get_current_device"], [9, 2, 1, "", "get_duplicate_over_dim"], [9, 2, 1, "", "get_estimated_memory_usage_bytes"], [9, 2, 1, "", "get_multiply"], [9, 2, 1, "", "get_multiply_and_sum"], [9, 2, 1, "", "get_multiply_plain"], [9, 2, 1, "", "get_multiply_plain_and_sum"], [9, 2, 1, "", "get_multiply_plain_raw"], [9, 2, 1, "", "get_multiply_raw"], [9, 2, 1, "", "get_multiply_scalar"], [9, 2, 1, "", "get_num_used_tiles"], [9, 2, 1, "", "get_reduce_chain_index"], [9, 2, 1, "", "get_relinearize"], [9, 2, 1, "", "get_rescale"], [9, 2, 1, "", "get_set_chain_index"], [9, 2, 1, "", "get_shape"], [9, 2, 1, "", "get_slice"], [9, 2, 1, "", "get_square"], [9, 2, 1, "", "get_square_raw"], [9, 2, 1, "", "get_sub"], [9, 2, 1, "", "get_sub_plain"], [9, 2, 1, "", "get_sub_plain_raw"], [9, 2, 1, "", "get_sub_raw"], [9, 2, 1, "", "get_sum_in_tiles_over_dim"], [9, 2, 1, "", "get_sum_over_dim"], [9, 2, 1, "", "get_sum_tiles_over_dim"], [9, 2, 1, "", "get_tile_at"], [9, 2, 1, "", "get_tile_by_flat_index"], [9, 2, 1, "", "load_from_buffer"], [9, 2, 1, "", "load_from_file"], [9, 2, 1, "", "multiply"], [9, 2, 1, "", "multiply_and_sum"], [9, 2, 1, "", "multiply_and_sum_to"], [9, 2, 1, "", "multiply_plain"], [9, 2, 1, "", "multiply_plain_and_sum"], [9, 2, 1, "", "multiply_plain_raw"], [9, 2, 1, "", "multiply_raw"], [9, 2, 1, "", "multiply_scalar"], [9, 2, 1, "", "multiply_to"], [9, 2, 1, "", "multiply_to_raw"], [9, 2, 1, "", "negate"], [9, 2, 1, "", "re_encrypt"], [9, 2, 1, "", "reduce_chain_index"], [9, 2, 1, "", "relinearize"], [9, 2, 1, "", "relinearize_and_rescale"], [9, 2, 1, "", "rescale"], [9, 2, 1, "", "rotate_along_dim"], [9, 2, 1, "", "save_to_buffer"], [9, 2, 1, "", "save_to_file"], [9, 2, 1, "", "set_chain_index"], [9, 2, 1, "", "shift_along_dim"], [9, 2, 1, "", "square"], [9, 2, 1, "", "square_raw"], [9, 2, 1, "", "sub"], [9, 2, 1, "", "sub_from"], [9, 2, 1, "", "sub_from_raw"], [9, 2, 1, "", "sub_plain"], [9, 2, 1, "", "sub_plain_raw"], [9, 2, 1, "", "sub_raw"], [9, 2, 1, "", "sum_in_tiles_over_dim"], [9, 2, 1, "", "sum_over_dim"], [9, 2, 1, "", "sum_tiles_over_dim"], [9, 2, 1, "", "to_device"], [9, 2, 1, "", "to_string"], [9, 2, 1, "", "validate_packed"]], "pyhelayers.CTileTensorVector": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "append"], [10, 2, 1, "", "clear"], [10, 2, 1, "", "extend"], [10, 2, 1, "", "insert"], [10, 2, 1, "", "pop"]], "pyhelayers.CTileVector": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "append"], [11, 2, 1, "", "clear"], [11, 2, 1, "", "extend"], [11, 2, 1, "", "insert"], [11, 2, 1, "", "pop"]], "pyhelayers.ComparisonType": [[12, 2, 1, "", "__init__"], [12, 3, 1, "", "name"]], "pyhelayers.ConjugationSupport": [[13, 2, 1, "", "__init__"], [13, 3, 1, "", "name"]], "pyhelayers.Crf": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "are_hyper_params_set"], [14, 2, 1, "", "attach_input_storage"], [14, 2, 1, "", "attach_output_storage"], [14, 2, 1, "", "decrypt_decode"], [14, 2, 1, "", "encode_encrypt_input"], [14, 2, 1, "", "fit"], [14, 2, 1, "", "flush_to_storage"], [14, 2, 1, "", "get_class_name"], [14, 2, 1, "", "load_from_buffer"], [14, 2, 1, "", "load_from_file"], [14, 2, 1, "", "save_to_buffer"], [14, 2, 1, "", "save_to_file"], [14, 2, 1, "", "set_hyper_params"], [14, 2, 1, "", "to_string"]], "pyhelayers.CrfPlain": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "attach_input_storage"], [15, 2, 1, "", "attach_output_storage"], [15, 2, 1, "", "flush_to_storage"], [15, 2, 1, "", "get_class_name"], [15, 2, 1, "", "get_num_input_cols"], [15, 2, 1, "", "load_from_buffer"], [15, 2, 1, "", "load_from_file"], [15, 2, 1, "", "predict"], [15, 2, 1, "", "predict_count_all_trees"], [15, 2, 1, "", "predict_proba"], [15, 2, 1, "", "save_to_buffer"], [15, 2, 1, "", "save_to_file"], [15, 2, 1, "", "set_category_weights"], [15, 2, 1, "", "set_nan_handling_method"], [15, 2, 1, "", "set_prediction_method"], [15, 2, 1, "", "to_string"]], "pyhelayers.DeviceType": [[17, 2, 1, "", "__init__"], [17, 3, 1, "", "name"]], "pyhelayers.DoubleTensor": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "add_scalar"], [18, 2, 1, "", "assert_equals"], [18, 2, 1, "", "to_numpy"]], "pyhelayers.Encoder": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "assert_equals"], [19, 2, 1, "", "decode_complex"], [19, 2, 1, "", "decode_double"], [19, 2, 1, "", "decode_int"], [19, 2, 1, "", "decrypt_decode_complex"], [19, 2, 1, "", "decrypt_decode_double"], [19, 2, 1, "", "decrypt_decode_int"], [19, 2, 1, "", "decrypt_decode_tile_double"], [19, 2, 1, "", "encode"], [19, 2, 1, "", "encode_encrypt"], [19, 2, 1, "", "encrypt_tile"], [19, 2, 1, "", "get_decrypt_added_noise_enabled"], [19, 2, 1, "", "get_decrypt_added_noise_precision"], [19, 2, 1, "", "get_default_device"], [19, 2, 1, "", "get_default_scale"], [19, 2, 1, "", "print_error_stats"], [19, 2, 1, "", "restore_default_scale"], [19, 2, 1, "", "set_decrypt_added_noise_enabled"], [19, 2, 1, "", "set_decrypt_added_noise_precision"], [19, 2, 1, "", "set_default_device"], [19, 2, 1, "", "set_default_scale"]], "pyhelayers.EncryptedBatch": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "attach_input_storage"], [20, 2, 1, "", "attach_output_storage"], [20, 2, 1, "", "flush_to_storage"], [20, 2, 1, "", "get_class_name"], [20, 2, 1, "", "get_item"], [20, 2, 1, "", "get_num_items"], [20, 2, 1, "", "load_from_buffer"], [20, 2, 1, "", "load_from_file"], [20, 2, 1, "", "save_to_buffer"], [20, 2, 1, "", "save_to_file"], [20, 2, 1, "", "to_string"]], "pyhelayers.EncryptedData": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "attach_input_storage"], [21, 2, 1, "", "attach_output_storage"], [21, 2, 1, "", "flush_to_storage"], [21, 2, 1, "", "get_batch"], [21, 2, 1, "", "get_class_name"], [21, 2, 1, "", "get_num_batches"], [21, 2, 1, "", "load_from_buffer"], [21, 2, 1, "", "load_from_file"], [21, 2, 1, "", "save_to_buffer"], [21, 2, 1, "", "save_to_file"], [21, 2, 1, "", "to_string"]], "pyhelayers.EvalType": [[22, 2, 1, "", "__init__"], [22, 3, 1, "", "name"]], "pyhelayers.Field": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "load_from_buffer"], [23, 2, 1, "", "load_from_file"], [23, 2, 1, "", "save_to_buffer"], [23, 2, 1, "", "save_to_file"]], "pyhelayers.FieldType": [[24, 2, 1, "", "__init__"], [24, 3, 1, "", "name"]], "pyhelayers.FieldVector": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "append"], [25, 2, 1, "", "clear"], [25, 2, 1, "", "extend"], [25, 2, 1, "", "insert"], [25, 2, 1, "", "pop"]], "pyhelayers.FileStorage": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "load"], [26, 2, 1, "", "save"]], "pyhelayers.FitHyperParams": [[27, 2, 1, "", "__init__"], [27, 3, 1, "", "fit_batch_size"], [27, 3, 1, "", "learning_rate"], [27, 3, 1, "", "number_of_epochs"], [27, 3, 1, "", "number_of_iterations"]], "pyhelayers.FunctionEvaluator": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "compare"], [28, 2, 1, "", "compareInPlace"], [28, 2, 1, "", "inverse"], [28, 2, 1, "", "one_hot"], [28, 2, 1, "", "sign"]], "pyhelayers.HeConfigRequirement": [[29, 2, 1, "", "__init__"], [29, 3, 1, "", "automatic_bootstrapping"], [29, 3, 1, "", "bootstrappable"], [29, 3, 1, "", "fractional_part_precision"], [29, 2, 1, "", "insecure"], [29, 3, 1, "", "integer_part_precision"], [29, 3, 1, "", "multiplication_depth"], [29, 3, 1, "", "num_slots"], [29, 3, 1, "", "public_functions"], [29, 3, 1, "", "security_level"], [29, 2, 1, "", "to_string"]], "pyhelayers.HeContext": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "clone"], [30, 2, 1, "", "create"], [30, 2, 1, "", "get_automatic_bootstrapping"], [30, 2, 1, "", "get_context_id"], [30, 2, 1, "", "get_default_device"], [30, 2, 1, "", "get_default_scale"], [30, 2, 1, "", "get_library_name"], [30, 2, 1, "", "get_modulus_chain"], [30, 2, 1, "", "get_public_functions"], [30, 2, 1, "", "get_scheme_name"], [30, 2, 1, "", "get_security_level"], [30, 2, 1, "", "get_signature"], [30, 2, 1, "", "get_top_chain_index"], [30, 2, 1, "", "get_traits"], [30, 2, 1, "", "has_secret_key"], [30, 2, 1, "", "is_registered_context"], [30, 2, 1, "", "load_from_buffer"], [30, 2, 1, "", "load_from_file"], [30, 2, 1, "", "load_secret_key"], [30, 2, 1, "", "load_secret_key_from_file"], [30, 2, 1, "", "print_signature"], [30, 2, 1, "", "public_functions_supported"], [30, 2, 1, "", "save_secret_key"], [30, 2, 1, "", "save_secret_key_to_file"], [30, 2, 1, "", "save_to_buffer"], [30, 2, 1, "", "save_to_file"], [30, 2, 1, "", "set_automatic_bootstrapping"], [30, 2, 1, "", "set_default_device"], [30, 2, 1, "", "set_default_scale"], [30, 2, 1, "", "slot_count"], [30, 2, 1, "", "to_string"]], "pyhelayers.HeModel": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "attach_input_storage"], [31, 2, 1, "", "attach_output_storage"], [31, 2, 1, "", "compile"], [31, 2, 1, "", "create_context"], [31, 2, 1, "", "create_io_processor"], [31, 2, 1, "", "decrypt_decode"], [31, 2, 1, "", "encode"], [31, 2, 1, "", "encode_encrypt"], [31, 2, 1, "", "fit"], [31, 2, 1, "", "flush_to_storage"], [31, 2, 1, "", "get_class_name"], [31, 2, 1, "", "get_fit_hyperparams"], [31, 2, 1, "", "get_profile"], [31, 2, 1, "", "load_from_buffer"], [31, 2, 1, "", "load_from_file"], [31, 2, 1, "", "predict"], [31, 2, 1, "", "save_to_buffer"], [31, 2, 1, "", "save_to_file"], [31, 2, 1, "", "to_string"]], "pyhelayers.HeModelRunner": [[32, 2, 1, "", "__init__"], [32, 3, 1, "", "decrypt_time"], [32, 3, 1, "", "encrypt_time"], [32, 3, 1, "", "he_input_size"], [32, 3, 1, "", "he_model_size"], [32, 3, 1, "", "he_output_size"], [32, 3, 1, "", "key_creation_time"], [32, 3, 1, "", "keys_size"], [32, 3, 1, "", "model_encode_time"], [32, 2, 1, "", "predict"], [32, 3, 1, "", "predict_time"], [32, 2, 1, "", "to_string"], [32, 3, 1, "", "total_predict_time"], [32, 3, 1, "", "total_setup_time"]], "pyhelayers.HeProfile": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "from_string"], [33, 2, 1, "", "get_context_name"], [33, 2, 1, "", "get_he_config_requirement"], [33, 2, 1, "", "get_is_model_encrypted"], [33, 2, 1, "", "get_optimal_batch_size"], [33, 2, 1, "", "set_not_secure"], [33, 2, 1, "", "set_not_secure_mockup"], [33, 2, 1, "", "to_string"]], "pyhelayers.HeRunRequirements": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "optimize_for_batch_size"], [34, 2, 1, "", "set_aes_key_size"], [34, 2, 1, "", "set_aes_number_config"], [34, 2, 1, "", "set_compress_aes_key"], [34, 2, 1, "", "set_exhaustive_search"], [34, 2, 1, "", "set_fixed_num_slots"], [34, 2, 1, "", "set_fractional_part_precision"], [34, 2, 1, "", "set_handle_overflow"], [34, 2, 1, "", "set_he_context_options"], [34, 2, 1, "", "set_integer_part_precision"], [34, 2, 1, "", "set_lazy_encoding"], [34, 2, 1, "", "set_max_batch_memory"], [34, 2, 1, "", "set_max_client_inference_cpu_time"], [34, 2, 1, "", "set_max_client_inference_memory"], [34, 2, 1, "", "set_max_context_memory"], [34, 2, 1, "", "set_max_decrypt_output_cpu_time"], [34, 2, 1, "", "set_max_encrypt_input_cpu_time"], [34, 2, 1, "", "set_max_fit_cpu_time"], [34, 2, 1, "", "set_max_inference_cpu_time"], [34, 2, 1, "", "set_max_inference_memory"], [34, 2, 1, "", "set_max_init_model_cpu_time"], [34, 2, 1, "", "set_max_input_memory"], [34, 2, 1, "", "set_max_model_memory"], [34, 2, 1, "", "set_max_output_memory"], [34, 2, 1, "", "set_max_predict_cpu_time"], [34, 2, 1, "", "set_model_encrypted"], [34, 2, 1, "", "set_no_fixed_batch_size"], [34, 2, 1, "", "set_not_secure"], [34, 2, 1, "", "set_optimization_target"], [34, 2, 1, "", "set_security_level"], [34, 2, 1, "", "set_system_spec"], [34, 2, 1, "", "set_use_aes_inputs"]], "pyhelayers.HeTraits": [[35, 2, 1, "", "__init__"]], "pyhelayers.HeaanContext": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "clone"], [36, 2, 1, "", "create"], [36, 2, 1, "", "get_automatic_bootstrapping"], [36, 2, 1, "", "get_context_id"], [36, 2, 1, "", "get_default_device"], [36, 2, 1, "", "get_default_scale"], [36, 2, 1, "", "get_library_name"], [36, 2, 1, "", "get_modulus_chain"], [36, 2, 1, "", "get_public_functions"], [36, 2, 1, "", "get_scheme_name"], [36, 2, 1, "", "get_security_level"], [36, 2, 1, "", "get_signature"], [36, 2, 1, "", "get_top_chain_index"], [36, 2, 1, "", "get_traits"], [36, 2, 1, "", "has_secret_key"], [36, 2, 1, "", "init"], [36, 2, 1, "", "is_registered_context"], [36, 2, 1, "", "load_from_buffer"], [36, 2, 1, "", "load_from_file"], [36, 2, 1, "", "load_secret_key"], [36, 2, 1, "", "load_secret_key_from_file"], [36, 2, 1, "", "print_signature"], [36, 2, 1, "", "public_functions_supported"], [36, 2, 1, "", "save_secret_key"], [36, 2, 1, "", "save_secret_key_to_file"], [36, 2, 1, "", "save_to_buffer"], [36, 2, 1, "", "save_to_file"], [36, 2, 1, "", "set_automatic_bootstrapping"], [36, 2, 1, "", "set_default_device"], [36, 2, 1, "", "set_default_scale"], [36, 2, 1, "", "slot_count"], [36, 2, 1, "", "to_string"]], "pyhelayers.HelibBgvContext": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "clone"], [37, 2, 1, "", "create"], [37, 2, 1, "", "get_automatic_bootstrapping"], [37, 2, 1, "", "get_context_id"], [37, 2, 1, "", "get_default_device"], [37, 2, 1, "", "get_default_scale"], [37, 2, 1, "", "get_library_name"], [37, 2, 1, "", "get_modulus_chain"], [37, 2, 1, "", "get_public_functions"], [37, 2, 1, "", "get_scheme_name"], [37, 2, 1, "", "get_security_level"], [37, 2, 1, "", "get_signature"], [37, 2, 1, "", "get_top_chain_index"], [37, 2, 1, "", "get_traits"], [37, 2, 1, "", "has_secret_key"], [37, 2, 1, "", "init"], [37, 2, 1, "", "is_registered_context"], [37, 2, 1, "", "load_from_buffer"], [37, 2, 1, "", "load_from_file"], [37, 2, 1, "", "load_secret_key"], [37, 2, 1, "", "load_secret_key_from_file"], [37, 2, 1, "", "print_signature"], [37, 2, 1, "", "public_functions_supported"], [37, 2, 1, "", "save_secret_key"], [37, 2, 1, "", "save_secret_key_to_file"], [37, 2, 1, "", "save_to_buffer"], [37, 2, 1, "", "save_to_file"], [37, 2, 1, "", "set_automatic_bootstrapping"], [37, 2, 1, "", "set_default_device"], [37, 2, 1, "", "set_default_scale"], [37, 2, 1, "", "set_ntl_num_threads"], [37, 2, 1, "", "slot_count"], [37, 2, 1, "", "to_string"]], "pyhelayers.HelibCkksContext": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "clone"], [38, 2, 1, "", "create"], [38, 2, 1, "", "get_automatic_bootstrapping"], [38, 2, 1, "", "get_context_id"], [38, 2, 1, "", "get_default_device"], [38, 2, 1, "", "get_default_scale"], [38, 2, 1, "", "get_enable_conjugate"], [38, 2, 1, "", "get_library_name"], [38, 2, 1, "", "get_modulus_chain"], [38, 2, 1, "", "get_public_functions"], [38, 2, 1, "", "get_scheme_name"], [38, 2, 1, "", "get_security_level"], [38, 2, 1, "", "get_signature"], [38, 2, 1, "", "get_top_chain_index"], [38, 2, 1, "", "get_traits"], [38, 2, 1, "", "has_secret_key"], [38, 2, 1, "", "init"], [38, 2, 1, "", "is_registered_context"], [38, 2, 1, "", "load_from_buffer"], [38, 2, 1, "", "load_from_file"], [38, 2, 1, "", "load_secret_key"], [38, 2, 1, "", "load_secret_key_from_file"], [38, 2, 1, "", "print_signature"], [38, 2, 1, "", "public_functions_supported"], [38, 2, 1, "", "save_secret_key"], [38, 2, 1, "", "save_secret_key_to_file"], [38, 2, 1, "", "save_to_buffer"], [38, 2, 1, "", "save_to_file"], [38, 2, 1, "", "set_automatic_bootstrapping"], [38, 2, 1, "", "set_default_device"], [38, 2, 1, "", "set_default_scale"], [38, 2, 1, "", "set_ntl_num_threads"], [38, 2, 1, "", "slot_count"], [38, 2, 1, "", "to_string"]], "pyhelayers.HelibConfig": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "init_preset"], [39, 2, 1, "", "load_from_buffer"], [39, 2, 1, "", "save_to_buffer"]], "pyhelayers.HelibContext": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "clone"], [40, 2, 1, "", "create"], [40, 2, 1, "", "get_automatic_bootstrapping"], [40, 2, 1, "", "get_context_id"], [40, 2, 1, "", "get_default_device"], [40, 2, 1, "", "get_default_scale"], [40, 2, 1, "", "get_library_name"], [40, 2, 1, "", "get_modulus_chain"], [40, 2, 1, "", "get_public_functions"], [40, 2, 1, "", "get_scheme_name"], [40, 2, 1, "", "get_security_level"], [40, 2, 1, "", "get_signature"], [40, 2, 1, "", "get_top_chain_index"], [40, 2, 1, "", "get_traits"], [40, 2, 1, "", "has_secret_key"], [40, 2, 1, "", "is_registered_context"], [40, 2, 1, "", "load_from_buffer"], [40, 2, 1, "", "load_from_file"], [40, 2, 1, "", "load_secret_key"], [40, 2, 1, "", "load_secret_key_from_file"], [40, 2, 1, "", "print_signature"], [40, 2, 1, "", "public_functions_supported"], [40, 2, 1, "", "save_secret_key"], [40, 2, 1, "", "save_secret_key_to_file"], [40, 2, 1, "", "save_to_buffer"], [40, 2, 1, "", "save_to_file"], [40, 2, 1, "", "set_automatic_bootstrapping"], [40, 2, 1, "", "set_default_device"], [40, 2, 1, "", "set_default_scale"], [40, 2, 1, "", "set_ntl_num_threads"], [40, 2, 1, "", "slot_count"], [40, 2, 1, "", "to_string"]], "pyhelayers.HelibPreset": [[41, 2, 1, "", "__init__"], [41, 3, 1, "", "name"]], "pyhelayers.KMeans": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "attach_input_storage"], [42, 2, 1, "", "attach_output_storage"], [42, 2, 1, "", "compile"], [42, 2, 1, "", "create_context"], [42, 2, 1, "", "create_io_processor"], [42, 2, 1, "", "decrypt_decode"], [42, 2, 1, "", "encode"], [42, 2, 1, "", "encode_encrypt"], [42, 2, 1, "", "fit"], [42, 2, 1, "", "flush_to_storage"], [42, 2, 1, "", "get_class_name"], [42, 2, 1, "", "get_fit_hyperparams"], [42, 2, 1, "", "get_profile"], [42, 2, 1, "", "load_from_buffer"], [42, 2, 1, "", "load_from_file"], [42, 2, 1, "", "predict"], [42, 2, 1, "", "save_to_buffer"], [42, 2, 1, "", "save_to_file"], [42, 2, 1, "", "to_string"]], "pyhelayers.KMeansPlain": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "create"], [43, 2, 1, "", "fit"], [43, 2, 1, "", "get_empty_he_model"], [43, 2, 1, "", "get_hyper_params"], [43, 2, 1, "", "get_input_shapes_for_fit"], [43, 2, 1, "", "get_input_shapes_for_predict"], [43, 2, 1, "", "get_inputs_names_for_fit"], [43, 2, 1, "", "get_inputs_names_for_predict"], [43, 2, 1, "", "get_outputs_names_of_predict"], [43, 2, 1, "", "init"], [43, 2, 1, "", "init_from_files"], [43, 2, 1, "", "is_fit_mode"], [43, 2, 1, "", "is_verbose"], [43, 2, 1, "", "predict"], [43, 2, 1, "", "set_centroids"], [43, 2, 1, "", "to_string"], [43, 2, 1, "", "validate_init"]], "pyhelayers.LRActivation": [[44, 2, 1, "", "__init__"], [44, 3, 1, "", "name"]], "pyhelayers.LattigoContext": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "clone"], [45, 2, 1, "", "create"], [45, 2, 1, "", "get_automatic_bootstrapping"], [45, 2, 1, "", "get_context_id"], [45, 2, 1, "", "get_default_device"], [45, 2, 1, "", "get_default_scale"], [45, 2, 1, "", "get_library_name"], [45, 2, 1, "", "get_modulus_chain"], [45, 2, 1, "", "get_public_functions"], [45, 2, 1, "", "get_scheme_name"], [45, 2, 1, "", "get_security_level"], [45, 2, 1, "", "get_signature"], [45, 2, 1, "", "get_top_chain_index"], [45, 2, 1, "", "get_traits"], [45, 2, 1, "", "has_secret_key"], [45, 2, 1, "", "init"], [45, 2, 1, "", "is_registered_context"], [45, 2, 1, "", "load_from_buffer"], [45, 2, 1, "", "load_from_file"], [45, 2, 1, "", "load_secret_key"], [45, 2, 1, "", "load_secret_key_from_file"], [45, 2, 1, "", "print_signature"], [45, 2, 1, "", "public_functions_supported"], [45, 2, 1, "", "save_secret_key"], [45, 2, 1, "", "save_secret_key_to_file"], [45, 2, 1, "", "save_to_buffer"], [45, 2, 1, "", "save_to_file"], [45, 2, 1, "", "set_automatic_bootstrapping"], [45, 2, 1, "", "set_default_device"], [45, 2, 1, "", "set_default_scale"], [45, 2, 1, "", "slot_count"], [45, 2, 1, "", "to_string"]], "pyhelayers.LogisticRegression": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "attach_input_storage"], [46, 2, 1, "", "attach_output_storage"], [46, 2, 1, "", "compile"], [46, 2, 1, "", "create_context"], [46, 2, 1, "", "create_io_processor"], [46, 2, 1, "", "decrypt_decode"], [46, 2, 1, "", "encode"], [46, 2, 1, "", "encode_encrypt"], [46, 2, 1, "", "fit"], [46, 2, 1, "", "flush_to_storage"], [46, 2, 1, "", "get_activation"], [46, 2, 1, "", "get_class_name"], [46, 2, 1, "", "get_fit_hyperparams"], [46, 2, 1, "", "get_negate_sigmoid"], [46, 2, 1, "", "get_num_features"], [46, 2, 1, "", "get_profile"], [46, 2, 1, "", "load_from_buffer"], [46, 2, 1, "", "load_from_file"], [46, 2, 1, "", "predict"], [46, 2, 1, "", "save_to_buffer"], [46, 2, 1, "", "save_to_file"], [46, 2, 1, "", "to_string"]], "pyhelayers.LogisticRegressionPlain": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "create"], [47, 2, 1, "", "fit"], [47, 2, 1, "", "get_activation"], [47, 2, 1, "", "get_bias"], [47, 2, 1, "", "get_empty_he_model"], [47, 2, 1, "", "get_hyper_params"], [47, 2, 1, "", "get_input_shapes_for_fit"], [47, 2, 1, "", "get_input_shapes_for_predict"], [47, 2, 1, "", "get_inputs_names_for_fit"], [47, 2, 1, "", "get_inputs_names_for_predict"], [47, 2, 1, "", "get_outputs_names_of_predict"], [47, 2, 1, "", "get_weights"], [47, 2, 1, "", "init"], [47, 2, 1, "", "init_from_files"], [47, 2, 1, "", "is_fit_mode"], [47, 2, 1, "", "is_verbose"], [47, 2, 1, "", "predict"], [47, 2, 1, "", "to_string"], [47, 2, 1, "", "validate_init"]], "pyhelayers.ModelIoProcessor": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "attach_input_storage"], [48, 2, 1, "", "attach_output_storage"], [48, 2, 1, "", "decrypt_decode_output"], [48, 2, 1, "", "decrypt_decode_outputs"], [48, 2, 1, "", "encode_encrypt_inputs_for_fit"], [48, 2, 1, "", "encode_encrypt_inputs_for_predict"], [48, 2, 1, "", "flush_to_storage"], [48, 2, 1, "", "get_class_name"], [48, 2, 1, "", "get_data_packing"], [48, 2, 1, "", "load_from_buffer"], [48, 2, 1, "", "load_from_file"], [48, 2, 1, "", "save_to_buffer"], [48, 2, 1, "", "save_to_file"], [48, 2, 1, "", "to_string"]], "pyhelayers.NativeFunctionEvaluator": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "power_in_place"], [49, 2, 1, "", "total_product"]], "pyhelayers.NeuralNet": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "attach_input_storage"], [50, 2, 1, "", "attach_output_storage"], [50, 2, 1, "", "compile"], [50, 2, 1, "", "create_context"], [50, 2, 1, "", "create_io_processor"], [50, 2, 1, "", "decrypt_decode"], [50, 2, 1, "", "encode"], [50, 2, 1, "", "encode_encrypt"], [50, 2, 1, "", "fit"], [50, 2, 1, "", "flush_to_storage"], [50, 2, 1, "", "get_class_name"], [50, 2, 1, "", "get_fit_hyperparams"], [50, 2, 1, "", "get_profile"], [50, 2, 1, "", "load_from_buffer"], [50, 2, 1, "", "load_from_file"], [50, 2, 1, "", "predict"], [50, 2, 1, "", "save_to_buffer"], [50, 2, 1, "", "save_to_file"], [50, 2, 1, "", "to_string"]], "pyhelayers.NeuralNetConfig": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "get_clear_for_physical_padding"], [51, 2, 1, "", "get_io_channels_last"], [51, 2, 1, "", "get_normalize_poly_activation"], [51, 2, 1, "", "get_overflow_margin"], [51, 2, 1, "", "get_poly_activation_eval_type"], [51, 2, 1, "", "set_clear_for_physical_padding"], [51, 2, 1, "", "set_io_channels_last"], [51, 2, 1, "", "set_normalize_poly_activation"], [51, 2, 1, "", "set_overflow_margin"], [51, 2, 1, "", "set_poly_activation_eval_type"]], "pyhelayers.NeuralNetPlain": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "create"], [52, 2, 1, "", "fit"], [52, 2, 1, "", "get_empty_he_model"], [52, 2, 1, "", "get_hyper_params"], [52, 2, 1, "", "get_input_shapes_for_fit"], [52, 2, 1, "", "get_input_shapes_for_predict"], [52, 2, 1, "", "get_inputs_names_for_fit"], [52, 2, 1, "", "get_inputs_names_for_predict"], [52, 2, 1, "", "get_neural_net_config"], [52, 2, 1, "", "get_outputs_names_of_predict"], [52, 2, 1, "", "init"], [52, 2, 1, "", "init_from_files"], [52, 2, 1, "", "is_fit_mode"], [52, 2, 1, "", "is_verbose"], [52, 2, 1, "", "predict"], [52, 2, 1, "", "to_string"], [52, 2, 1, "", "validate_init"]], "pyhelayers.NumberConfig": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "bit"], [53, 2, 1, "", "fixed_point"], [53, 2, 1, "", "floating_point"], [53, 2, 1, "", "integer"], [53, 2, 1, "", "load_from_buffer"], [53, 2, 1, "", "save_to_buffer"], [53, 2, 1, "", "to_string"]], "pyhelayers.NumberSigned": [[54, 2, 1, "", "__init__"], [54, 3, 1, "", "name"]], "pyhelayers.NumberSize": [[55, 2, 1, "", "__init__"], [55, 3, 1, "", "name"]], "pyhelayers.OptimizationTarget": [[56, 2, 1, "", "__init__"], [56, 3, 1, "", "name"]], "pyhelayers.PTile": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "attach_input_storage"], [57, 2, 1, "", "attach_output_storage"], [57, 2, 1, "", "flush_to_storage"], [57, 2, 1, "", "get_chain_index"], [57, 2, 1, "", "get_class_name"], [57, 2, 1, "", "get_current_device"], [57, 2, 1, "", "get_scale"], [57, 2, 1, "", "is_all_zeroes"], [57, 2, 1, "", "load_from_buffer"], [57, 2, 1, "", "load_from_file"], [57, 2, 1, "", "reduce_chain_index"], [57, 2, 1, "", "save_to_buffer"], [57, 2, 1, "", "save_to_file"], [57, 2, 1, "", "set_chain_index"], [57, 2, 1, "", "set_scale"], [57, 2, 1, "", "slot_count"], [57, 2, 1, "", "to_device"], [57, 2, 1, "", "to_string"]], "pyhelayers.PTileTensor": [[58, 2, 1, "", "__init__"], [58, 2, 1, "", "add_to"], [58, 2, 1, "", "add_to_raw"], [58, 2, 1, "", "assert_integrity"], [58, 2, 1, "", "attach_input_storage"], [58, 2, 1, "", "attach_output_storage"], [58, 2, 1, "", "flush_to_storage"], [58, 2, 1, "", "get_add"], [58, 2, 1, "", "get_add_raw"], [58, 2, 1, "", "get_chain_index"], [58, 2, 1, "", "get_class_name"], [58, 2, 1, "", "get_current_device"], [58, 2, 1, "", "get_estimated_memory_usage_bytes"], [58, 2, 1, "", "get_multiply"], [58, 2, 1, "", "get_multiply_and_sum"], [58, 2, 1, "", "get_multiply_raw"], [58, 2, 1, "", "get_num_used_tiles"], [58, 2, 1, "", "get_reduce_chain_index"], [58, 2, 1, "", "get_set_chain_index"], [58, 2, 1, "", "get_shape"], [58, 2, 1, "", "get_tile_at"], [58, 2, 1, "", "get_tile_by_flat_index"], [58, 2, 1, "", "load_from_buffer"], [58, 2, 1, "", "load_from_file"], [58, 2, 1, "", "multiply_and_sum_to"], [58, 2, 1, "", "multiply_to"], [58, 2, 1, "", "multiply_to_raw"], [58, 2, 1, "", "reduce_chain_index"], [58, 2, 1, "", "save_to_buffer"], [58, 2, 1, "", "save_to_file"], [58, 2, 1, "", "set_chain_index"], [58, 2, 1, "", "sub_from"], [58, 2, 1, "", "sub_from_raw"], [58, 2, 1, "", "to_device"], [58, 2, 1, "", "to_string"], [58, 2, 1, "", "validate_packed"]], "pyhelayers.Padding2d": [[59, 2, 1, "", "__init__"], [59, 2, 1, "", "all_zero"], [59, 3, 1, "", "down"], [59, 2, 1, "", "get_max_left_right"], [59, 2, 1, "", "get_max_up_down"], [59, 3, 1, "", "left"], [59, 3, 1, "", "right"], [59, 2, 1, "", "set"], [59, 2, 1, "", "to_string"], [59, 3, 1, "", "up"]], "pyhelayers.PlainModel": [[60, 2, 1, "", "__init__"], [60, 2, 1, "", "create"], [60, 2, 1, "", "fit"], [60, 2, 1, "", "get_empty_he_model"], [60, 2, 1, "", "get_hyper_params"], [60, 2, 1, "", "get_input_shapes_for_fit"], [60, 2, 1, "", "get_input_shapes_for_predict"], [60, 2, 1, "", "get_inputs_names_for_fit"], [60, 2, 1, "", "get_inputs_names_for_predict"], [60, 2, 1, "", "get_outputs_names_of_predict"], [60, 2, 1, "", "init"], [60, 2, 1, "", "init_from_files"], [60, 2, 1, "", "is_fit_mode"], [60, 2, 1, "", "is_verbose"], [60, 2, 1, "", "predict"], [60, 2, 1, "", "to_string"], [60, 2, 1, "", "validate_init"]], "pyhelayers.PlainModelHyperParams": [[61, 2, 1, "", "__init__"], [61, 3, 1, "", "d"], [61, 3, 1, "", "feature_ranges"], [61, 3, 1, "", "features_bin_size"], [61, 3, 1, "", "features_scale_target"], [61, 3, 1, "", "fit_hyper_params"], [61, 3, 1, "", "frep"], [61, 3, 1, "", "grep"], [61, 3, 1, "", "init_random_weights"], [61, 2, 1, "", "load"], [61, 2, 1, "", "load_from_buffer"], [61, 3, 1, "", "logistic_regression_activation"], [61, 3, 1, "", "max_rand_value"], [61, 3, 1, "", "min_rand_value"], [61, 3, 1, "", "mu"], [61, 3, 1, "", "negate_sigmoid_input"], [61, 3, 1, "", "num_centers"], [61, 3, 1, "", "num_samples"], [61, 3, 1, "", "num_values_used_for_prediction"], [61, 3, 1, "", "number_of_features"], [61, 3, 1, "", "p"], [61, 3, 1, "", "phi"], [61, 3, 1, "", "q"], [61, 3, 1, "", "sparse_rate"], [61, 3, 1, "", "theta1"], [61, 3, 1, "", "trainable"], [61, 3, 1, "", "varw"], [61, 3, 1, "", "verbose"]], "pyhelayers.PrintOptions": [[62, 2, 1, "", "__init__"], [62, 3, 1, "", "factor"], [62, 3, 1, "", "num_printed_elements"], [62, 3, 1, "", "num_printed_last_elements"], [62, 3, 1, "", "precision"], [62, 3, 1, "", "print_complex_numbers"], [62, 3, 1, "", "print_encrypted_content"], [62, 3, 1, "", "table_cell_width"], [62, 3, 1, "", "tt_demo_tiles"]], "pyhelayers.PublicFunctions": [[63, 2, 1, "", "__init__"], [63, 2, 1, "", "clear"], [63, 3, 1, "", "conjugate"], [63, 3, 1, "", "encrypt"], [63, 2, 1, "", "get_rotation_steps"], [63, 2, 1, "", "load_from_buffer"], [63, 3, 1, "", "relinearize"], [63, 3, 1, "", "rotate"], [63, 2, 1, "", "save_to_buffer"], [63, 2, 1, "", "set_rotation_steps"], [63, 2, 1, "", "to_string"]], "pyhelayers.PythonBackedStorage": [[64, 2, 1, "", "__init__"], [64, 2, 1, "", "load"], [64, 2, 1, "", "save"]], "pyhelayers.RecordLinkageConfig": [[65, 2, 1, "", "__init__"], [65, 2, 1, "", "get_fields_names"], [65, 2, 1, "", "get_name_field_name"], [65, 2, 1, "", "get_num_bands"], [65, 2, 1, "", "get_size_bands"], [65, 2, 1, "", "get_verbosity"], [65, 2, 1, "", "is_fully_initialized"], [65, 2, 1, "", "set_num_bands_and_size_bands"], [65, 2, 1, "", "set_records_fields"], [65, 2, 1, "", "set_verbosity"], [65, 2, 1, "", "to_string"]], "pyhelayers.RecordLinkageManager": [[66, 2, 1, "", "__init__"], [66, 2, 1, "", "apply_secret_key_to_records"], [66, 2, 1, "", "encrypt_fields_for_equal_rule"], [66, 2, 1, "", "encrypt_fields_for_similar_rule"], [66, 2, 1, "", "get_next_expected_function_name"], [66, 2, 1, "", "get_num_matched_records"], [66, 2, 1, "", "get_num_of_records"], [66, 2, 1, "", "init_records_from_file"], [66, 2, 1, "", "match_records_by_equal_rule"], [66, 2, 1, "", "match_records_by_similar_rule"], [66, 2, 1, "", "report_matched_records"], [66, 2, 1, "", "report_matched_records_along_with_other_side_records"], [66, 2, 1, "", "set_current_rule"]], "pyhelayers.RecordLinkagePackage": [[67, 2, 1, "", "__init__"], [67, 2, 1, "", "to_string"]], "pyhelayers.RecordLinkageRule": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "get_field_rule_type"], [68, 2, 1, "", "get_field_shingles_size"], [68, 2, 1, "", "get_field_shingles_weight"], [68, 2, 1, "", "set_field"], [68, 2, 1, "", "to_string"]], "pyhelayers.RecordLinkageRuleType": [[69, 2, 1, "", "__init__"], [69, 3, 1, "", "name"]], "pyhelayers.RotationSetType": [[70, 2, 1, "", "__init__"], [70, 3, 1, "", "name"]], "pyhelayers.RtsPsiManager": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "compaction"], [71, 2, 1, "", "generate_indicator_vector"], [71, 2, 1, "", "get_uids_mapping"], [71, 2, 1, "", "get_uninserted_uids"], [71, 2, 1, "", "get_verbosity"], [71, 2, 1, "", "insert_to_hash"], [71, 2, 1, "", "multiply_indicator_vectors"], [71, 2, 1, "", "set_verbosity"]], "pyhelayers.SealCkksContext": [[72, 2, 1, "", "__init__"], [72, 2, 1, "", "clone"], [72, 2, 1, "", "create"], [72, 2, 1, "", "get_accurate_scale"], [72, 2, 1, "", "get_automatic_bootstrapping"], [72, 2, 1, "", "get_context_id"], [72, 2, 1, "", "get_default_device"], [72, 2, 1, "", "get_default_scale"], [72, 2, 1, "", "get_library_name"], [72, 2, 1, "", "get_modulus_chain"], [72, 2, 1, "", "get_public_functions"], [72, 2, 1, "", "get_scheme_name"], [72, 2, 1, "", "get_security_level"], [72, 2, 1, "", "get_signature"], [72, 2, 1, "", "get_top_chain_index"], [72, 2, 1, "", "get_traits"], [72, 2, 1, "", "get_use_accurate_scaling"], [72, 2, 1, "", "has_secret_key"], [72, 2, 1, "", "init"], [72, 2, 1, "", "is_registered_context"], [72, 2, 1, "", "load_from_buffer"], [72, 2, 1, "", "load_from_file"], [72, 2, 1, "", "load_secret_key"], [72, 2, 1, "", "load_secret_key_from_file"], [72, 2, 1, "", "print_signature"], [72, 2, 1, "", "public_functions_supported"], [72, 2, 1, "", "save_secret_key"], [72, 2, 1, "", "save_secret_key_to_file"], [72, 2, 1, "", "save_to_buffer"], [72, 2, 1, "", "save_to_file"], [72, 2, 1, "", "set_automatic_bootstrapping"], [72, 2, 1, "", "set_default_device"], [72, 2, 1, "", "set_default_scale"], [72, 2, 1, "", "set_use_accurate_scaling"], [72, 2, 1, "", "slot_count"], [72, 2, 1, "", "to_string"]], "pyhelayers.Storage": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "load"], [73, 2, 1, "", "save"]], "pyhelayers.TTDim": [[74, 2, 1, "", "__init__"], [74, 2, 1, "", "apply_compatibility_adjustments"], [74, 2, 1, "", "duplicate"], [74, 2, 1, "", "get_are_unused_slots_unknown"], [74, 2, 1, "", "get_external_size"], [74, 2, 1, "", "get_is_complex_packed"], [74, 2, 1, "", "get_max_used_slots_in_tile"], [74, 2, 1, "", "get_num_duplicated"], [74, 2, 1, "", "get_num_duplicated_slots"], [74, 2, 1, "", "get_num_unused_slots"], [74, 2, 1, "", "get_num_used_slots"], [74, 2, 1, "", "get_original_size"], [74, 2, 1, "", "get_original_size_slots"], [74, 2, 1, "", "get_tile_size"], [74, 2, 1, "", "is_compatible"], [74, 2, 1, "", "is_degenerate_tile"], [74, 2, 1, "", "is_equal_on_original_slots"], [74, 2, 1, "", "is_fully_duplicated"], [74, 2, 1, "", "is_incomplete"], [74, 2, 1, "", "is_interleaved"], [74, 2, 1, "", "load_from_buffer"], [74, 2, 1, "", "reduce_original_size"], [74, 2, 1, "", "save_to_buffer"], [74, 2, 1, "", "set_are_unused_slots_unknown"], [74, 2, 1, "", "set_incomplete"], [74, 2, 1, "", "set_interleaved"], [74, 2, 1, "", "set_interleaved_external_size"], [74, 2, 1, "", "set_is_complex_packed"], [74, 2, 1, "", "set_num_duplicated"], [74, 2, 1, "", "set_original_size"], [74, 2, 1, "", "set_tile_size"], [74, 2, 1, "", "set_unused_slots_unknown"], [74, 2, 1, "", "to_string"]], "pyhelayers.TTEncoder": [[75, 2, 1, "", "__init__"], [75, 2, 1, "", "assert_equals"], [75, 2, 1, "", "decode_double"], [75, 2, 1, "", "decrypt"], [75, 2, 1, "", "decrypt_decode_double"], [75, 2, 1, "", "encode"], [75, 2, 1, "", "encode_encrypt"], [75, 2, 1, "", "encrypt"], [75, 2, 1, "", "get_encoder"]], "pyhelayers.TTFunctionEvaluator": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "compare"], [76, 2, 1, "", "inverse"], [76, 2, 1, "", "poly_eval_in_place"], [76, 2, 1, "", "pow_in_place"], [76, 2, 1, "", "sigmoid3_in_place"], [76, 2, 1, "", "sigmoid7_in_place"], [76, 2, 1, "", "sigmoid9_in_place"], [76, 2, 1, "", "sign_in_place"]], "pyhelayers.TTShape": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "add_dim"], [77, 2, 1, "", "apply_compatibility_adjustments"], [77, 2, 1, "", "are_all_dims_incomplete"], [77, 2, 1, "", "assert_compatible"], [77, 2, 1, "", "clear_unknowns"], [77, 2, 1, "", "contains_unknown_unused_slots"], [77, 2, 1, "", "get_dim"], [77, 2, 1, "", "get_external_sizes"], [77, 2, 1, "", "get_incomplete_tile_sizes"], [77, 2, 1, "", "get_num_dims"], [77, 2, 1, "", "get_num_slots_in_tile"], [77, 2, 1, "", "get_num_used_tiles"], [77, 2, 1, "", "get_original_sizes"], [77, 2, 1, "", "get_rotate_offset_of_dim"], [77, 2, 1, "", "get_sub_shape"], [77, 2, 1, "", "get_tile_sizes"], [77, 2, 1, "", "get_with_duplicated_dim"], [77, 2, 1, "", "get_with_duplicated_dims"], [77, 2, 1, "", "insert_dim_at"], [77, 2, 1, "", "is_compatible"], [77, 2, 1, "", "is_first_non_degenerate_tile_dim"], [77, 2, 1, "", "is_incomplete"], [77, 2, 1, "", "load_from_buffer"], [77, 2, 1, "", "save_to_buffer"], [77, 2, 1, "", "set_all_unused_slots_unknown"], [77, 2, 1, "", "set_original_sizes"], [77, 2, 1, "", "tile_layout_to_string"], [77, 2, 1, "", "to_string"]], "pyhelayers.Table": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "attach_input_storage"], [78, 2, 1, "", "attach_output_storage"], [78, 2, 1, "", "average_query"], [78, 2, 1, "", "count_query"], [78, 2, 1, "", "create_compare_value"], [78, 2, 1, "", "create_indicators_for_col"], [78, 2, 1, "", "flush_to_storage"], [78, 2, 1, "", "get_cell_content"], [78, 2, 1, "", "get_class_name"], [78, 2, 1, "", "get_num_of_rows"], [78, 2, 1, "", "load_from_buffer"], [78, 2, 1, "", "load_from_file"], [78, 2, 1, "", "mult_indicators"], [78, 2, 1, "", "post_process_average_query"], [78, 2, 1, "", "post_process_count_query"], [78, 2, 1, "", "post_process_std_dev_query"], [78, 2, 1, "", "post_process_sum_query"], [78, 2, 1, "", "post_process_sum_squares_query"], [78, 2, 1, "", "save_to_buffer"], [78, 2, 1, "", "save_to_file"], [78, 2, 1, "", "set_inverse_optimization"], [78, 2, 1, "", "standard_deviation_query"], [78, 2, 1, "", "sum_query"], [78, 2, 1, "", "sum_squares_query"], [78, 2, 1, "", "to_string"]], "pyhelayers.Tile": [[79, 2, 1, "", "__init__"], [79, 2, 1, "", "attach_input_storage"], [79, 2, 1, "", "attach_output_storage"], [79, 2, 1, "", "flush_to_storage"], [79, 2, 1, "", "get_chain_index"], [79, 2, 1, "", "get_class_name"], [79, 2, 1, "", "get_scale"], [79, 2, 1, "", "load_from_buffer"], [79, 2, 1, "", "load_from_file"], [79, 2, 1, "", "reduce_chain_index"], [79, 2, 1, "", "save_to_buffer"], [79, 2, 1, "", "save_to_file"], [79, 2, 1, "", "set_chain_index"], [79, 2, 1, "", "set_scale"], [79, 2, 1, "", "slot_count"], [79, 2, 1, "", "to_string"]], "pyhelayers.TileTensor": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "add_to"], [80, 2, 1, "", "add_to_raw"], [80, 2, 1, "", "assert_integrity"], [80, 2, 1, "", "attach_input_storage"], [80, 2, 1, "", "attach_output_storage"], [80, 2, 1, "", "flush_to_storage"], [80, 2, 1, "", "get_add"], [80, 2, 1, "", "get_add_raw"], [80, 2, 1, "", "get_class_name"], [80, 2, 1, "", "get_current_device"], [80, 2, 1, "", "get_estimated_memory_usage_bytes"], [80, 2, 1, "", "get_multiply"], [80, 2, 1, "", "get_multiply_and_sum"], [80, 2, 1, "", "get_multiply_raw"], [80, 2, 1, "", "get_num_used_tiles"], [80, 2, 1, "", "get_shape"], [80, 2, 1, "", "get_tile_at"], [80, 2, 1, "", "get_tile_by_flat_index"], [80, 2, 1, "", "load_from_buffer"], [80, 2, 1, "", "load_from_file"], [80, 2, 1, "", "multiply_and_sum_to"], [80, 2, 1, "", "multiply_to"], [80, 2, 1, "", "multiply_to_raw"], [80, 2, 1, "", "save_to_buffer"], [80, 2, 1, "", "save_to_file"], [80, 2, 1, "", "sub_from"], [80, 2, 1, "", "sub_from_raw"], [80, 2, 1, "", "to_device"], [80, 2, 1, "", "to_string"], [80, 2, 1, "", "validate_packed"]], "pyhelayers.Verbosity": [[81, 2, 1, "", "__init__"], [81, 3, 1, "", "name"]], "pyhelayers.XGBoost": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "attach_input_storage"], [82, 2, 1, "", "attach_output_storage"], [82, 2, 1, "", "compile"], [82, 2, 1, "", "create_context"], [82, 2, 1, "", "create_io_processor"], [82, 2, 1, "", "decrypt_decode"], [82, 2, 1, "", "encode"], [82, 2, 1, "", "encode_encrypt"], [82, 2, 1, "", "fit"], [82, 2, 1, "", "flush_to_storage"], [82, 2, 1, "", "get_class_name"], [82, 2, 1, "", "get_fit_hyperparams"], [82, 2, 1, "", "get_profile"], [82, 2, 1, "", "load_from_buffer"], [82, 2, 1, "", "load_from_file"], [82, 2, 1, "", "predict"], [82, 2, 1, "", "save_to_buffer"], [82, 2, 1, "", "save_to_file"], [82, 2, 1, "", "to_string"]], "pyhelayers.XGBoostPlain": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "create"], [83, 2, 1, "", "fit"], [83, 2, 1, "", "get_empty_he_model"], [83, 2, 1, "", "get_hyper_params"], [83, 2, 1, "", "get_input_shapes_for_fit"], [83, 2, 1, "", "get_input_shapes_for_predict"], [83, 2, 1, "", "get_inputs_names_for_fit"], [83, 2, 1, "", "get_inputs_names_for_predict"], [83, 2, 1, "", "get_outputs_names_of_predict"], [83, 2, 1, "", "init"], [83, 2, 1, "", "init_from_files"], [83, 2, 1, "", "is_fit_mode"], [83, 2, 1, "", "is_verbose"], [83, 2, 1, "", "predict"], [83, 2, 1, "", "to_string"], [83, 2, 1, "", "validate_init"]], "pyhelayers.ext": [[86, 1, 1, "", "MODEL_ARCH"], [87, 0, 0, "-", "pyfhe"], [88, 0, 0, "-", "pyfhecommon"], [91, 0, 0, "-", "pyfhemlimpl"], [94, 5, 1, "", "replace"], [95, 0, 0, "-", "utils"]], "pyhelayers.ext.MODEL_ARCH": [[86, 2, 1, "", "__init__"]], "pyhelayers.ext.pyfhecommon": [[89, 1, 1, "", "ABC"], [90, 5, 1, "", "abstractmethod"]], "pyhelayers.ext.pyfhecommon.ABC": [[89, 2, 1, "", "__init__"]], "pyhelayers.ext.pyfhemlimpl": [[92, 0, 0, "-", "pyfheml"]], "pyhelayers.ext.pyfhemlimpl.pyfheml": [[93, 1, 1, "", "MODEL_ARCH"]], "pyhelayers.ext.pyfhemlimpl.pyfheml.MODEL_ARCH": [[93, 2, 1, "", "__init__"]], "pyhelayers.ext.utils": [[96, 5, 1, "", "end_timer"], [97, 5, 1, "", "extract_batch"], [98, 5, 1, "", "report_duration"], [99, 5, 1, "", "start_timer"]], "pyhelayers.mltoolbox": [[107, 0, 0, "-", "arguments"], [109, 0, 0, "-", "data_loader"], [143, 0, 0, "-", "fhe_friendly_convertor"], [153, 0, 0, "-", "he_dl_lib"], [189, 0, 0, "-", "model"], [213, 0, 0, "-", "trainer"], [232, 0, 0, "-", "utils"]], "pyhelayers.mltoolbox.arguments": [[108, 1, 1, "", "Arguments"]], "pyhelayers.mltoolbox.arguments.Arguments": [[108, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.data_loader": [[110, 0, 0, "-", "cifar10_dataset"], [117, 0, 0, "-", "covidCT_dataset"], [122, 0, 0, "-", "covidXray_dataset"], [128, 0, 0, "-", "dataset_wrapper"], [132, 0, 0, "-", "ds_factory"], [135, 0, 0, "-", "places205_dataset"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset": [[111, 1, 1, "", "Cifar10Dataset"], [112, 1, 1, "", "DatasetWrapper"], [113, 1, 1, "", "Subset"], [114, 5, 1, "", "get_logger"], [115, 5, 1, "", "per_image_standardization"], [116, 5, 1, "", "train_test_split"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "get_samples_per_class"], [111, 2, 1, "", "get_test_data"], [111, 2, 1, "", "get_train_data"], [111, 2, 1, "", "get_val_data"], [111, 2, 1, "", "is_imbalanced"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "get_class_labels_dict"], [112, 2, 1, "", "get_samples_per_class"], [112, 2, 1, "", "get_test_data"], [112, 2, 1, "", "get_train_data"], [112, 2, 1, "", "get_val_data"], [112, 2, 1, "", "is_imbalanced"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Subset": [[113, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.data_loader.covidCT_dataset": [[118, 1, 1, "", "CovidCTDataset"], [119, 1, 1, "", "Dataset"], [120, 1, 1, "", "DatasetWrapper"], [121, 5, 1, "", "get_logger"]], "pyhelayers.mltoolbox.data_loader.covidCT_dataset.CovidCTDataset": [[118, 2, 1, "", "__init__"], [118, 2, 1, "", "get_samples_per_class"]], "pyhelayers.mltoolbox.data_loader.covidCT_dataset.Dataset": [[119, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper": [[120, 2, 1, "", "__init__"], [120, 2, 1, "", "get_class_labels_dict"], [120, 2, 1, "", "get_samples_per_class"], [120, 2, 1, "", "get_test_data"], [120, 2, 1, "", "get_train_data"], [120, 2, 1, "", "get_val_data"], [120, 2, 1, "", "is_imbalanced"]], "pyhelayers.mltoolbox.data_loader.covidXray_dataset": [[123, 1, 1, "", "CovidXrayDataset"], [124, 1, 1, "", "Dataset"], [125, 1, 1, "", "DatasetWrapper"], [126, 5, 1, "", "get_logger"], [127, 5, 1, "", "read_filepaths"]], "pyhelayers.mltoolbox.data_loader.covidXray_dataset.CovidXrayDataset": [[123, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.data_loader.covidXray_dataset.Dataset": [[124, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper": [[125, 2, 1, "", "__init__"], [125, 2, 1, "", "get_class_labels_dict"], [125, 2, 1, "", "get_samples_per_class"], [125, 2, 1, "", "get_test_data"], [125, 2, 1, "", "get_train_data"], [125, 2, 1, "", "get_val_data"], [125, 2, 1, "", "is_imbalanced"]], "pyhelayers.mltoolbox.data_loader.dataset_wrapper": [[129, 1, 1, "", "Dataset"], [130, 1, 1, "", "DatasetWrapper"], [131, 5, 1, "", "get_logger"]], "pyhelayers.mltoolbox.data_loader.dataset_wrapper.Dataset": [[129, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper": [[130, 2, 1, "", "__init__"], [130, 2, 1, "", "get_class_labels_dict"], [130, 2, 1, "", "get_samples_per_class"], [130, 2, 1, "", "get_test_data"], [130, 2, 1, "", "get_train_data"], [130, 2, 1, "", "get_val_data"], [130, 2, 1, "", "is_imbalanced"]], "pyhelayers.mltoolbox.data_loader.ds_factory": [[133, 1, 1, "", "DatasetWrapper"], [134, 5, 1, "", "get_logger"]], "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper": [[133, 2, 1, "", "__init__"], [133, 2, 1, "", "get_class_labels_dict"], [133, 2, 1, "", "get_samples_per_class"], [133, 2, 1, "", "get_test_data"], [133, 2, 1, "", "get_train_data"], [133, 2, 1, "", "get_val_data"], [133, 2, 1, "", "is_imbalanced"]], "pyhelayers.mltoolbox.data_loader.places205_dataset": [[136, 1, 1, "", "Dataset"], [137, 1, 1, "", "DatasetWrapper"], [138, 1, 1, "", "Subset"], [139, 5, 1, "", "get_logger"], [140, 1, 1, "", "places205Dataset"], [141, 5, 1, "", "random_split"], [142, 5, 1, "", "train_test_split"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.Dataset": [[136, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper": [[137, 2, 1, "", "__init__"], [137, 2, 1, "", "get_class_labels_dict"], [137, 2, 1, "", "get_samples_per_class"], [137, 2, 1, "", "get_test_data"], [137, 2, 1, "", "get_train_data"], [137, 2, 1, "", "get_val_data"], [137, 2, 1, "", "is_imbalanced"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.Subset": [[138, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.places205Dataset": [[140, 2, 1, "", "__init__"], [140, 2, 1, "", "get_samples_per_class"]], "pyhelayers.mltoolbox.fhe_friendly_convertor": [[144, 1, 1, "", "FheFriendlyConvertor"], [145, 1, 1, "", "ReduceLROnPlateau"], [146, 1, 1, "", "SimpleNamespace"], [147, 1, 1, "", "Trainer"], [148, 5, 1, "", "get_logger"], [149, 5, 1, "", "get_optimizer"], [150, 5, 1, "", "load_checkpoint"], [151, 5, 1, "", "set_seed"], [152, 5, 1, "", "starting_point"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.FheFriendlyConvertor": [[144, 2, 1, "", "__init__"], [144, 2, 1, "", "create_train_state"], [144, 2, 1, "", "replace_activations"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.ReduceLROnPlateau": [[145, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.SimpleNamespace": [[146, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer": [[147, 2, 1, "", "__init__"], [147, 2, 1, "", "get_model"], [147, 2, 1, "", "get_optimizer"], [147, 2, 1, "", "test"], [147, 2, 1, "", "train_step"], [147, 2, 1, "", "validation"]], "pyhelayers.mltoolbox.he_dl_lib": [[154, 0, 0, "-", "distillation"], [156, 0, 0, "-", "my_logger"], [160, 0, 0, "-", "poly_activations"], [185, 0, 0, "-", "singleton"], [186, 0, 0, "-", "timers"]], "pyhelayers.mltoolbox.he_dl_lib.distillation": [[155, 5, 1, "", "nd_loss"]], "pyhelayers.mltoolbox.he_dl_lib.my_logger": [[157, 1, 1, "", "Logger"], [158, 5, 1, "", "get_logger"], [159, 5, 1, "", "set_logger"]], "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger": [[157, 2, 1, "", "__init__"], [157, 2, 1, "", "addFilter"], [157, 2, 1, "", "addHandler"], [157, 2, 1, "", "callHandlers"], [157, 2, 1, "", "critical"], [157, 2, 1, "", "debug"], [157, 2, 1, "", "error"], [157, 2, 1, "", "exception"], [157, 2, 1, "", "fatal"], [157, 2, 1, "", "filter"], [157, 2, 1, "", "findCaller"], [157, 2, 1, "", "getChild"], [157, 2, 1, "", "getEffectiveLevel"], [157, 2, 1, "", "handle"], [157, 2, 1, "", "hasHandlers"], [157, 2, 1, "", "info"], [157, 2, 1, "", "isEnabledFor"], [157, 2, 1, "", "log"], [157, 2, 1, "", "makeRecord"], [157, 2, 1, "", "removeFilter"], [157, 2, 1, "", "removeHandler"], [157, 2, 1, "", "setLevel"], [157, 2, 1, "", "warning"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations": [[161, 1, 1, "", "ApproxReLU"], [162, 1, 1, "", "IterativeReLU"], [163, 1, 1, "", "Parameter"], [164, 1, 1, "", "SReLU"], [165, 1, 1, "", "Square"], [166, 1, 1, "", "TrainablePolyReLU"], [167, 1, 1, "", "WeightedRelu"], [168, 5, 1, "", "change_module"], [169, 5, 1, "", "create_or_update_weighted_activations"], [170, 5, 1, "", "find_modules_by_type"], [171, 5, 1, "", "forward_iterative_relu"], [172, 5, 1, "", "get_activation_gen"], [173, 5, 1, "", "get_logger"], [174, 5, 1, "", "get_module_by_name"], [175, 5, 1, "", "get_relu_activations"], [176, 5, 1, "", "iterative_sqrt"], [177, 5, 1, "", "poly_activation_non_trainable"], [178, 5, 1, "", "replace_relu_activation"], [179, 5, 1, "", "replace_relu_activations"], [180, 5, 1, "", "round_noise_activation"], [181, 5, 1, "", "set_activation_layer"], [182, 5, 1, "", "square_activation"], [183, 5, 1, "", "srelu_poly_activation"], [184, 6, 1, "", "tryout"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU": [[161, 2, 1, "", "__init__"], [161, 2, 1, "", "add_module"], [161, 2, 1, "", "apply"], [161, 2, 1, "", "bfloat16"], [161, 2, 1, "", "buffers"], [161, 2, 1, "", "children"], [161, 2, 1, "", "cpu"], [161, 2, 1, "", "cuda"], [161, 2, 1, "", "double"], [161, 2, 1, "", "eval"], [161, 2, 1, "", "extra_repr"], [161, 2, 1, "", "float"], [161, 2, 1, "", "forward"], [161, 2, 1, "", "get_buffer"], [161, 2, 1, "", "get_extra_state"], [161, 2, 1, "", "get_parameter"], [161, 2, 1, "", "get_submodule"], [161, 2, 1, "", "half"], [161, 2, 1, "", "ipu"], [161, 2, 1, "", "load_state_dict"], [161, 2, 1, "", "modules"], [161, 2, 1, "", "named_buffers"], [161, 2, 1, "", "named_children"], [161, 2, 1, "", "named_modules"], [161, 2, 1, "", "named_parameters"], [161, 2, 1, "", "parameters"], [161, 2, 1, "", "register_backward_hook"], [161, 2, 1, "", "register_buffer"], [161, 2, 1, "", "register_forward_hook"], [161, 2, 1, "", "register_forward_pre_hook"], [161, 2, 1, "", "register_full_backward_hook"], [161, 2, 1, "", "register_load_state_dict_post_hook"], [161, 2, 1, "", "register_module"], [161, 2, 1, "", "register_parameter"], [161, 2, 1, "", "requires_grad_"], [161, 2, 1, "", "set_extra_state"], [161, 2, 1, "", "share_memory"], [161, 2, 1, "", "state_dict"], [161, 2, 1, "", "to"], [161, 2, 1, "", "to_empty"], [161, 2, 1, "", "train"], [161, 2, 1, "", "type"], [161, 2, 1, "", "xpu"], [161, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU": [[162, 2, 1, "", "__init__"], [162, 2, 1, "", "add_module"], [162, 2, 1, "", "apply"], [162, 2, 1, "", "bfloat16"], [162, 2, 1, "", "buffers"], [162, 2, 1, "", "children"], [162, 2, 1, "", "cpu"], [162, 2, 1, "", "cuda"], [162, 2, 1, "", "double"], [162, 2, 1, "", "eval"], [162, 2, 1, "", "extra_repr"], [162, 2, 1, "", "float"], [162, 2, 1, "", "forward"], [162, 2, 1, "", "get_buffer"], [162, 2, 1, "", "get_extra_state"], [162, 2, 1, "", "get_parameter"], [162, 2, 1, "", "get_submodule"], [162, 2, 1, "", "half"], [162, 2, 1, "", "ipu"], [162, 2, 1, "", "load_state_dict"], [162, 2, 1, "", "modules"], [162, 2, 1, "", "named_buffers"], [162, 2, 1, "", "named_children"], [162, 2, 1, "", "named_modules"], [162, 2, 1, "", "named_parameters"], [162, 2, 1, "", "parameters"], [162, 2, 1, "", "register_backward_hook"], [162, 2, 1, "", "register_buffer"], [162, 2, 1, "", "register_forward_hook"], [162, 2, 1, "", "register_forward_pre_hook"], [162, 2, 1, "", "register_full_backward_hook"], [162, 2, 1, "", "register_load_state_dict_post_hook"], [162, 2, 1, "", "register_module"], [162, 2, 1, "", "register_parameter"], [162, 2, 1, "", "requires_grad_"], [162, 2, 1, "", "set_extra_state"], [162, 2, 1, "", "share_memory"], [162, 2, 1, "", "state_dict"], [162, 2, 1, "", "to"], [162, 2, 1, "", "to_empty"], [162, 2, 1, "", "train"], [162, 2, 1, "", "type"], [162, 2, 1, "", "xpu"], [162, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter": [[163, 4, 1, "", "H"], [163, 4, 1, "", "T"], [163, 2, 1, "", "__init__"], [163, 2, 1, "", "abs"], [163, 2, 1, "", "abs_"], [163, 2, 1, "", "absolute"], [163, 2, 1, "", "absolute_"], [163, 2, 1, "", "acos"], [163, 2, 1, "", "acos_"], [163, 2, 1, "", "acosh"], [163, 2, 1, "", "acosh_"], [163, 2, 1, "", "add"], [163, 2, 1, "", "add_"], [163, 2, 1, "", "addbmm"], [163, 2, 1, "", "addbmm_"], [163, 2, 1, "", "addcdiv"], [163, 2, 1, "", "addcdiv_"], [163, 2, 1, "", "addcmul"], [163, 2, 1, "", "addcmul_"], [163, 2, 1, "", "addmm"], [163, 2, 1, "", "addmm_"], [163, 2, 1, "", "addmv"], [163, 2, 1, "", "addmv_"], [163, 2, 1, "", "addr"], [163, 2, 1, "", "addr_"], [163, 2, 1, "", "adjoint"], [163, 2, 1, "", "align_as"], [163, 2, 1, "", "align_to"], [163, 2, 1, "", "all"], [163, 2, 1, "", "allclose"], [163, 2, 1, "", "amax"], [163, 2, 1, "", "amin"], [163, 2, 1, "", "aminmax"], [163, 2, 1, "", "angle"], [163, 2, 1, "", "any"], [163, 2, 1, "", "apply_"], [163, 2, 1, "", "arccos"], [163, 2, 1, "", "arccos_"], [163, 2, 1, "", "arccosh"], [163, 2, 1, "", "arccosh_"], [163, 2, 1, "", "arcsin"], [163, 2, 1, "", "arcsin_"], [163, 2, 1, "", "arcsinh"], [163, 2, 1, "", "arcsinh_"], [163, 2, 1, "", "arctan"], [163, 2, 1, "", "arctan2"], [163, 2, 1, "", "arctan2_"], [163, 2, 1, "", "arctan_"], [163, 2, 1, "", "arctanh"], [163, 2, 1, "", "arctanh_"], [163, 2, 1, "", "argmax"], [163, 2, 1, "", "argmin"], [163, 2, 1, "", "argsort"], [163, 2, 1, "", "argwhere"], [163, 2, 1, "", "as_strided"], [163, 2, 1, "", "as_strided_scatter"], [163, 2, 1, "", "as_subclass"], [163, 2, 1, "", "asin"], [163, 2, 1, "", "asin_"], [163, 2, 1, "", "asinh"], [163, 2, 1, "", "asinh_"], [163, 2, 1, "", "atan"], [163, 2, 1, "", "atan2"], [163, 2, 1, "", "atan2_"], [163, 2, 1, "", "atan_"], [163, 2, 1, "", "atanh"], [163, 2, 1, "", "atanh_"], [163, 2, 1, "", "backward"], [163, 2, 1, "", "baddbmm"], [163, 2, 1, "", "baddbmm_"], [163, 2, 1, "", "bernoulli"], [163, 2, 1, "", "bernoulli_"], [163, 2, 1, "", "bfloat16"], [163, 2, 1, "", "bincount"], [163, 2, 1, "", "bitwise_and"], [163, 2, 1, "", "bitwise_and_"], [163, 2, 1, "", "bitwise_left_shift"], [163, 2, 1, "", "bitwise_left_shift_"], [163, 2, 1, "", "bitwise_not"], [163, 2, 1, "", "bitwise_not_"], [163, 2, 1, "", "bitwise_or"], [163, 2, 1, "", "bitwise_or_"], [163, 2, 1, "", "bitwise_right_shift"], [163, 2, 1, "", "bitwise_right_shift_"], [163, 2, 1, "", "bitwise_xor"], [163, 2, 1, "", "bitwise_xor_"], [163, 2, 1, "", "bmm"], [163, 2, 1, "", "bool"], [163, 2, 1, "", "broadcast_to"], [163, 2, 1, "", "byte"], [163, 2, 1, "", "cauchy_"], [163, 2, 1, "", "cdouble"], [163, 2, 1, "", "ceil"], [163, 2, 1, "", "ceil_"], [163, 2, 1, "", "cfloat"], [163, 2, 1, "", "chalf"], [163, 2, 1, "", "char"], [163, 2, 1, "", "cholesky"], [163, 2, 1, "", "cholesky_inverse"], [163, 2, 1, "", "cholesky_solve"], [163, 2, 1, "", "chunk"], [163, 2, 1, "", "clamp"], [163, 2, 1, "", "clamp_"], [163, 2, 1, "", "clip"], [163, 2, 1, "", "clip_"], [163, 2, 1, "", "clone"], [163, 2, 1, "", "coalesce"], [163, 2, 1, "", "col_indices"], [163, 2, 1, "", "conj"], [163, 2, 1, "", "conj_physical"], [163, 2, 1, "", "conj_physical_"], [163, 2, 1, "", "contiguous"], [163, 2, 1, "", "copy_"], [163, 2, 1, "", "copysign"], [163, 2, 1, "", "copysign_"], [163, 2, 1, "", "corrcoef"], [163, 2, 1, "", "cos"], [163, 2, 1, "", "cos_"], [163, 2, 1, "", "cosh"], [163, 2, 1, "", "cosh_"], [163, 2, 1, "", "count_nonzero"], [163, 2, 1, "", "cov"], [163, 2, 1, "", "cpu"], [163, 2, 1, "", "cross"], [163, 2, 1, "", "crow_indices"], [163, 2, 1, "", "cuda"], [163, 2, 1, "", "cummax"], [163, 2, 1, "", "cummin"], [163, 2, 1, "", "cumprod"], [163, 2, 1, "", "cumprod_"], [163, 2, 1, "", "cumsum"], [163, 2, 1, "", "cumsum_"], [163, 2, 1, "", "data_ptr"], [163, 2, 1, "", "deg2rad"], [163, 2, 1, "", "deg2rad_"], [163, 2, 1, "", "dense_dim"], [163, 2, 1, "", "dequantize"], [163, 2, 1, "", "det"], [163, 2, 1, "", "detach"], [163, 2, 1, "", "detach_"], [163, 4, 1, "", "device"], [163, 2, 1, "", "diag"], [163, 2, 1, "", "diag_embed"], [163, 2, 1, "", "diagflat"], [163, 2, 1, "", "diagonal"], [163, 2, 1, "", "diagonal_scatter"], [163, 2, 1, "", "diff"], [163, 2, 1, "", "digamma"], [163, 2, 1, "", "digamma_"], [163, 2, 1, "", "dim"], [163, 2, 1, "", "dist"], [163, 2, 1, "", "div"], [163, 2, 1, "", "div_"], [163, 2, 1, "", "divide"], [163, 2, 1, "", "divide_"], [163, 2, 1, "", "dot"], [163, 2, 1, "", "double"], [163, 2, 1, "", "dsplit"], [163, 2, 1, "", "element_size"], [163, 2, 1, "", "eq"], [163, 2, 1, "", "eq_"], [163, 2, 1, "", "equal"], [163, 2, 1, "", "erf"], [163, 2, 1, "", "erf_"], [163, 2, 1, "", "erfc"], [163, 2, 1, "", "erfc_"], [163, 2, 1, "", "erfinv"], [163, 2, 1, "", "erfinv_"], [163, 2, 1, "", "exp"], [163, 2, 1, "", "exp2"], [163, 2, 1, "", "exp2_"], [163, 2, 1, "", "exp_"], [163, 2, 1, "", "expand"], [163, 2, 1, "", "expand_as"], [163, 2, 1, "", "expm1"], [163, 2, 1, "", "expm1_"], [163, 2, 1, "", "exponential_"], [163, 2, 1, "", "fill_"], [163, 2, 1, "", "fill_diagonal_"], [163, 2, 1, "", "fix"], [163, 2, 1, "", "fix_"], [163, 2, 1, "", "flatten"], [163, 2, 1, "", "flip"], [163, 2, 1, "", "fliplr"], [163, 2, 1, "", "flipud"], [163, 2, 1, "", "float"], [163, 2, 1, "", "float_power"], [163, 2, 1, "", "float_power_"], [163, 2, 1, "", "floor"], [163, 2, 1, "", "floor_"], [163, 2, 1, "", "floor_divide"], [163, 2, 1, "", "floor_divide_"], [163, 2, 1, "", "fmax"], [163, 2, 1, "", "fmin"], [163, 2, 1, "", "fmod"], [163, 2, 1, "", "fmod_"], [163, 2, 1, "", "frac"], [163, 2, 1, "", "frac_"], [163, 2, 1, "", "frexp"], [163, 2, 1, "", "gather"], [163, 2, 1, "", "gcd"], [163, 2, 1, "", "gcd_"], [163, 2, 1, "", "ge"], [163, 2, 1, "", "ge_"], [163, 2, 1, "", "geometric_"], [163, 2, 1, "", "geqrf"], [163, 2, 1, "", "ger"], [163, 2, 1, "", "get_device"], [163, 4, 1, "", "grad"], [163, 2, 1, "", "greater"], [163, 2, 1, "", "greater_"], [163, 2, 1, "", "greater_equal"], [163, 2, 1, "", "greater_equal_"], [163, 2, 1, "", "gt"], [163, 2, 1, "", "gt_"], [163, 2, 1, "", "half"], [163, 2, 1, "", "hardshrink"], [163, 2, 1, "", "has_names"], [163, 2, 1, "", "heaviside"], [163, 2, 1, "", "heaviside_"], [163, 2, 1, "", "histc"], [163, 2, 1, "", "histogram"], [163, 2, 1, "", "hsplit"], [163, 2, 1, "", "hypot"], [163, 2, 1, "", "hypot_"], [163, 2, 1, "", "i0"], [163, 2, 1, "", "i0_"], [163, 2, 1, "", "igamma"], [163, 2, 1, "", "igamma_"], [163, 2, 1, "", "igammac"], [163, 2, 1, "", "igammac_"], [163, 4, 1, "", "imag"], [163, 2, 1, "", "index_add"], [163, 2, 1, "", "index_add_"], [163, 2, 1, "", "index_copy"], [163, 2, 1, "", "index_copy_"], [163, 2, 1, "", "index_fill"], [163, 2, 1, "", "index_fill_"], [163, 2, 1, "", "index_put"], [163, 2, 1, "", "index_put_"], [163, 2, 1, "", "index_reduce_"], [163, 2, 1, "", "index_select"], [163, 2, 1, "", "indices"], [163, 2, 1, "", "inner"], [163, 2, 1, "", "int"], [163, 2, 1, "", "int_repr"], [163, 2, 1, "", "inverse"], [163, 2, 1, "", "ipu"], [163, 2, 1, "", "is_coalesced"], [163, 2, 1, "", "is_complex"], [163, 2, 1, "", "is_conj"], [163, 2, 1, "", "is_contiguous"], [163, 4, 1, "", "is_cpu"], [163, 4, 1, "", "is_cuda"], [163, 2, 1, "", "is_floating_point"], [163, 2, 1, "", "is_inference"], [163, 4, 1, "", "is_ipu"], [163, 4, 1, "", "is_leaf"], [163, 4, 1, "", "is_meta"], [163, 4, 1, "", "is_mps"], [163, 2, 1, "", "is_neg"], [163, 2, 1, "", "is_pinned"], [163, 4, 1, "", "is_quantized"], [163, 2, 1, "", "is_set_to"], [163, 2, 1, "", "is_shared"], [163, 2, 1, "", "is_signed"], [163, 4, 1, "", "is_sparse"], [163, 4, 1, "", "is_sparse_csr"], [163, 4, 1, "", "is_xpu"], [163, 2, 1, "", "isclose"], [163, 2, 1, "", "isfinite"], [163, 2, 1, "", "isinf"], [163, 2, 1, "", "isnan"], [163, 2, 1, "", "isneginf"], [163, 2, 1, "", "isposinf"], [163, 2, 1, "", "isreal"], [163, 2, 1, "", "istft"], [163, 2, 1, "", "item"], [163, 2, 1, "", "kron"], [163, 2, 1, "", "kthvalue"], [163, 2, 1, "", "lcm"], [163, 2, 1, "", "lcm_"], [163, 2, 1, "", "ldexp"], [163, 2, 1, "", "ldexp_"], [163, 2, 1, "", "le"], [163, 2, 1, "", "le_"], [163, 2, 1, "", "lerp"], [163, 2, 1, "", "lerp_"], [163, 2, 1, "", "less"], [163, 2, 1, "", "less_"], [163, 2, 1, "", "less_equal"], [163, 2, 1, "", "less_equal_"], [163, 2, 1, "", "lgamma"], [163, 2, 1, "", "lgamma_"], [163, 2, 1, "", "log"], [163, 2, 1, "", "log10"], [163, 2, 1, "", "log10_"], [163, 2, 1, "", "log1p"], [163, 2, 1, "", "log1p_"], [163, 2, 1, "", "log2"], [163, 2, 1, "", "log2_"], [163, 2, 1, "", "log_"], [163, 2, 1, "", "log_normal_"], [163, 2, 1, "", "logaddexp"], [163, 2, 1, "", "logaddexp2"], [163, 2, 1, "", "logcumsumexp"], [163, 2, 1, "", "logdet"], [163, 2, 1, "", "logical_and"], [163, 2, 1, "", "logical_and_"], [163, 2, 1, "", "logical_not"], [163, 2, 1, "", "logical_not_"], [163, 2, 1, "", "logical_or"], [163, 2, 1, "", "logical_or_"], [163, 2, 1, "", "logical_xor"], [163, 2, 1, "", "logical_xor_"], [163, 2, 1, "", "logit"], [163, 2, 1, "", "logit_"], [163, 2, 1, "", "logsumexp"], [163, 2, 1, "", "long"], [163, 2, 1, "", "lt"], [163, 2, 1, "", "lt_"], [163, 2, 1, "", "lu"], [163, 2, 1, "", "lu_solve"], [163, 4, 1, "", "mH"], [163, 4, 1, "", "mT"], [163, 2, 1, "", "map_"], [163, 2, 1, "", "masked_fill"], [163, 2, 1, "", "masked_fill_"], [163, 2, 1, "", "masked_scatter"], [163, 2, 1, "", "masked_scatter_"], [163, 2, 1, "", "masked_select"], [163, 2, 1, "", "matmul"], [163, 2, 1, "", "matrix_exp"], [163, 2, 1, "", "matrix_power"], [163, 2, 1, "", "max"], [163, 2, 1, "", "maximum"], [163, 2, 1, "", "mean"], [163, 2, 1, "", "median"], [163, 2, 1, "", "min"], [163, 2, 1, "", "minimum"], [163, 2, 1, "", "mm"], [163, 2, 1, "", "mode"], [163, 2, 1, "", "moveaxis"], [163, 2, 1, "", "movedim"], [163, 2, 1, "", "msort"], [163, 2, 1, "", "mul"], [163, 2, 1, "", "mul_"], [163, 2, 1, "", "multinomial"], [163, 2, 1, "", "multiply"], [163, 2, 1, "", "multiply_"], [163, 2, 1, "", "mv"], [163, 2, 1, "", "mvlgamma"], [163, 2, 1, "", "mvlgamma_"], [163, 4, 1, "", "names"], [163, 2, 1, "", "nan_to_num"], [163, 2, 1, "", "nan_to_num_"], [163, 2, 1, "", "nanmean"], [163, 2, 1, "", "nanmedian"], [163, 2, 1, "", "nanquantile"], [163, 2, 1, "", "nansum"], [163, 2, 1, "", "narrow"], [163, 2, 1, "", "narrow_copy"], [163, 4, 1, "", "ndim"], [163, 2, 1, "", "ndimension"], [163, 2, 1, "", "ne"], [163, 2, 1, "", "ne_"], [163, 2, 1, "", "neg"], [163, 2, 1, "", "neg_"], [163, 2, 1, "", "negative"], [163, 2, 1, "", "negative_"], [163, 2, 1, "", "nelement"], [163, 2, 1, "", "new_empty"], [163, 2, 1, "", "new_empty_strided"], [163, 2, 1, "", "new_full"], [163, 2, 1, "", "new_ones"], [163, 2, 1, "", "new_tensor"], [163, 2, 1, "", "new_zeros"], [163, 2, 1, "", "nextafter"], [163, 2, 1, "", "nextafter_"], [163, 2, 1, "", "nonzero"], [163, 2, 1, "", "norm"], [163, 2, 1, "", "normal_"], [163, 2, 1, "", "not_equal"], [163, 2, 1, "", "not_equal_"], [163, 2, 1, "", "numel"], [163, 2, 1, "", "numpy"], [163, 2, 1, "", "orgqr"], [163, 2, 1, "", "ormqr"], [163, 2, 1, "", "outer"], [163, 2, 1, "", "permute"], [163, 2, 1, "", "pin_memory"], [163, 2, 1, "", "pinverse"], [163, 2, 1, "", "polygamma"], [163, 2, 1, "", "polygamma_"], [163, 2, 1, "", "positive"], [163, 2, 1, "", "pow"], [163, 2, 1, "", "pow_"], [163, 2, 1, "", "prod"], [163, 2, 1, "", "put"], [163, 2, 1, "", "put_"], [163, 2, 1, "", "q_per_channel_axis"], [163, 2, 1, "", "q_per_channel_scales"], [163, 2, 1, "", "q_per_channel_zero_points"], [163, 2, 1, "", "q_scale"], [163, 2, 1, "", "q_zero_point"], [163, 2, 1, "", "qr"], [163, 2, 1, "", "qscheme"], [163, 2, 1, "", "quantile"], [163, 2, 1, "", "rad2deg"], [163, 2, 1, "", "rad2deg_"], [163, 2, 1, "", "random_"], [163, 2, 1, "", "ravel"], [163, 4, 1, "", "real"], [163, 2, 1, "", "reciprocal"], [163, 2, 1, "", "reciprocal_"], [163, 2, 1, "", "record_stream"], [163, 2, 1, "", "refine_names"], [163, 2, 1, "", "register_hook"], [163, 2, 1, "", "remainder"], [163, 2, 1, "", "remainder_"], [163, 2, 1, "", "rename"], [163, 2, 1, "", "rename_"], [163, 2, 1, "", "renorm"], [163, 2, 1, "", "renorm_"], [163, 2, 1, "", "repeat"], [163, 2, 1, "", "repeat_interleave"], [163, 4, 1, "", "requires_grad"], [163, 2, 1, "", "requires_grad_"], [163, 2, 1, "", "reshape"], [163, 2, 1, "", "reshape_as"], [163, 2, 1, "", "resize_"], [163, 2, 1, "", "resize_as_"], [163, 2, 1, "", "resolve_conj"], [163, 2, 1, "", "resolve_neg"], [163, 2, 1, "", "retain_grad"], [163, 4, 1, "", "retains_grad"], [163, 2, 1, "", "roll"], [163, 2, 1, "", "rot90"], [163, 2, 1, "", "round"], [163, 2, 1, "", "round_"], [163, 2, 1, "", "rsqrt"], [163, 2, 1, "", "rsqrt_"], [163, 2, 1, "", "scatter"], [163, 2, 1, "", "scatter_"], [163, 2, 1, "", "scatter_add"], [163, 2, 1, "", "scatter_add_"], [163, 2, 1, "", "scatter_reduce"], [163, 2, 1, "", "scatter_reduce_"], [163, 2, 1, "", "select"], [163, 2, 1, "", "select_scatter"], [163, 2, 1, "", "set_"], [163, 2, 1, "", "sgn"], [163, 2, 1, "", "sgn_"], [163, 2, 1, "", "share_memory_"], [163, 2, 1, "", "short"], [163, 2, 1, "", "sigmoid"], [163, 2, 1, "", "sigmoid_"], [163, 2, 1, "", "sign"], [163, 2, 1, "", "sign_"], [163, 2, 1, "", "signbit"], [163, 2, 1, "", "sin"], [163, 2, 1, "", "sin_"], [163, 2, 1, "", "sinc"], [163, 2, 1, "", "sinc_"], [163, 2, 1, "", "sinh"], [163, 2, 1, "", "sinh_"], [163, 2, 1, "", "size"], [163, 2, 1, "", "slice_scatter"], [163, 2, 1, "", "slogdet"], [163, 2, 1, "", "smm"], [163, 2, 1, "", "sort"], [163, 2, 1, "", "sparse_dim"], [163, 2, 1, "", "sparse_mask"], [163, 2, 1, "", "sparse_resize_"], [163, 2, 1, "", "sparse_resize_and_clear_"], [163, 2, 1, "", "split"], [163, 2, 1, "", "sqrt"], [163, 2, 1, "", "sqrt_"], [163, 2, 1, "", "square"], [163, 2, 1, "", "square_"], [163, 2, 1, "", "squeeze"], [163, 2, 1, "", "squeeze_"], [163, 2, 1, "", "sspaddmm"], [163, 2, 1, "", "std"], [163, 2, 1, "", "stft"], [163, 2, 1, "", "storage"], [163, 2, 1, "", "storage_offset"], [163, 2, 1, "", "storage_type"], [163, 2, 1, "", "stride"], [163, 2, 1, "", "sub"], [163, 2, 1, "", "sub_"], [163, 2, 1, "", "subtract"], [163, 2, 1, "", "subtract_"], [163, 2, 1, "", "sum"], [163, 2, 1, "", "sum_to_size"], [163, 2, 1, "", "svd"], [163, 2, 1, "", "swapaxes"], [163, 2, 1, "", "swapaxes_"], [163, 2, 1, "", "swapdims"], [163, 2, 1, "", "swapdims_"], [163, 2, 1, "", "symeig"], [163, 2, 1, "", "t"], [163, 2, 1, "", "t_"], [163, 2, 1, "", "take"], [163, 2, 1, "", "take_along_dim"], [163, 2, 1, "", "tan"], [163, 2, 1, "", "tan_"], [163, 2, 1, "", "tanh"], [163, 2, 1, "", "tanh_"], [163, 2, 1, "", "tensor_split"], [163, 2, 1, "", "tile"], [163, 2, 1, "", "to"], [163, 2, 1, "", "to_dense"], [163, 2, 1, "", "to_mkldnn"], [163, 2, 1, "", "to_padded_tensor"], [163, 2, 1, "", "to_sparse"], [163, 2, 1, "", "to_sparse_bsc"], [163, 2, 1, "", "to_sparse_bsr"], [163, 2, 1, "", "to_sparse_coo"], [163, 2, 1, "", "to_sparse_csc"], [163, 2, 1, "", "to_sparse_csr"], [163, 2, 1, "", "tolist"], [163, 2, 1, "", "topk"], [163, 2, 1, "", "trace"], [163, 2, 1, "", "transpose"], [163, 2, 1, "", "transpose_"], [163, 2, 1, "", "triangular_solve"], [163, 2, 1, "", "tril"], [163, 2, 1, "", "tril_"], [163, 2, 1, "", "triu"], [163, 2, 1, "", "triu_"], [163, 2, 1, "", "true_divide"], [163, 2, 1, "", "true_divide_"], [163, 2, 1, "", "trunc"], [163, 2, 1, "", "trunc_"], [163, 2, 1, "", "type"], [163, 2, 1, "", "type_as"], [163, 2, 1, "", "unbind"], [163, 2, 1, "", "unflatten"], [163, 2, 1, "", "unfold"], [163, 2, 1, "", "uniform_"], [163, 2, 1, "", "unique"], [163, 2, 1, "", "unique_consecutive"], [163, 2, 1, "", "unsafe_chunk"], [163, 2, 1, "", "unsafe_split"], [163, 2, 1, "", "unsqueeze"], [163, 2, 1, "", "unsqueeze_"], [163, 2, 1, "", "values"], [163, 2, 1, "", "var"], [163, 2, 1, "", "vdot"], [163, 2, 1, "", "view"], [163, 2, 1, "", "view_as"], [163, 2, 1, "", "vsplit"], [163, 2, 1, "", "where"], [163, 2, 1, "", "xlogy"], [163, 2, 1, "", "xlogy_"], [163, 2, 1, "", "xpu"], [163, 2, 1, "", "zero_"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU": [[164, 2, 1, "", "__init__"], [164, 2, 1, "", "add_module"], [164, 2, 1, "", "apply"], [164, 2, 1, "", "bfloat16"], [164, 2, 1, "", "buffers"], [164, 2, 1, "", "children"], [164, 2, 1, "", "cpu"], [164, 2, 1, "", "cuda"], [164, 2, 1, "", "double"], [164, 2, 1, "", "eval"], [164, 2, 1, "", "extra_repr"], [164, 2, 1, "", "float"], [164, 2, 1, "", "forward"], [164, 2, 1, "", "get_buffer"], [164, 2, 1, "", "get_extra_state"], [164, 2, 1, "", "get_parameter"], [164, 2, 1, "", "get_submodule"], [164, 2, 1, "", "half"], [164, 2, 1, "", "ipu"], [164, 2, 1, "", "load_state_dict"], [164, 2, 1, "", "modules"], [164, 2, 1, "", "named_buffers"], [164, 2, 1, "", "named_children"], [164, 2, 1, "", "named_modules"], [164, 2, 1, "", "named_parameters"], [164, 2, 1, "", "parameters"], [164, 2, 1, "", "register_backward_hook"], [164, 2, 1, "", "register_buffer"], [164, 2, 1, "", "register_forward_hook"], [164, 2, 1, "", "register_forward_pre_hook"], [164, 2, 1, "", "register_full_backward_hook"], [164, 2, 1, "", "register_load_state_dict_post_hook"], [164, 2, 1, "", "register_module"], [164, 2, 1, "", "register_parameter"], [164, 2, 1, "", "requires_grad_"], [164, 2, 1, "", "set_extra_state"], [164, 2, 1, "", "share_memory"], [164, 2, 1, "", "state_dict"], [164, 2, 1, "", "to"], [164, 2, 1, "", "to_empty"], [164, 2, 1, "", "train"], [164, 2, 1, "", "type"], [164, 2, 1, "", "xpu"], [164, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square": [[165, 2, 1, "", "__init__"], [165, 2, 1, "", "add_module"], [165, 2, 1, "", "apply"], [165, 2, 1, "", "bfloat16"], [165, 2, 1, "", "buffers"], [165, 2, 1, "", "children"], [165, 2, 1, "", "cpu"], [165, 2, 1, "", "cuda"], [165, 2, 1, "", "double"], [165, 2, 1, "", "eval"], [165, 2, 1, "", "extra_repr"], [165, 2, 1, "", "float"], [165, 2, 1, "", "forward"], [165, 2, 1, "", "get_buffer"], [165, 2, 1, "", "get_extra_state"], [165, 2, 1, "", "get_parameter"], [165, 2, 1, "", "get_submodule"], [165, 2, 1, "", "half"], [165, 2, 1, "", "ipu"], [165, 2, 1, "", "load_state_dict"], [165, 2, 1, "", "modules"], [165, 2, 1, "", "named_buffers"], [165, 2, 1, "", "named_children"], [165, 2, 1, "", "named_modules"], [165, 2, 1, "", "named_parameters"], [165, 2, 1, "", "parameters"], [165, 2, 1, "", "register_backward_hook"], [165, 2, 1, "", "register_buffer"], [165, 2, 1, "", "register_forward_hook"], [165, 2, 1, "", "register_forward_pre_hook"], [165, 2, 1, "", "register_full_backward_hook"], [165, 2, 1, "", "register_load_state_dict_post_hook"], [165, 2, 1, "", "register_module"], [165, 2, 1, "", "register_parameter"], [165, 2, 1, "", "requires_grad_"], [165, 2, 1, "", "set_extra_state"], [165, 2, 1, "", "share_memory"], [165, 2, 1, "", "state_dict"], [165, 2, 1, "", "to"], [165, 2, 1, "", "to_empty"], [165, 2, 1, "", "train"], [165, 2, 1, "", "type"], [165, 2, 1, "", "xpu"], [165, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU": [[166, 2, 1, "", "__init__"], [166, 2, 1, "", "add_module"], [166, 2, 1, "", "apply"], [166, 2, 1, "", "bfloat16"], [166, 2, 1, "", "buffers"], [166, 2, 1, "", "children"], [166, 2, 1, "", "cpu"], [166, 2, 1, "", "cuda"], [166, 2, 1, "", "double"], [166, 2, 1, "", "eval"], [166, 2, 1, "", "float"], [166, 2, 1, "", "forward"], [166, 2, 1, "", "get_buffer"], [166, 2, 1, "", "get_extra_state"], [166, 2, 1, "", "get_parameter"], [166, 2, 1, "", "get_submodule"], [166, 2, 1, "", "half"], [166, 2, 1, "", "ipu"], [166, 2, 1, "", "load_state_dict"], [166, 2, 1, "", "modules"], [166, 2, 1, "", "named_buffers"], [166, 2, 1, "", "named_children"], [166, 2, 1, "", "named_modules"], [166, 2, 1, "", "named_parameters"], [166, 2, 1, "", "parameters"], [166, 2, 1, "", "register_backward_hook"], [166, 2, 1, "", "register_buffer"], [166, 2, 1, "", "register_forward_hook"], [166, 2, 1, "", "register_forward_pre_hook"], [166, 2, 1, "", "register_full_backward_hook"], [166, 2, 1, "", "register_load_state_dict_post_hook"], [166, 2, 1, "", "register_module"], [166, 2, 1, "", "register_parameter"], [166, 2, 1, "", "requires_grad_"], [166, 2, 1, "", "set_extra_state"], [166, 2, 1, "", "share_memory"], [166, 2, 1, "", "state_dict"], [166, 2, 1, "", "to"], [166, 2, 1, "", "to_empty"], [166, 2, 1, "", "train"], [166, 2, 1, "", "type"], [166, 2, 1, "", "xpu"], [166, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu": [[167, 2, 1, "", "__init__"], [167, 2, 1, "", "add_module"], [167, 2, 1, "", "apply"], [167, 2, 1, "", "bfloat16"], [167, 2, 1, "", "buffers"], [167, 2, 1, "", "children"], [167, 2, 1, "", "cpu"], [167, 2, 1, "", "cuda"], [167, 2, 1, "", "double"], [167, 2, 1, "", "eval"], [167, 2, 1, "", "float"], [167, 2, 1, "", "get_buffer"], [167, 2, 1, "", "get_extra_state"], [167, 2, 1, "", "get_parameter"], [167, 2, 1, "", "get_submodule"], [167, 2, 1, "", "half"], [167, 2, 1, "", "ipu"], [167, 2, 1, "", "load_state_dict"], [167, 2, 1, "", "modules"], [167, 2, 1, "", "named_buffers"], [167, 2, 1, "", "named_children"], [167, 2, 1, "", "named_modules"], [167, 2, 1, "", "named_parameters"], [167, 2, 1, "", "parameters"], [167, 2, 1, "", "register_backward_hook"], [167, 2, 1, "", "register_buffer"], [167, 2, 1, "", "register_forward_hook"], [167, 2, 1, "", "register_forward_pre_hook"], [167, 2, 1, "", "register_full_backward_hook"], [167, 2, 1, "", "register_load_state_dict_post_hook"], [167, 2, 1, "", "register_module"], [167, 2, 1, "", "register_parameter"], [167, 2, 1, "", "requires_grad_"], [167, 2, 1, "", "set_extra_state"], [167, 2, 1, "", "share_memory"], [167, 2, 1, "", "state_dict"], [167, 2, 1, "", "to"], [167, 2, 1, "", "to_empty"], [167, 2, 1, "", "train"], [167, 2, 1, "", "type"], [167, 2, 1, "", "xpu"], [167, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.he_dl_lib.timers": [[187, 5, 1, "", "get_logger"], [188, 5, 1, "", "perf_counter"]], "pyhelayers.mltoolbox.model": [[190, 0, 0, "-", "DNN_factory"], [199, 0, 0, "-", "alexnet_fhe"], [201, 0, 0, "-", "lenet5"], [204, 0, 0, "-", "nn_module"], [206, 0, 0, "-", "squeezenet"], [210, 0, 0, "-", "squeezenetchet"]], "pyhelayers.mltoolbox.model.DNN_factory": [[191, 1, 1, "", "Lenet5"], [192, 1, 1, "", "SqueezeNet1_0_FHE"], [193, 1, 1, "", "SqueezeNet1_1_FHE"], [194, 1, 1, "", "SqueezeNetCHET"], [195, 1, 1, "", "alexnet_fhe"], [196, 5, 1, "", "get_logger"], [197, 5, 1, "", "get_model"], [198, 5, 1, "", "get_model_by_name"]], "pyhelayers.mltoolbox.model.DNN_factory.Lenet5": [[191, 2, 1, "", "__init__"], [191, 2, 1, "", "addBatchNormAfterActivation"], [191, 2, 1, "", "add_batch_norm_after_conv"], [191, 2, 1, "", "add_batch_norm_before_conv"], [191, 2, 1, "", "add_module"], [191, 2, 1, "", "apply"], [191, 2, 1, "", "assertSize"], [191, 2, 1, "", "bfloat16"], [191, 1, 1, "", "bn_info"], [191, 2, 1, "", "buffers"], [191, 2, 1, "", "children"], [191, 2, 1, "", "cpu"], [191, 2, 1, "", "cuda"], [191, 2, 1, "", "double"], [191, 2, 1, "", "eval"], [191, 2, 1, "", "extra_repr"], [191, 2, 1, "", "float"], [191, 2, 1, "", "get_buffer"], [191, 2, 1, "", "get_extra_state"], [191, 2, 1, "", "get_input_size"], [191, 2, 1, "", "get_parameter"], [191, 2, 1, "", "get_submodule"], [191, 2, 1, "", "half"], [191, 2, 1, "", "ipu"], [191, 2, 1, "", "load_state_dict"], [191, 2, 1, "", "make_fhe_friendly"], [191, 2, 1, "", "modules"], [191, 2, 1, "", "named_buffers"], [191, 2, 1, "", "named_children"], [191, 2, 1, "", "named_modules"], [191, 2, 1, "", "named_parameters"], [191, 2, 1, "", "parameters"], [191, 2, 1, "", "post_process_activations"], [191, 2, 1, "", "register_backward_hook"], [191, 2, 1, "", "register_buffer"], [191, 2, 1, "", "register_forward_hook"], [191, 2, 1, "", "register_forward_pre_hook"], [191, 2, 1, "", "register_full_backward_hook"], [191, 2, 1, "", "register_load_state_dict_post_hook"], [191, 2, 1, "", "register_module"], [191, 2, 1, "", "register_parameter"], [191, 2, 1, "", "requires_grad_"], [191, 2, 1, "", "set_extra_state"], [191, 2, 1, "", "set_max_pooling_to_avg"], [191, 2, 1, "", "share_memory"], [191, 2, 1, "", "state_dict"], [191, 2, 1, "", "to"], [191, 2, 1, "", "to_empty"], [191, 2, 1, "", "train"], [191, 2, 1, "", "type"], [191, 2, 1, "", "xpu"], [191, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE": [[192, 2, 1, "", "__init__"], [192, 2, 1, "", "addBatchNormAfterActivation"], [192, 2, 1, "", "add_batch_norm_after_conv"], [192, 2, 1, "", "add_batch_norm_before_conv"], [192, 2, 1, "", "add_module"], [192, 2, 1, "", "apply"], [192, 2, 1, "", "assertSize"], [192, 2, 1, "", "bfloat16"], [192, 1, 1, "", "bn_info"], [192, 2, 1, "", "buffers"], [192, 2, 1, "", "children"], [192, 2, 1, "", "cpu"], [192, 2, 1, "", "cuda"], [192, 2, 1, "", "double"], [192, 2, 1, "", "eval"], [192, 2, 1, "", "extra_repr"], [192, 2, 1, "", "float"], [192, 2, 1, "", "get_buffer"], [192, 2, 1, "", "get_extra_state"], [192, 2, 1, "", "get_input_size"], [192, 2, 1, "", "get_parameter"], [192, 2, 1, "", "get_submodule"], [192, 2, 1, "", "half"], [192, 2, 1, "", "ipu"], [192, 2, 1, "", "load_state_dict"], [192, 2, 1, "", "make_fhe_friendly"], [192, 2, 1, "", "modules"], [192, 2, 1, "", "named_buffers"], [192, 2, 1, "", "named_children"], [192, 2, 1, "", "named_modules"], [192, 2, 1, "", "named_parameters"], [192, 2, 1, "", "parameters"], [192, 2, 1, "", "post_process_activations"], [192, 2, 1, "", "register_backward_hook"], [192, 2, 1, "", "register_buffer"], [192, 2, 1, "", "register_forward_hook"], [192, 2, 1, "", "register_forward_pre_hook"], [192, 2, 1, "", "register_full_backward_hook"], [192, 2, 1, "", "register_load_state_dict_post_hook"], [192, 2, 1, "", "register_module"], [192, 2, 1, "", "register_parameter"], [192, 2, 1, "", "requires_grad_"], [192, 2, 1, "", "set_extra_state"], [192, 2, 1, "", "set_max_pooling_to_avg"], [192, 2, 1, "", "share_memory"], [192, 2, 1, "", "state_dict"], [192, 2, 1, "", "to"], [192, 2, 1, "", "to_empty"], [192, 2, 1, "", "train"], [192, 2, 1, "", "type"], [192, 2, 1, "", "xpu"], [192, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE": [[193, 2, 1, "", "__init__"], [193, 2, 1, "", "addBatchNormAfterActivation"], [193, 2, 1, "", "add_batch_norm_after_conv"], [193, 2, 1, "", "add_batch_norm_before_conv"], [193, 2, 1, "", "add_module"], [193, 2, 1, "", "apply"], [193, 2, 1, "", "assertSize"], [193, 2, 1, "", "bfloat16"], [193, 1, 1, "", "bn_info"], [193, 2, 1, "", "buffers"], [193, 2, 1, "", "children"], [193, 2, 1, "", "cpu"], [193, 2, 1, "", "cuda"], [193, 2, 1, "", "double"], [193, 2, 1, "", "eval"], [193, 2, 1, "", "extra_repr"], [193, 2, 1, "", "float"], [193, 2, 1, "", "get_buffer"], [193, 2, 1, "", "get_extra_state"], [193, 2, 1, "", "get_input_size"], [193, 2, 1, "", "get_parameter"], [193, 2, 1, "", "get_submodule"], [193, 2, 1, "", "half"], [193, 2, 1, "", "ipu"], [193, 2, 1, "", "load_state_dict"], [193, 2, 1, "", "make_fhe_friendly"], [193, 2, 1, "", "modules"], [193, 2, 1, "", "named_buffers"], [193, 2, 1, "", "named_children"], [193, 2, 1, "", "named_modules"], [193, 2, 1, "", "named_parameters"], [193, 2, 1, "", "parameters"], [193, 2, 1, "", "post_process_activations"], [193, 2, 1, "", "register_backward_hook"], [193, 2, 1, "", "register_buffer"], [193, 2, 1, "", "register_forward_hook"], [193, 2, 1, "", "register_forward_pre_hook"], [193, 2, 1, "", "register_full_backward_hook"], [193, 2, 1, "", "register_load_state_dict_post_hook"], [193, 2, 1, "", "register_module"], [193, 2, 1, "", "register_parameter"], [193, 2, 1, "", "requires_grad_"], [193, 2, 1, "", "set_extra_state"], [193, 2, 1, "", "set_max_pooling_to_avg"], [193, 2, 1, "", "share_memory"], [193, 2, 1, "", "state_dict"], [193, 2, 1, "", "to"], [193, 2, 1, "", "to_empty"], [193, 2, 1, "", "train"], [193, 2, 1, "", "type"], [193, 2, 1, "", "xpu"], [193, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET": [[194, 2, 1, "", "__init__"], [194, 2, 1, "", "addBatchNormAfterActivation"], [194, 2, 1, "", "add_batch_norm_after_conv"], [194, 2, 1, "", "add_batch_norm_before_conv"], [194, 2, 1, "", "add_module"], [194, 2, 1, "", "apply"], [194, 2, 1, "", "assertSize"], [194, 2, 1, "", "bfloat16"], [194, 1, 1, "", "bn_info"], [194, 2, 1, "", "buffers"], [194, 2, 1, "", "children"], [194, 2, 1, "", "cpu"], [194, 2, 1, "", "cuda"], [194, 2, 1, "", "double"], [194, 2, 1, "", "eval"], [194, 2, 1, "", "extra_repr"], [194, 2, 1, "", "float"], [194, 2, 1, "", "get_buffer"], [194, 2, 1, "", "get_extra_state"], [194, 2, 1, "", "get_input_size"], [194, 2, 1, "", "get_parameter"], [194, 2, 1, "", "get_submodule"], [194, 2, 1, "", "half"], [194, 2, 1, "", "ipu"], [194, 2, 1, "", "load_state_dict"], [194, 2, 1, "", "make_fhe_friendly"], [194, 2, 1, "", "modules"], [194, 2, 1, "", "named_buffers"], [194, 2, 1, "", "named_children"], [194, 2, 1, "", "named_modules"], [194, 2, 1, "", "named_parameters"], [194, 2, 1, "", "parameters"], [194, 2, 1, "", "post_process_activations"], [194, 2, 1, "", "register_backward_hook"], [194, 2, 1, "", "register_buffer"], [194, 2, 1, "", "register_forward_hook"], [194, 2, 1, "", "register_forward_pre_hook"], [194, 2, 1, "", "register_full_backward_hook"], [194, 2, 1, "", "register_load_state_dict_post_hook"], [194, 2, 1, "", "register_module"], [194, 2, 1, "", "register_parameter"], [194, 2, 1, "", "requires_grad_"], [194, 2, 1, "", "set_extra_state"], [194, 2, 1, "", "set_max_pooling_to_avg"], [194, 2, 1, "", "share_memory"], [194, 2, 1, "", "state_dict"], [194, 2, 1, "", "to"], [194, 2, 1, "", "to_empty"], [194, 2, 1, "", "train"], [194, 2, 1, "", "type"], [194, 2, 1, "", "xpu"], [194, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe": [[195, 2, 1, "", "__init__"], [195, 2, 1, "", "addBatchNormAfterActivation"], [195, 2, 1, "", "add_batch_norm_after_conv"], [195, 2, 1, "", "add_batch_norm_before_conv"], [195, 2, 1, "", "add_module"], [195, 2, 1, "", "apply"], [195, 2, 1, "", "assertSize"], [195, 2, 1, "", "bfloat16"], [195, 1, 1, "", "bn_info"], [195, 2, 1, "", "buffers"], [195, 2, 1, "", "children"], [195, 2, 1, "", "cpu"], [195, 2, 1, "", "cuda"], [195, 2, 1, "", "double"], [195, 2, 1, "", "eval"], [195, 2, 1, "", "extra_repr"], [195, 2, 1, "", "float"], [195, 2, 1, "", "get_buffer"], [195, 2, 1, "", "get_extra_state"], [195, 2, 1, "", "get_input_size"], [195, 2, 1, "", "get_parameter"], [195, 2, 1, "", "get_submodule"], [195, 2, 1, "", "half"], [195, 2, 1, "", "ipu"], [195, 2, 1, "", "load_state_dict"], [195, 2, 1, "", "make_fhe_friendly"], [195, 2, 1, "", "modules"], [195, 2, 1, "", "named_buffers"], [195, 2, 1, "", "named_children"], [195, 2, 1, "", "named_modules"], [195, 2, 1, "", "named_parameters"], [195, 2, 1, "", "parameters"], [195, 2, 1, "", "post_process_activations"], [195, 2, 1, "", "register_backward_hook"], [195, 2, 1, "", "register_buffer"], [195, 2, 1, "", "register_forward_hook"], [195, 2, 1, "", "register_forward_pre_hook"], [195, 2, 1, "", "register_full_backward_hook"], [195, 2, 1, "", "register_load_state_dict_post_hook"], [195, 2, 1, "", "register_module"], [195, 2, 1, "", "register_parameter"], [195, 2, 1, "", "requires_grad_"], [195, 2, 1, "", "set_extra_state"], [195, 2, 1, "", "set_max_pooling_to_avg"], [195, 2, 1, "", "share_memory"], [195, 2, 1, "", "state_dict"], [195, 2, 1, "", "to"], [195, 2, 1, "", "to_empty"], [195, 2, 1, "", "train"], [195, 2, 1, "", "type"], [195, 2, 1, "", "xpu"], [195, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.model.alexnet_fhe": [[200, 1, 1, "", "alexnet_fhe"]], "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe": [[200, 2, 1, "", "__init__"], [200, 2, 1, "", "addBatchNormAfterActivation"], [200, 2, 1, "", "add_batch_norm_after_conv"], [200, 2, 1, "", "add_batch_norm_before_conv"], [200, 2, 1, "", "add_module"], [200, 2, 1, "", "apply"], [200, 2, 1, "", "assertSize"], [200, 2, 1, "", "bfloat16"], [200, 1, 1, "", "bn_info"], [200, 2, 1, "", "buffers"], [200, 2, 1, "", "children"], [200, 2, 1, "", "cpu"], [200, 2, 1, "", "cuda"], [200, 2, 1, "", "double"], [200, 2, 1, "", "eval"], [200, 2, 1, "", "extra_repr"], [200, 2, 1, "", "float"], [200, 2, 1, "", "get_buffer"], [200, 2, 1, "", "get_extra_state"], [200, 2, 1, "", "get_input_size"], [200, 2, 1, "", "get_parameter"], [200, 2, 1, "", "get_submodule"], [200, 2, 1, "", "half"], [200, 2, 1, "", "ipu"], [200, 2, 1, "", "load_state_dict"], [200, 2, 1, "", "make_fhe_friendly"], [200, 2, 1, "", "modules"], [200, 2, 1, "", "named_buffers"], [200, 2, 1, "", "named_children"], [200, 2, 1, "", "named_modules"], [200, 2, 1, "", "named_parameters"], [200, 2, 1, "", "parameters"], [200, 2, 1, "", "post_process_activations"], [200, 2, 1, "", "register_backward_hook"], [200, 2, 1, "", "register_buffer"], [200, 2, 1, "", "register_forward_hook"], [200, 2, 1, "", "register_forward_pre_hook"], [200, 2, 1, "", "register_full_backward_hook"], [200, 2, 1, "", "register_load_state_dict_post_hook"], [200, 2, 1, "", "register_module"], [200, 2, 1, "", "register_parameter"], [200, 2, 1, "", "requires_grad_"], [200, 2, 1, "", "set_extra_state"], [200, 2, 1, "", "set_max_pooling_to_avg"], [200, 2, 1, "", "share_memory"], [200, 2, 1, "", "state_dict"], [200, 2, 1, "", "to"], [200, 2, 1, "", "to_empty"], [200, 2, 1, "", "train"], [200, 2, 1, "", "type"], [200, 2, 1, "", "xpu"], [200, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.model.lenet5": [[202, 1, 1, "", "Lenet5"], [203, 5, 1, "", "lenet5"]], "pyhelayers.mltoolbox.model.lenet5.Lenet5": [[202, 2, 1, "", "__init__"], [202, 2, 1, "", "addBatchNormAfterActivation"], [202, 2, 1, "", "add_batch_norm_after_conv"], [202, 2, 1, "", "add_batch_norm_before_conv"], [202, 2, 1, "", "add_module"], [202, 2, 1, "", "apply"], [202, 2, 1, "", "assertSize"], [202, 2, 1, "", "bfloat16"], [202, 1, 1, "", "bn_info"], [202, 2, 1, "", "buffers"], [202, 2, 1, "", "children"], [202, 2, 1, "", "cpu"], [202, 2, 1, "", "cuda"], [202, 2, 1, "", "double"], [202, 2, 1, "", "eval"], [202, 2, 1, "", "extra_repr"], [202, 2, 1, "", "float"], [202, 2, 1, "", "get_buffer"], [202, 2, 1, "", "get_extra_state"], [202, 2, 1, "", "get_input_size"], [202, 2, 1, "", "get_parameter"], [202, 2, 1, "", "get_submodule"], [202, 2, 1, "", "half"], [202, 2, 1, "", "ipu"], [202, 2, 1, "", "load_state_dict"], [202, 2, 1, "", "make_fhe_friendly"], [202, 2, 1, "", "modules"], [202, 2, 1, "", "named_buffers"], [202, 2, 1, "", "named_children"], [202, 2, 1, "", "named_modules"], [202, 2, 1, "", "named_parameters"], [202, 2, 1, "", "parameters"], [202, 2, 1, "", "post_process_activations"], [202, 2, 1, "", "register_backward_hook"], [202, 2, 1, "", "register_buffer"], [202, 2, 1, "", "register_forward_hook"], [202, 2, 1, "", "register_forward_pre_hook"], [202, 2, 1, "", "register_full_backward_hook"], [202, 2, 1, "", "register_load_state_dict_post_hook"], [202, 2, 1, "", "register_module"], [202, 2, 1, "", "register_parameter"], [202, 2, 1, "", "requires_grad_"], [202, 2, 1, "", "set_extra_state"], [202, 2, 1, "", "set_max_pooling_to_avg"], [202, 2, 1, "", "share_memory"], [202, 2, 1, "", "state_dict"], [202, 2, 1, "", "to"], [202, 2, 1, "", "to_empty"], [202, 2, 1, "", "train"], [202, 2, 1, "", "type"], [202, 2, 1, "", "xpu"], [202, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.model.nn_module": [[205, 5, 1, "", "tensor"]], "pyhelayers.mltoolbox.model.squeezenet": [[207, 1, 1, "", "SqueezeNet1_0_FHE"], [208, 1, 1, "", "SqueezeNet1_1_FHE"], [209, 1, 1, "", "SqueezeNet_FHE"]], "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE": [[207, 2, 1, "", "__init__"], [207, 2, 1, "", "addBatchNormAfterActivation"], [207, 2, 1, "", "add_batch_norm_after_conv"], [207, 2, 1, "", "add_batch_norm_before_conv"], [207, 2, 1, "", "add_module"], [207, 2, 1, "", "apply"], [207, 2, 1, "", "assertSize"], [207, 2, 1, "", "bfloat16"], [207, 1, 1, "", "bn_info"], [207, 2, 1, "", "buffers"], [207, 2, 1, "", "children"], [207, 2, 1, "", "cpu"], [207, 2, 1, "", "cuda"], [207, 2, 1, "", "double"], [207, 2, 1, "", "eval"], [207, 2, 1, "", "extra_repr"], [207, 2, 1, "", "float"], [207, 2, 1, "", "get_buffer"], [207, 2, 1, "", "get_extra_state"], [207, 2, 1, "", "get_input_size"], [207, 2, 1, "", "get_parameter"], [207, 2, 1, "", "get_submodule"], [207, 2, 1, "", "half"], [207, 2, 1, "", "ipu"], [207, 2, 1, "", "load_state_dict"], [207, 2, 1, "", "make_fhe_friendly"], [207, 2, 1, "", "modules"], [207, 2, 1, "", "named_buffers"], [207, 2, 1, "", "named_children"], [207, 2, 1, "", "named_modules"], [207, 2, 1, "", "named_parameters"], [207, 2, 1, "", "parameters"], [207, 2, 1, "", "post_process_activations"], [207, 2, 1, "", "register_backward_hook"], [207, 2, 1, "", "register_buffer"], [207, 2, 1, "", "register_forward_hook"], [207, 2, 1, "", "register_forward_pre_hook"], [207, 2, 1, "", "register_full_backward_hook"], [207, 2, 1, "", "register_load_state_dict_post_hook"], [207, 2, 1, "", "register_module"], [207, 2, 1, "", "register_parameter"], [207, 2, 1, "", "requires_grad_"], [207, 2, 1, "", "set_extra_state"], [207, 2, 1, "", "set_max_pooling_to_avg"], [207, 2, 1, "", "share_memory"], [207, 2, 1, "", "state_dict"], [207, 2, 1, "", "to"], [207, 2, 1, "", "to_empty"], [207, 2, 1, "", "train"], [207, 2, 1, "", "type"], [207, 2, 1, "", "xpu"], [207, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE": [[208, 2, 1, "", "__init__"], [208, 2, 1, "", "addBatchNormAfterActivation"], [208, 2, 1, "", "add_batch_norm_after_conv"], [208, 2, 1, "", "add_batch_norm_before_conv"], [208, 2, 1, "", "add_module"], [208, 2, 1, "", "apply"], [208, 2, 1, "", "assertSize"], [208, 2, 1, "", "bfloat16"], [208, 1, 1, "", "bn_info"], [208, 2, 1, "", "buffers"], [208, 2, 1, "", "children"], [208, 2, 1, "", "cpu"], [208, 2, 1, "", "cuda"], [208, 2, 1, "", "double"], [208, 2, 1, "", "eval"], [208, 2, 1, "", "extra_repr"], [208, 2, 1, "", "float"], [208, 2, 1, "", "get_buffer"], [208, 2, 1, "", "get_extra_state"], [208, 2, 1, "", "get_input_size"], [208, 2, 1, "", "get_parameter"], [208, 2, 1, "", "get_submodule"], [208, 2, 1, "", "half"], [208, 2, 1, "", "ipu"], [208, 2, 1, "", "load_state_dict"], [208, 2, 1, "", "make_fhe_friendly"], [208, 2, 1, "", "modules"], [208, 2, 1, "", "named_buffers"], [208, 2, 1, "", "named_children"], [208, 2, 1, "", "named_modules"], [208, 2, 1, "", "named_parameters"], [208, 2, 1, "", "parameters"], [208, 2, 1, "", "post_process_activations"], [208, 2, 1, "", "register_backward_hook"], [208, 2, 1, "", "register_buffer"], [208, 2, 1, "", "register_forward_hook"], [208, 2, 1, "", "register_forward_pre_hook"], [208, 2, 1, "", "register_full_backward_hook"], [208, 2, 1, "", "register_load_state_dict_post_hook"], [208, 2, 1, "", "register_module"], [208, 2, 1, "", "register_parameter"], [208, 2, 1, "", "requires_grad_"], [208, 2, 1, "", "set_extra_state"], [208, 2, 1, "", "set_max_pooling_to_avg"], [208, 2, 1, "", "share_memory"], [208, 2, 1, "", "state_dict"], [208, 2, 1, "", "to"], [208, 2, 1, "", "to_empty"], [208, 2, 1, "", "train"], [208, 2, 1, "", "type"], [208, 2, 1, "", "xpu"], [208, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE": [[209, 2, 1, "", "__init__"], [209, 2, 1, "", "addBatchNormAfterActivation"], [209, 2, 1, "", "add_batch_norm_after_conv"], [209, 2, 1, "", "add_batch_norm_before_conv"], [209, 2, 1, "", "add_module"], [209, 2, 1, "", "apply"], [209, 2, 1, "", "assertSize"], [209, 2, 1, "", "bfloat16"], [209, 1, 1, "", "bn_info"], [209, 2, 1, "", "buffers"], [209, 2, 1, "", "children"], [209, 2, 1, "", "cpu"], [209, 2, 1, "", "cuda"], [209, 2, 1, "", "double"], [209, 2, 1, "", "eval"], [209, 2, 1, "", "extra_repr"], [209, 2, 1, "", "float"], [209, 2, 1, "", "get_buffer"], [209, 2, 1, "", "get_extra_state"], [209, 2, 1, "", "get_input_size"], [209, 2, 1, "", "get_parameter"], [209, 2, 1, "", "get_submodule"], [209, 2, 1, "", "half"], [209, 2, 1, "", "ipu"], [209, 2, 1, "", "load_state_dict"], [209, 2, 1, "", "make_fhe_friendly"], [209, 2, 1, "", "modules"], [209, 2, 1, "", "named_buffers"], [209, 2, 1, "", "named_children"], [209, 2, 1, "", "named_modules"], [209, 2, 1, "", "named_parameters"], [209, 2, 1, "", "parameters"], [209, 2, 1, "", "post_process_activations"], [209, 2, 1, "", "register_backward_hook"], [209, 2, 1, "", "register_buffer"], [209, 2, 1, "", "register_forward_hook"], [209, 2, 1, "", "register_forward_pre_hook"], [209, 2, 1, "", "register_full_backward_hook"], [209, 2, 1, "", "register_load_state_dict_post_hook"], [209, 2, 1, "", "register_module"], [209, 2, 1, "", "register_parameter"], [209, 2, 1, "", "requires_grad_"], [209, 2, 1, "", "set_extra_state"], [209, 2, 1, "", "set_max_pooling_to_avg"], [209, 2, 1, "", "share_memory"], [209, 2, 1, "", "state_dict"], [209, 2, 1, "", "to"], [209, 2, 1, "", "to_empty"], [209, 2, 1, "", "train"], [209, 2, 1, "", "type"], [209, 2, 1, "", "xpu"], [209, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.model.squeezenetchet": [[211, 1, 1, "", "SqueezeNetCHET"], [212, 5, 1, "", "squeezenet_chet"]], "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET": [[211, 2, 1, "", "__init__"], [211, 2, 1, "", "addBatchNormAfterActivation"], [211, 2, 1, "", "add_batch_norm_after_conv"], [211, 2, 1, "", "add_batch_norm_before_conv"], [211, 2, 1, "", "add_module"], [211, 2, 1, "", "apply"], [211, 2, 1, "", "assertSize"], [211, 2, 1, "", "bfloat16"], [211, 1, 1, "", "bn_info"], [211, 2, 1, "", "buffers"], [211, 2, 1, "", "children"], [211, 2, 1, "", "cpu"], [211, 2, 1, "", "cuda"], [211, 2, 1, "", "double"], [211, 2, 1, "", "eval"], [211, 2, 1, "", "extra_repr"], [211, 2, 1, "", "float"], [211, 2, 1, "", "get_buffer"], [211, 2, 1, "", "get_extra_state"], [211, 2, 1, "", "get_input_size"], [211, 2, 1, "", "get_parameter"], [211, 2, 1, "", "get_submodule"], [211, 2, 1, "", "half"], [211, 2, 1, "", "ipu"], [211, 2, 1, "", "load_state_dict"], [211, 2, 1, "", "make_fhe_friendly"], [211, 2, 1, "", "modules"], [211, 2, 1, "", "named_buffers"], [211, 2, 1, "", "named_children"], [211, 2, 1, "", "named_modules"], [211, 2, 1, "", "named_parameters"], [211, 2, 1, "", "parameters"], [211, 2, 1, "", "post_process_activations"], [211, 2, 1, "", "register_backward_hook"], [211, 2, 1, "", "register_buffer"], [211, 2, 1, "", "register_forward_hook"], [211, 2, 1, "", "register_forward_pre_hook"], [211, 2, 1, "", "register_full_backward_hook"], [211, 2, 1, "", "register_load_state_dict_post_hook"], [211, 2, 1, "", "register_module"], [211, 2, 1, "", "register_parameter"], [211, 2, 1, "", "requires_grad_"], [211, 2, 1, "", "set_extra_state"], [211, 2, 1, "", "set_max_pooling_to_avg"], [211, 2, 1, "", "share_memory"], [211, 2, 1, "", "state_dict"], [211, 2, 1, "", "to"], [211, 2, 1, "", "to_empty"], [211, 2, 1, "", "train"], [211, 2, 1, "", "type"], [211, 2, 1, "", "xpu"], [211, 2, 1, "", "zero_grad"]], "pyhelayers.mltoolbox.trainer": [[214, 1, 1, "", "CovidCTDataset"], [215, 1, 1, "", "CovidXrayDataset"], [216, 4, 1, "", "DDP"], [217, 1, 1, "", "DataLoader"], [218, 1, 1, "", "DistributedSampler"], [219, 1, 1, "", "SimpleNamespace"], [220, 1, 1, "", "Trainer"], [221, 5, 1, "", "accuracy"], [222, 5, 1, "", "get_logger"], [223, 5, 1, "", "get_model_by_name"], [224, 5, 1, "", "get_optimizer"], [225, 5, 1, "", "load_checkpoint"], [226, 5, 1, "", "make_confusion_matrix"], [227, 5, 1, "", "nd_loss"], [228, 1, 1, "", "places205Dataset"], [229, 5, 1, "", "print_summary"], [230, 5, 1, "", "top_k_acc"], [231, 1, 1, "", "tqdm"]], "pyhelayers.mltoolbox.trainer.CovidCTDataset": [[214, 2, 1, "", "__init__"], [214, 2, 1, "", "get_samples_per_class"]], "pyhelayers.mltoolbox.trainer.CovidXrayDataset": [[215, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.trainer.DataLoader": [[217, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.trainer.DistributedSampler": [[218, 2, 1, "", "__init__"], [218, 2, 1, "", "set_epoch"]], "pyhelayers.mltoolbox.trainer.SimpleNamespace": [[219, 2, 1, "", "__init__"]], "pyhelayers.mltoolbox.trainer.Trainer": [[220, 2, 1, "", "__init__"], [220, 2, 1, "", "get_model"], [220, 2, 1, "", "get_optimizer"], [220, 2, 1, "", "test"], [220, 2, 1, "", "train_step"], [220, 2, 1, "", "validation"]], "pyhelayers.mltoolbox.trainer.places205Dataset": [[228, 2, 1, "", "__init__"], [228, 2, 1, "", "get_samples_per_class"]], "pyhelayers.mltoolbox.trainer.tqdm": [[231, 2, 1, "", "__init__"], [231, 2, 1, "", "clear"], [231, 2, 1, "", "close"], [231, 2, 1, "", "display"], [231, 2, 1, "", "external_write_mode"], [231, 3, 1, "", "format_dict"], [231, 2, 1, "", "format_interval"], [231, 2, 1, "", "format_meter"], [231, 2, 1, "", "format_num"], [231, 2, 1, "", "format_sizeof"], [231, 2, 1, "", "get_lock"], [231, 2, 1, "", "pandas"], [231, 2, 1, "", "refresh"], [231, 2, 1, "", "reset"], [231, 2, 1, "", "set_description"], [231, 2, 1, "", "set_description_str"], [231, 2, 1, "", "set_lock"], [231, 2, 1, "", "set_postfix"], [231, 2, 1, "", "set_postfix_str"], [231, 2, 1, "", "status_printer"], [231, 2, 1, "", "unpause"], [231, 2, 1, "", "update"], [231, 2, 1, "", "wrapattr"], [231, 2, 1, "", "write"]], "pyhelayers.mltoolbox.utils": [[233, 0, 0, "-", "cf_matrix"], [243, 0, 0, "-", "metrics_tracker"], [244, 0, 0, "-", "training_debug"], [245, 0, 0, "-", "util"]], "pyhelayers.mltoolbox.utils.cf_matrix": [[234, 5, 1, "", "comp_confusion_matrix"], [235, 5, 1, "", "confusion_matrix"], [236, 5, 1, "", "format_acc_results"], [237, 5, 1, "", "get_accuracy_metrics"], [238, 5, 1, "", "get_logger"], [239, 5, 1, "", "hmean"], [240, 5, 1, "", "make_1d_labels"], [241, 5, 1, "", "make_confusion_matrix"], [242, 5, 1, "", "namedtuple"]], "pyhelayers.mltoolbox.utils.util": [[246, 5, 1, "", "accuracy"], [247, 5, 1, "", "create_log_title"], [248, 5, 1, "", "date_str"], [249, 1, 1, "", "datetime"], [250, 5, 1, "", "get_logger"], [251, 5, 1, "", "get_optimizer"], [252, 5, 1, "", "has_nan"], [253, 5, 1, "", "load_checkpoint"], [254, 5, 1, "", "postproc_model"], [255, 5, 1, "", "print_summary"], [256, 5, 1, "", "read_filepaths"], [257, 5, 1, "", "save_checkpoint"], [258, 5, 1, "", "save_model"], [259, 5, 1, "", "save_onnx"], [260, 5, 1, "", "top_k_acc"], [261, 5, 1, "", "write_to_csv"]], "pyhelayers.mltoolbox.utils.util.datetime": [[249, 2, 1, "", "__init__"], [249, 2, 1, "", "astimezone"], [249, 2, 1, "", "combine"], [249, 2, 1, "", "ctime"], [249, 2, 1, "", "date"], [249, 2, 1, "", "dst"], [249, 2, 1, "", "fromisocalendar"], [249, 2, 1, "", "fromisoformat"], [249, 2, 1, "", "fromordinal"], [249, 2, 1, "", "fromtimestamp"], [249, 2, 1, "", "isocalendar"], [249, 2, 1, "", "isoformat"], [249, 2, 1, "", "isoweekday"], [249, 2, 1, "", "now"], [249, 2, 1, "", "replace"], [249, 2, 1, "", "strftime"], [249, 2, 1, "", "strptime"], [249, 2, 1, "", "time"], [249, 2, 1, "", "timestamp"], [249, 2, 1, "", "timetuple"], [249, 2, 1, "", "timetz"], [249, 2, 1, "", "today"], [249, 2, 1, "", "toordinal"], [249, 2, 1, "", "tzname"], [249, 2, 1, "", "utcfromtimestamp"], [249, 2, 1, "", "utcnow"], [249, 2, 1, "", "utcoffset"], [249, 2, 1, "", "utctimetuple"], [249, 2, 1, "", "weekday"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:property", "4": "py:attribute", "5": "py:function", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "property", "Python property"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "function", "Python function"], "6": ["py", "data", "Python data"]}, "titleterms": {"pyhelay": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265], "api": 0, "actiontyp": 2, "aeskei": 3, "aggregatorpsimanag": 4, "arima": 5, "arimaplain": 6, "bootstrapconfig": 7, "ctile": 8, "ctiletensor": 9, "ctiletensorvector": 10, "ctilevector": 11, "comparisontyp": 12, "conjugationsupport": 13, "crf": 14, "crfplain": 15, "defaultcontext": 16, "devicetyp": 17, "doubletensor": 18, "encod": 19, "encryptedbatch": 20, "encrypteddata": 21, "evaltyp": 22, "field": 23, "fieldtyp": 24, "fieldvector": 25, "filestorag": 26, "fithyperparam": 27, "functionevalu": 28, "heconfigrequir": 29, "hecontext": 30, "hemodel": 31, "hemodelrunn": 32, "heprofil": 33, "herunrequir": 34, "hetrait": 35, "heaancontext": 36, "helibbgvcontext": 37, "helibckkscontext": 38, "helibconfig": 39, "helibcontext": 40, "helibpreset": 41, "kmean": 42, "kmeansplain": 43, "lractiv": 44, "lattigocontext": 45, "logisticregress": 46, "logisticregressionplain": 47, "modelioprocessor": 48, "nativefunctionevalu": 49, "neuralnet": 50, "neuralnetconfig": 51, "neuralnetplain": 52, "numberconfig": 53, "numbersign": 54, "numbers": 55, "optimizationtarget": 56, "ptile": 57, "ptiletensor": 58, "padding2d": 59, "plainmodel": 60, "plainmodelhyperparam": 61, "printopt": 62, "publicfunct": 63, "pythonbackedstorag": 64, "recordlinkageconfig": 65, "recordlinkagemanag": 66, "recordlinkagepackag": 67, "recordlinkagerul": 68, "recordlinkageruletyp": 69, "rotationsettyp": 70, "rtspsimanag": 71, "sealckkscontext": 72, "storag": 73, "ttdim": 74, "ttencod": 75, "ttfunctionevalu": 76, "ttshape": 77, "tabl": [78, 264], "tile": 79, "tiletensor": 80, "verbos": 81, "xgboost": 82, "xgboostplain": 83, "decrypt_default_aes_encrypted_blocks_under_fh": 84, "ext": [85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99], "model_arch": [86, 93], "pyfh": 87, "pyfhecommon": [88, 89, 90], "abc": 89, "abstractmethod": 90, "pyfhemlimpl": [91, 92, 93], "pyfheml": [92, 93], "replac": 94, "util": [95, 96, 97, 98, 99, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261], "end_tim": 96, "extract_batch": 97, "report_dur": 98, "start_tim": 99, "get_print_opt": 100, "load_encrypted_data": 101, "load_he_context": 102, "load_he_context_from_fil": 103, "load_he_model": 104, "load_io_processor": 105, "mltoolbox": [106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261], "argument": [107, 108], "data_load": [109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142], "cifar10_dataset": [110, 111, 112, 113, 114, 115, 116], "cifar10dataset": 111, "datasetwrapp": [112, 120, 125, 130, 133, 137], "subset": [113, 138], "get_logg": [114, 121, 126, 131, 134, 139, 148, 158, 173, 187, 196, 222, 238, 250], "per_image_standard": 115, "train_test_split": [116, 142], "covidct_dataset": [117, 118, 119, 120, 121], "covidctdataset": [118, 214], "dataset": [119, 124, 129, 136], "covidxray_dataset": [122, 123, 124, 125, 126, 127], "covidxraydataset": [123, 215], "read_filepath": [127, 256], "dataset_wrapp": [128, 129, 130, 131], "ds_factori": [132, 133, 134], "places205_dataset": [135, 136, 137, 138, 139, 140, 141, 142], "places205dataset": [140, 228], "random_split": 141, "fhe_friendly_convertor": [143, 144, 145, 146, 147, 148, 149, 150, 151, 152], "fhefriendlyconvertor": 144, "reducelronplateau": 145, "simplenamespac": [146, 219], "trainer": [147, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231], "get_optim": [149, 224, 251], "load_checkpoint": [150, 225, 253], "set_se": 151, "starting_point": 152, "he_dl_lib": [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188], "distil": [154, 155], "nd_loss": [155, 227], "my_logg": [156, 157, 158, 159], "logger": 157, "set_logg": 159, "poly_activ": [160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184], "approxrelu": 161, "iterativerelu": 162, "paramet": 163, "srelu": 164, "squar": 165, "trainablepolyrelu": 166, "weightedrelu": 167, "change_modul": 168, "create_or_update_weighted_activ": 169, "find_modules_by_typ": 170, "forward_iterative_relu": 171, "get_activation_gen": 172, "get_module_by_nam": 174, "get_relu_activ": 175, "iterative_sqrt": 176, "poly_activation_non_train": 177, "replace_relu_activ": [178, 179], "round_noise_activ": 180, "set_activation_lay": 181, "square_activ": 182, "srelu_poly_activ": 183, "tryout": 184, "singleton": 185, "timer": [186, 187, 188], "perf_count": 188, "model": [189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212], "dnn_factori": [190, 191, 192, 193, 194, 195, 196, 197, 198], "lenet5": [191, 201, 202, 203], "squeezenet1_0_fh": [192, 207], "squeezenet1_1_fh": [193, 208], "squeezenetchet": [194, 210, 211, 212], "alexnet_fh": [195, 199, 200], "get_model": 197, "get_model_by_nam": [198, 223], "nn_modul": [204, 205], "tensor": 205, "squeezenet": [206, 207, 208, 209], "squeezenet_fh": 209, "squeezenet_chet": 212, "ddp": 216, "dataload": 217, "distributedsampl": 218, "accuraci": [221, 246], "make_confusion_matrix": [226, 241], "print_summari": [229, 255], "top_k_acc": [230, 260], "tqdm": 231, "cf_matrix": [233, 234, 235, 236, 237, 238, 239, 240, 241, 242], "comp_confusion_matrix": 234, "confusion_matrix": 235, "format_acc_result": 236, "get_accuracy_metr": 237, "hmean": 239, "make_1d_label": 240, "namedtupl": 242, "metrics_track": 243, "training_debug": 244, "create_log_titl": 247, "date_str": 248, "datetim": 249, "has_nan": 252, "postproc_model": 254, "save_checkpoint": 257, "save_model": 258, "save_onnx": 259, "write_to_csv": 261, "prepare_default_plain_blocks_for_aes_encrypt": 262, "set_neural_net_verbosity_level": 263, "document": 264, "overview": 264, "content": 264, "indic": 264, "instal": 265}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx": 57}, "alltitles": {"pyhelayers API": [[0, "pyhelayers-api"]], "pyhelayers": [[1, "module-pyhelayers"]], "pyhelayers.ActionType": [[2, "pyhelayers-actiontype"]], "pyhelayers.AesKey": [[3, "pyhelayers-aeskey"]], "pyhelayers.AggregatorPsiManager": [[4, "pyhelayers-aggregatorpsimanager"]], "pyhelayers.Arima": [[5, "pyhelayers-arima"]], "pyhelayers.ArimaPlain": [[6, "pyhelayers-arimaplain"]], "pyhelayers.BootstrapConfig": [[7, "pyhelayers-bootstrapconfig"]], "pyhelayers.CTile": [[8, "pyhelayers-ctile"]], "pyhelayers.CTileTensor": [[9, "pyhelayers-ctiletensor"]], "pyhelayers.CTileTensorVector": [[10, "pyhelayers-ctiletensorvector"]], "pyhelayers.CTileVector": [[11, "pyhelayers-ctilevector"]], "pyhelayers.ComparisonType": [[12, "pyhelayers-comparisontype"]], "pyhelayers.ConjugationSupport": [[13, "pyhelayers-conjugationsupport"]], "pyhelayers.Crf": [[14, "pyhelayers-crf"]], "pyhelayers.CrfPlain": [[15, "pyhelayers-crfplain"]], "pyhelayers.DefaultContext": [[16, "pyhelayers-defaultcontext"]], "pyhelayers.DeviceType": [[17, "pyhelayers-devicetype"]], "pyhelayers.DoubleTensor": [[18, "pyhelayers-doubletensor"]], "pyhelayers.Encoder": [[19, "pyhelayers-encoder"]], "pyhelayers.EncryptedBatch": [[20, "pyhelayers-encryptedbatch"]], "pyhelayers.EncryptedData": [[21, "pyhelayers-encrypteddata"]], "pyhelayers.EvalType": [[22, "pyhelayers-evaltype"]], "pyhelayers.Field": [[23, "pyhelayers-field"]], "pyhelayers.FieldType": [[24, "pyhelayers-fieldtype"]], "pyhelayers.FieldVector": [[25, "pyhelayers-fieldvector"]], "pyhelayers.FileStorage": [[26, "pyhelayers-filestorage"]], "pyhelayers.FitHyperParams": [[27, "pyhelayers-fithyperparams"]], "pyhelayers.FunctionEvaluator": [[28, "pyhelayers-functionevaluator"]], "pyhelayers.HeConfigRequirement": [[29, "pyhelayers-heconfigrequirement"]], "pyhelayers.HeContext": [[30, "pyhelayers-hecontext"]], "pyhelayers.HeModel": [[31, "pyhelayers-hemodel"]], "pyhelayers.HeModelRunner": [[32, "pyhelayers-hemodelrunner"]], "pyhelayers.HeProfile": [[33, "pyhelayers-heprofile"]], "pyhelayers.HeRunRequirements": [[34, "pyhelayers-herunrequirements"]], "pyhelayers.HeTraits": [[35, "pyhelayers-hetraits"]], "pyhelayers.HeaanContext": [[36, "pyhelayers-heaancontext"]], "pyhelayers.HelibBgvContext": [[37, "pyhelayers-helibbgvcontext"]], "pyhelayers.HelibCkksContext": [[38, "pyhelayers-helibckkscontext"]], "pyhelayers.HelibConfig": [[39, "pyhelayers-helibconfig"]], "pyhelayers.HelibContext": [[40, "pyhelayers-helibcontext"]], "pyhelayers.HelibPreset": [[41, "pyhelayers-helibpreset"]], "pyhelayers.KMeans": [[42, "pyhelayers-kmeans"]], "pyhelayers.KMeansPlain": [[43, "pyhelayers-kmeansplain"]], "pyhelayers.LRActivation": [[44, "pyhelayers-lractivation"]], "pyhelayers.LattigoContext": [[45, "pyhelayers-lattigocontext"]], "pyhelayers.LogisticRegression": [[46, "pyhelayers-logisticregression"]], "pyhelayers.LogisticRegressionPlain": [[47, "pyhelayers-logisticregressionplain"]], "pyhelayers.ModelIoProcessor": [[48, "pyhelayers-modelioprocessor"]], "pyhelayers.NativeFunctionEvaluator": [[49, "pyhelayers-nativefunctionevaluator"]], "pyhelayers.NeuralNet": [[50, "pyhelayers-neuralnet"]], "pyhelayers.NeuralNetConfig": [[51, "pyhelayers-neuralnetconfig"]], "pyhelayers.NeuralNetPlain": [[52, "pyhelayers-neuralnetplain"]], "pyhelayers.NumberConfig": [[53, "pyhelayers-numberconfig"]], "pyhelayers.NumberSigned": [[54, "pyhelayers-numbersigned"]], "pyhelayers.NumberSize": [[55, "pyhelayers-numbersize"]], "pyhelayers.OptimizationTarget": [[56, "pyhelayers-optimizationtarget"]], "pyhelayers.PTile": [[57, "pyhelayers-ptile"]], "pyhelayers.PTileTensor": [[58, "pyhelayers-ptiletensor"]], "pyhelayers.Padding2d": [[59, "pyhelayers-padding2d"]], "pyhelayers.PlainModel": [[60, "pyhelayers-plainmodel"]], "pyhelayers.PlainModelHyperParams": [[61, "pyhelayers-plainmodelhyperparams"]], "pyhelayers.PrintOptions": [[62, "pyhelayers-printoptions"]], "pyhelayers.PublicFunctions": [[63, "pyhelayers-publicfunctions"]], "pyhelayers.PythonBackedStorage": [[64, "pyhelayers-pythonbackedstorage"]], "pyhelayers.RecordLinkageConfig": [[65, "pyhelayers-recordlinkageconfig"]], "pyhelayers.RecordLinkageManager": [[66, "pyhelayers-recordlinkagemanager"]], "pyhelayers.RecordLinkagePackage": [[67, "pyhelayers-recordlinkagepackage"]], "pyhelayers.RecordLinkageRule": [[68, "pyhelayers-recordlinkagerule"]], "pyhelayers.RecordLinkageRuleType": [[69, "pyhelayers-recordlinkageruletype"]], "pyhelayers.RotationSetType": [[70, "pyhelayers-rotationsettype"]], "pyhelayers.RtsPsiManager": [[71, "pyhelayers-rtspsimanager"]], "pyhelayers.SealCkksContext": [[72, "pyhelayers-sealckkscontext"]], "pyhelayers.Storage": [[73, "pyhelayers-storage"]], "pyhelayers.TTDim": [[74, "pyhelayers-ttdim"]], "pyhelayers.TTEncoder": [[75, "pyhelayers-ttencoder"]], "pyhelayers.TTFunctionEvaluator": [[76, "pyhelayers-ttfunctionevaluator"]], "pyhelayers.TTShape": [[77, "pyhelayers-ttshape"]], "pyhelayers.Table": [[78, "pyhelayers-table"]], "pyhelayers.Tile": [[79, "pyhelayers-tile"]], "pyhelayers.TileTensor": [[80, "pyhelayers-tiletensor"]], "pyhelayers.Verbosity": [[81, "pyhelayers-verbosity"]], "pyhelayers.XGBoost": [[82, "pyhelayers-xgboost"]], "pyhelayers.XGBoostPlain": [[83, "pyhelayers-xgboostplain"]], "pyhelayers.decrypt_default_aes_encrypted_blocks_under_fhe": [[84, "pyhelayers-decrypt-default-aes-encrypted-blocks-under-fhe"]], "pyhelayers.ext": [[85, "module-pyhelayers.ext"]], "pyhelayers.ext.MODEL_ARCH": [[86, "pyhelayers-ext-model-arch"]], "pyhelayers.ext.pyfhe": [[87, "module-pyhelayers.ext.pyfhe"]], "pyhelayers.ext.pyfhecommon": [[88, "module-pyhelayers.ext.pyfhecommon"]], "pyhelayers.ext.pyfhecommon.ABC": [[89, "pyhelayers-ext-pyfhecommon-abc"]], "pyhelayers.ext.pyfhecommon.abstractmethod": [[90, "pyhelayers-ext-pyfhecommon-abstractmethod"]], "pyhelayers.ext.pyfhemlimpl": [[91, "module-pyhelayers.ext.pyfhemlimpl"]], "pyhelayers.ext.pyfhemlimpl.pyfheml": [[92, "module-pyhelayers.ext.pyfhemlimpl.pyfheml"]], "pyhelayers.ext.pyfhemlimpl.pyfheml.MODEL_ARCH": [[93, "pyhelayers-ext-pyfhemlimpl-pyfheml-model-arch"]], "pyhelayers.ext.replace": [[94, "pyhelayers-ext-replace"]], "pyhelayers.ext.utils": [[95, "module-pyhelayers.ext.utils"]], "pyhelayers.ext.utils.end_timer": [[96, "pyhelayers-ext-utils-end-timer"]], "pyhelayers.ext.utils.extract_batch": [[97, "pyhelayers-ext-utils-extract-batch"]], "pyhelayers.ext.utils.report_duration": [[98, "pyhelayers-ext-utils-report-duration"]], "pyhelayers.ext.utils.start_timer": [[99, "pyhelayers-ext-utils-start-timer"]], "pyhelayers.get_print_options": [[100, "pyhelayers-get-print-options"]], "pyhelayers.load_encrypted_data": [[101, "pyhelayers-load-encrypted-data"]], "pyhelayers.load_he_context": [[102, "pyhelayers-load-he-context"]], "pyhelayers.load_he_context_from_file": [[103, "pyhelayers-load-he-context-from-file"]], "pyhelayers.load_he_model": [[104, "pyhelayers-load-he-model"]], "pyhelayers.load_io_processor": [[105, "pyhelayers-load-io-processor"]], "pyhelayers.mltoolbox": [[106, "module-pyhelayers.mltoolbox"]], "pyhelayers.mltoolbox.arguments": [[107, "module-pyhelayers.mltoolbox.arguments"]], "pyhelayers.mltoolbox.arguments.Arguments": [[108, "pyhelayers-mltoolbox-arguments-arguments"]], "pyhelayers.mltoolbox.data_loader": [[109, "module-pyhelayers.mltoolbox.data_loader"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset": [[110, "module-pyhelayers.mltoolbox.data_loader.cifar10_dataset"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset": [[111, "pyhelayers-mltoolbox-data-loader-cifar10-dataset-cifar10dataset"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper": [[112, "pyhelayers-mltoolbox-data-loader-cifar10-dataset-datasetwrapper"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Subset": [[113, "pyhelayers-mltoolbox-data-loader-cifar10-dataset-subset"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset.get_logger": [[114, "pyhelayers-mltoolbox-data-loader-cifar10-dataset-get-logger"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset.per_image_standardization": [[115, "pyhelayers-mltoolbox-data-loader-cifar10-dataset-per-image-standardization"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset.train_test_split": [[116, "pyhelayers-mltoolbox-data-loader-cifar10-dataset-train-test-split"]], "pyhelayers.mltoolbox.data_loader.covidCT_dataset": [[117, "module-pyhelayers.mltoolbox.data_loader.covidCT_dataset"]], "pyhelayers.mltoolbox.data_loader.covidCT_dataset.CovidCTDataset": [[118, "pyhelayers-mltoolbox-data-loader-covidct-dataset-covidctdataset"]], "pyhelayers.mltoolbox.data_loader.covidCT_dataset.Dataset": [[119, "pyhelayers-mltoolbox-data-loader-covidct-dataset-dataset"]], "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper": [[120, "pyhelayers-mltoolbox-data-loader-covidct-dataset-datasetwrapper"]], "pyhelayers.mltoolbox.data_loader.covidCT_dataset.get_logger": [[121, "pyhelayers-mltoolbox-data-loader-covidct-dataset-get-logger"]], "pyhelayers.mltoolbox.data_loader.covidXray_dataset": [[122, "module-pyhelayers.mltoolbox.data_loader.covidXray_dataset"]], "pyhelayers.mltoolbox.data_loader.covidXray_dataset.CovidXrayDataset": [[123, "pyhelayers-mltoolbox-data-loader-covidxray-dataset-covidxraydataset"]], "pyhelayers.mltoolbox.data_loader.covidXray_dataset.Dataset": [[124, "pyhelayers-mltoolbox-data-loader-covidxray-dataset-dataset"]], "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper": [[125, "pyhelayers-mltoolbox-data-loader-covidxray-dataset-datasetwrapper"]], "pyhelayers.mltoolbox.data_loader.covidXray_dataset.get_logger": [[126, "pyhelayers-mltoolbox-data-loader-covidxray-dataset-get-logger"]], "pyhelayers.mltoolbox.data_loader.covidXray_dataset.read_filepaths": [[127, "pyhelayers-mltoolbox-data-loader-covidxray-dataset-read-filepaths"]], "pyhelayers.mltoolbox.data_loader.dataset_wrapper": [[128, "module-pyhelayers.mltoolbox.data_loader.dataset_wrapper"]], "pyhelayers.mltoolbox.data_loader.dataset_wrapper.Dataset": [[129, "pyhelayers-mltoolbox-data-loader-dataset-wrapper-dataset"]], "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper": [[130, "pyhelayers-mltoolbox-data-loader-dataset-wrapper-datasetwrapper"]], "pyhelayers.mltoolbox.data_loader.dataset_wrapper.get_logger": [[131, "pyhelayers-mltoolbox-data-loader-dataset-wrapper-get-logger"]], "pyhelayers.mltoolbox.data_loader.ds_factory": [[132, "module-pyhelayers.mltoolbox.data_loader.ds_factory"]], "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper": [[133, "pyhelayers-mltoolbox-data-loader-ds-factory-datasetwrapper"]], "pyhelayers.mltoolbox.data_loader.ds_factory.get_logger": [[134, "pyhelayers-mltoolbox-data-loader-ds-factory-get-logger"]], "pyhelayers.mltoolbox.data_loader.places205_dataset": [[135, "module-pyhelayers.mltoolbox.data_loader.places205_dataset"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.Dataset": [[136, "pyhelayers-mltoolbox-data-loader-places205-dataset-dataset"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper": [[137, "pyhelayers-mltoolbox-data-loader-places205-dataset-datasetwrapper"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.Subset": [[138, "pyhelayers-mltoolbox-data-loader-places205-dataset-subset"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.get_logger": [[139, "pyhelayers-mltoolbox-data-loader-places205-dataset-get-logger"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.places205Dataset": [[140, "pyhelayers-mltoolbox-data-loader-places205-dataset-places205dataset"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.random_split": [[141, "pyhelayers-mltoolbox-data-loader-places205-dataset-random-split"]], "pyhelayers.mltoolbox.data_loader.places205_dataset.train_test_split": [[142, "pyhelayers-mltoolbox-data-loader-places205-dataset-train-test-split"]], "pyhelayers.mltoolbox.fhe_friendly_convertor": [[143, "module-pyhelayers.mltoolbox.fhe_friendly_convertor"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.FheFriendlyConvertor": [[144, "pyhelayers-mltoolbox-fhe-friendly-convertor-fhefriendlyconvertor"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.ReduceLROnPlateau": [[145, "pyhelayers-mltoolbox-fhe-friendly-convertor-reducelronplateau"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.SimpleNamespace": [[146, "pyhelayers-mltoolbox-fhe-friendly-convertor-simplenamespace"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer": [[147, "pyhelayers-mltoolbox-fhe-friendly-convertor-trainer"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.get_logger": [[148, "pyhelayers-mltoolbox-fhe-friendly-convertor-get-logger"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.get_optimizer": [[149, "pyhelayers-mltoolbox-fhe-friendly-convertor-get-optimizer"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.load_checkpoint": [[150, "pyhelayers-mltoolbox-fhe-friendly-convertor-load-checkpoint"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.set_seed": [[151, "pyhelayers-mltoolbox-fhe-friendly-convertor-set-seed"]], "pyhelayers.mltoolbox.fhe_friendly_convertor.starting_point": [[152, "pyhelayers-mltoolbox-fhe-friendly-convertor-starting-point"]], "pyhelayers.mltoolbox.he_dl_lib": [[153, "module-pyhelayers.mltoolbox.he_dl_lib"]], "pyhelayers.mltoolbox.he_dl_lib.distillation": [[154, "module-pyhelayers.mltoolbox.he_dl_lib.distillation"]], "pyhelayers.mltoolbox.he_dl_lib.distillation.nd_loss": [[155, "pyhelayers-mltoolbox-he-dl-lib-distillation-nd-loss"]], "pyhelayers.mltoolbox.he_dl_lib.my_logger": [[156, "module-pyhelayers.mltoolbox.he_dl_lib.my_logger"]], "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger": [[157, "pyhelayers-mltoolbox-he-dl-lib-my-logger-logger"]], "pyhelayers.mltoolbox.he_dl_lib.my_logger.get_logger": [[158, "pyhelayers-mltoolbox-he-dl-lib-my-logger-get-logger"]], "pyhelayers.mltoolbox.he_dl_lib.my_logger.set_logger": [[159, "pyhelayers-mltoolbox-he-dl-lib-my-logger-set-logger"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations": [[160, "module-pyhelayers.mltoolbox.he_dl_lib.poly_activations"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU": [[161, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-approxrelu"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU": [[162, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-iterativerelu"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter": [[163, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-parameter"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU": [[164, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-srelu"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square": [[165, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-square"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU": [[166, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-trainablepolyrelu"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu": [[167, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-weightedrelu"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.change_module": [[168, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-change-module"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.create_or_update_weighted_activations": [[169, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-create-or-update-weighted-activations"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.find_modules_by_type": [[170, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-find-modules-by-type"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.forward_iterative_relu": [[171, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-forward-iterative-relu"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_activation_gen": [[172, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-get-activation-gen"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_logger": [[173, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-get-logger"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_module_by_name": [[174, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-get-module-by-name"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_relu_activations": [[175, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-get-relu-activations"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.iterative_sqrt": [[176, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-iterative-sqrt"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.poly_activation_non_trainable": [[177, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-poly-activation-non-trainable"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.replace_relu_activation": [[178, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-replace-relu-activation"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.replace_relu_activations": [[179, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-replace-relu-activations"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.round_noise_activation": [[180, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-round-noise-activation"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.set_activation_layer": [[181, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-set-activation-layer"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.square_activation": [[182, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-square-activation"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.srelu_poly_activation": [[183, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-srelu-poly-activation"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations.tryout": [[184, "pyhelayers-mltoolbox-he-dl-lib-poly-activations-tryout"]], "pyhelayers.mltoolbox.he_dl_lib.singleton": [[185, "module-pyhelayers.mltoolbox.he_dl_lib.singleton"]], "pyhelayers.mltoolbox.he_dl_lib.timers": [[186, "module-pyhelayers.mltoolbox.he_dl_lib.timers"]], "pyhelayers.mltoolbox.he_dl_lib.timers.get_logger": [[187, "pyhelayers-mltoolbox-he-dl-lib-timers-get-logger"]], "pyhelayers.mltoolbox.he_dl_lib.timers.perf_counter": [[188, "pyhelayers-mltoolbox-he-dl-lib-timers-perf-counter"]], "pyhelayers.mltoolbox.model": [[189, "module-pyhelayers.mltoolbox.model"]], "pyhelayers.mltoolbox.model.DNN_factory": [[190, "module-pyhelayers.mltoolbox.model.DNN_factory"]], "pyhelayers.mltoolbox.model.DNN_factory.Lenet5": [[191, "pyhelayers-mltoolbox-model-dnn-factory-lenet5"]], "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE": [[192, "pyhelayers-mltoolbox-model-dnn-factory-squeezenet1-0-fhe"]], "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE": [[193, "pyhelayers-mltoolbox-model-dnn-factory-squeezenet1-1-fhe"]], "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET": [[194, "pyhelayers-mltoolbox-model-dnn-factory-squeezenetchet"]], "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe": [[195, "pyhelayers-mltoolbox-model-dnn-factory-alexnet-fhe"]], "pyhelayers.mltoolbox.model.DNN_factory.get_logger": [[196, "pyhelayers-mltoolbox-model-dnn-factory-get-logger"]], "pyhelayers.mltoolbox.model.DNN_factory.get_model": [[197, "pyhelayers-mltoolbox-model-dnn-factory-get-model"]], "pyhelayers.mltoolbox.model.DNN_factory.get_model_by_name": [[198, "pyhelayers-mltoolbox-model-dnn-factory-get-model-by-name"]], "pyhelayers.mltoolbox.model.alexnet_fhe": [[199, "module-pyhelayers.mltoolbox.model.alexnet_fhe"]], "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe": [[200, "pyhelayers-mltoolbox-model-alexnet-fhe-alexnet-fhe"]], "pyhelayers.mltoolbox.model.lenet5": [[201, "module-pyhelayers.mltoolbox.model.lenet5"]], "pyhelayers.mltoolbox.model.lenet5.Lenet5": [[202, "pyhelayers-mltoolbox-model-lenet5-lenet5"]], "pyhelayers.mltoolbox.model.lenet5.lenet5": [[203, "pyhelayers-mltoolbox-model-lenet5-lenet5"]], "pyhelayers.mltoolbox.model.nn_module": [[204, "module-pyhelayers.mltoolbox.model.nn_module"]], "pyhelayers.mltoolbox.model.nn_module.tensor": [[205, "pyhelayers-mltoolbox-model-nn-module-tensor"]], "pyhelayers.mltoolbox.model.squeezenet": [[206, "module-pyhelayers.mltoolbox.model.squeezenet"]], "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE": [[207, "pyhelayers-mltoolbox-model-squeezenet-squeezenet1-0-fhe"]], "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE": [[208, "pyhelayers-mltoolbox-model-squeezenet-squeezenet1-1-fhe"]], "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE": [[209, "pyhelayers-mltoolbox-model-squeezenet-squeezenet-fhe"]], "pyhelayers.mltoolbox.model.squeezenetchet": [[210, "module-pyhelayers.mltoolbox.model.squeezenetchet"]], "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET": [[211, "pyhelayers-mltoolbox-model-squeezenetchet-squeezenetchet"]], "pyhelayers.mltoolbox.model.squeezenetchet.squeezenet_chet": [[212, "pyhelayers-mltoolbox-model-squeezenetchet-squeezenet-chet"]], "pyhelayers.mltoolbox.trainer": [[213, "module-pyhelayers.mltoolbox.trainer"]], "pyhelayers.mltoolbox.trainer.CovidCTDataset": [[214, "pyhelayers-mltoolbox-trainer-covidctdataset"]], "pyhelayers.mltoolbox.trainer.CovidXrayDataset": [[215, "pyhelayers-mltoolbox-trainer-covidxraydataset"]], "pyhelayers.mltoolbox.trainer.DDP": [[216, "pyhelayers-mltoolbox-trainer-ddp"]], "pyhelayers.mltoolbox.trainer.DataLoader": [[217, "pyhelayers-mltoolbox-trainer-dataloader"]], "pyhelayers.mltoolbox.trainer.DistributedSampler": [[218, "pyhelayers-mltoolbox-trainer-distributedsampler"]], "pyhelayers.mltoolbox.trainer.SimpleNamespace": [[219, "pyhelayers-mltoolbox-trainer-simplenamespace"]], "pyhelayers.mltoolbox.trainer.Trainer": [[220, "pyhelayers-mltoolbox-trainer-trainer"]], "pyhelayers.mltoolbox.trainer.accuracy": [[221, "pyhelayers-mltoolbox-trainer-accuracy"]], "pyhelayers.mltoolbox.trainer.get_logger": [[222, "pyhelayers-mltoolbox-trainer-get-logger"]], "pyhelayers.mltoolbox.trainer.get_model_by_name": [[223, "pyhelayers-mltoolbox-trainer-get-model-by-name"]], "pyhelayers.mltoolbox.trainer.get_optimizer": [[224, "pyhelayers-mltoolbox-trainer-get-optimizer"]], "pyhelayers.mltoolbox.trainer.load_checkpoint": [[225, "pyhelayers-mltoolbox-trainer-load-checkpoint"]], "pyhelayers.mltoolbox.trainer.make_confusion_matrix": [[226, "pyhelayers-mltoolbox-trainer-make-confusion-matrix"]], "pyhelayers.mltoolbox.trainer.nd_loss": [[227, "pyhelayers-mltoolbox-trainer-nd-loss"]], "pyhelayers.mltoolbox.trainer.places205Dataset": [[228, "pyhelayers-mltoolbox-trainer-places205dataset"]], "pyhelayers.mltoolbox.trainer.print_summary": [[229, "pyhelayers-mltoolbox-trainer-print-summary"]], "pyhelayers.mltoolbox.trainer.top_k_acc": [[230, "pyhelayers-mltoolbox-trainer-top-k-acc"]], "pyhelayers.mltoolbox.trainer.tqdm": [[231, "pyhelayers-mltoolbox-trainer-tqdm"]], "pyhelayers.mltoolbox.utils": [[232, "module-pyhelayers.mltoolbox.utils"]], "pyhelayers.mltoolbox.utils.cf_matrix": [[233, "module-pyhelayers.mltoolbox.utils.cf_matrix"]], "pyhelayers.mltoolbox.utils.cf_matrix.comp_confusion_matrix": [[234, "pyhelayers-mltoolbox-utils-cf-matrix-comp-confusion-matrix"]], "pyhelayers.mltoolbox.utils.cf_matrix.confusion_matrix": [[235, "pyhelayers-mltoolbox-utils-cf-matrix-confusion-matrix"]], "pyhelayers.mltoolbox.utils.cf_matrix.format_acc_results": [[236, "pyhelayers-mltoolbox-utils-cf-matrix-format-acc-results"]], "pyhelayers.mltoolbox.utils.cf_matrix.get_accuracy_metrics": [[237, "pyhelayers-mltoolbox-utils-cf-matrix-get-accuracy-metrics"]], "pyhelayers.mltoolbox.utils.cf_matrix.get_logger": [[238, "pyhelayers-mltoolbox-utils-cf-matrix-get-logger"]], "pyhelayers.mltoolbox.utils.cf_matrix.hmean": [[239, "pyhelayers-mltoolbox-utils-cf-matrix-hmean"]], "pyhelayers.mltoolbox.utils.cf_matrix.make_1d_labels": [[240, "pyhelayers-mltoolbox-utils-cf-matrix-make-1d-labels"]], "pyhelayers.mltoolbox.utils.cf_matrix.make_confusion_matrix": [[241, "pyhelayers-mltoolbox-utils-cf-matrix-make-confusion-matrix"]], "pyhelayers.mltoolbox.utils.cf_matrix.namedtuple": [[242, "pyhelayers-mltoolbox-utils-cf-matrix-namedtuple"]], "pyhelayers.mltoolbox.utils.metrics_tracker": [[243, "module-pyhelayers.mltoolbox.utils.metrics_tracker"]], "pyhelayers.mltoolbox.utils.training_debug": [[244, "module-pyhelayers.mltoolbox.utils.training_debug"]], "pyhelayers.mltoolbox.utils.util": [[245, "module-pyhelayers.mltoolbox.utils.util"]], "pyhelayers.mltoolbox.utils.util.accuracy": [[246, "pyhelayers-mltoolbox-utils-util-accuracy"]], "pyhelayers.mltoolbox.utils.util.create_log_title": [[247, "pyhelayers-mltoolbox-utils-util-create-log-title"]], "pyhelayers.mltoolbox.utils.util.date_str": [[248, "pyhelayers-mltoolbox-utils-util-date-str"]], "pyhelayers.mltoolbox.utils.util.datetime": [[249, "pyhelayers-mltoolbox-utils-util-datetime"]], "pyhelayers.mltoolbox.utils.util.get_logger": [[250, "pyhelayers-mltoolbox-utils-util-get-logger"]], "pyhelayers.mltoolbox.utils.util.get_optimizer": [[251, "pyhelayers-mltoolbox-utils-util-get-optimizer"]], "pyhelayers.mltoolbox.utils.util.has_nan": [[252, "pyhelayers-mltoolbox-utils-util-has-nan"]], "pyhelayers.mltoolbox.utils.util.load_checkpoint": [[253, "pyhelayers-mltoolbox-utils-util-load-checkpoint"]], "pyhelayers.mltoolbox.utils.util.postproc_model": [[254, "pyhelayers-mltoolbox-utils-util-postproc-model"]], "pyhelayers.mltoolbox.utils.util.print_summary": [[255, "pyhelayers-mltoolbox-utils-util-print-summary"]], "pyhelayers.mltoolbox.utils.util.read_filepaths": [[256, "pyhelayers-mltoolbox-utils-util-read-filepaths"]], "pyhelayers.mltoolbox.utils.util.save_checkpoint": [[257, "pyhelayers-mltoolbox-utils-util-save-checkpoint"]], "pyhelayers.mltoolbox.utils.util.save_model": [[258, "pyhelayers-mltoolbox-utils-util-save-model"]], "pyhelayers.mltoolbox.utils.util.save_onnx": [[259, "pyhelayers-mltoolbox-utils-util-save-onnx"]], "pyhelayers.mltoolbox.utils.util.top_k_acc": [[260, "pyhelayers-mltoolbox-utils-util-top-k-acc"]], "pyhelayers.mltoolbox.utils.util.write_to_csv": [[261, "pyhelayers-mltoolbox-utils-util-write-to-csv"]], "pyhelayers.prepare_default_plain_blocks_for_aes_encryption": [[262, "pyhelayers-prepare-default-plain-blocks-for-aes-encryption"]], "pyhelayers.set_neural_net_verbosity_level": [[263, "pyhelayers-set-neural-net-verbosity-level"]], "pyhelayers documentation": [[264, "pyhelayers-documentation"]], "Overview": [[264, "overview"]], "Contents:": [[264, null]], "Indices and tables": [[264, "indices-and-tables"]], "Installing pyhelayers": [[265, "installing-pyhelayers"]]}, "indexentries": {"module": [[1, "module-pyhelayers"], [85, "module-pyhelayers.ext"], [87, "module-pyhelayers.ext.pyfhe"], [88, "module-pyhelayers.ext.pyfhecommon"], [91, "module-pyhelayers.ext.pyfhemlimpl"], [92, "module-pyhelayers.ext.pyfhemlimpl.pyfheml"], [95, "module-pyhelayers.ext.utils"], [106, "module-pyhelayers.mltoolbox"], [107, "module-pyhelayers.mltoolbox.arguments"], [109, "module-pyhelayers.mltoolbox.data_loader"], [110, "module-pyhelayers.mltoolbox.data_loader.cifar10_dataset"], [117, "module-pyhelayers.mltoolbox.data_loader.covidCT_dataset"], [122, "module-pyhelayers.mltoolbox.data_loader.covidXray_dataset"], [128, "module-pyhelayers.mltoolbox.data_loader.dataset_wrapper"], [132, "module-pyhelayers.mltoolbox.data_loader.ds_factory"], [135, "module-pyhelayers.mltoolbox.data_loader.places205_dataset"], [143, "module-pyhelayers.mltoolbox.fhe_friendly_convertor"], [153, "module-pyhelayers.mltoolbox.he_dl_lib"], [154, "module-pyhelayers.mltoolbox.he_dl_lib.distillation"], [156, "module-pyhelayers.mltoolbox.he_dl_lib.my_logger"], [160, "module-pyhelayers.mltoolbox.he_dl_lib.poly_activations"], [185, "module-pyhelayers.mltoolbox.he_dl_lib.singleton"], [186, "module-pyhelayers.mltoolbox.he_dl_lib.timers"], [189, "module-pyhelayers.mltoolbox.model"], [190, "module-pyhelayers.mltoolbox.model.DNN_factory"], [199, "module-pyhelayers.mltoolbox.model.alexnet_fhe"], [201, "module-pyhelayers.mltoolbox.model.lenet5"], [204, "module-pyhelayers.mltoolbox.model.nn_module"], [206, "module-pyhelayers.mltoolbox.model.squeezenet"], [210, "module-pyhelayers.mltoolbox.model.squeezenetchet"], [213, "module-pyhelayers.mltoolbox.trainer"], [232, "module-pyhelayers.mltoolbox.utils"], [233, "module-pyhelayers.mltoolbox.utils.cf_matrix"], [243, "module-pyhelayers.mltoolbox.utils.metrics_tracker"], [244, "module-pyhelayers.mltoolbox.utils.training_debug"], [245, "module-pyhelayers.mltoolbox.utils.util"]], "pyhelayers": [[1, "module-pyhelayers"]], "actiontype (class in pyhelayers)": [[2, "pyhelayers.ActionType"]], "__init__() (actiontype method)": [[2, "pyhelayers.ActionType.__init__"]], "name (actiontype property)": [[2, "pyhelayers.ActionType.name"]], "aeskey (class in pyhelayers)": [[3, "pyhelayers.AesKey"]], "__init__() (aeskey method)": [[3, "pyhelayers.AesKey.__init__"]], "attach_input_storage() (aeskey method)": [[3, "pyhelayers.AesKey.attach_input_storage"]], "attach_output_storage() (aeskey method)": [[3, "pyhelayers.AesKey.attach_output_storage"]], "flush_to_storage() (aeskey method)": [[3, "pyhelayers.AesKey.flush_to_storage"]], "get_class_name() (aeskey method)": [[3, "pyhelayers.AesKey.get_class_name"]], "he_encrypt() (aeskey method)": [[3, "pyhelayers.AesKey.he_encrypt"]], "load_from_buffer() (aeskey method)": [[3, "pyhelayers.AesKey.load_from_buffer"]], "load_from_file() (aeskey method)": [[3, "pyhelayers.AesKey.load_from_file"]], "save_to_buffer() (aeskey method)": [[3, "pyhelayers.AesKey.save_to_buffer"]], "save_to_file() (aeskey method)": [[3, "pyhelayers.AesKey.save_to_file"]], "to_string() (aeskey method)": [[3, "pyhelayers.AesKey.to_string"]], "aggregatorpsimanager (class in pyhelayers)": [[4, "pyhelayers.AggregatorPsiManager"]], "__init__() (aggregatorpsimanager method)": [[4, "pyhelayers.AggregatorPsiManager.__init__"]], "get_verbosity() (aggregatorpsimanager method)": [[4, "pyhelayers.AggregatorPsiManager.get_verbosity"]], "rearrange_indicator_vector() (aggregatorpsimanager method)": [[4, "pyhelayers.AggregatorPsiManager.rearrange_indicator_vector"]], "set_verbosity() (aggregatorpsimanager method)": [[4, "pyhelayers.AggregatorPsiManager.set_verbosity"]], "arima (class in pyhelayers)": [[5, "pyhelayers.Arima"]], "__init__() (arima method)": [[5, "pyhelayers.Arima.__init__"]], "attach_input_storage() (arima method)": [[5, "pyhelayers.Arima.attach_input_storage"]], "attach_output_storage() (arima method)": [[5, "pyhelayers.Arima.attach_output_storage"]], "compile() (arima static method)": [[5, "pyhelayers.Arima.compile"]], "create_context() (arima static method)": [[5, "pyhelayers.Arima.create_context"]], "create_io_processor() (arima method)": [[5, "pyhelayers.Arima.create_io_processor"]], "decrypt_decode() (arima method)": [[5, "pyhelayers.Arima.decrypt_decode"]], "encode() (arima method)": [[5, "pyhelayers.Arima.encode"]], "encode_encrypt() (arima method)": [[5, "pyhelayers.Arima.encode_encrypt"]], "fit() (arima method)": [[5, "pyhelayers.Arima.fit"]], "flush_to_storage() (arima method)": [[5, "pyhelayers.Arima.flush_to_storage"]], "get_class_name() (arima method)": [[5, "pyhelayers.Arima.get_class_name"]], "get_fit_hyperparams() (arima method)": [[5, "pyhelayers.Arima.get_fit_hyperparams"]], "get_profile() (arima method)": [[5, "pyhelayers.Arima.get_profile"]], "load_from_buffer() (arima method)": [[5, "pyhelayers.Arima.load_from_buffer"]], "load_from_file() (arima method)": [[5, "pyhelayers.Arima.load_from_file"]], "predict() (arima method)": [[5, "pyhelayers.Arima.predict"]], "save_to_buffer() (arima method)": [[5, "pyhelayers.Arima.save_to_buffer"]], "save_to_file() (arima method)": [[5, "pyhelayers.Arima.save_to_file"]], "to_string() (arima method)": [[5, "pyhelayers.Arima.to_string"]], "arimaplain (class in pyhelayers)": [[6, "pyhelayers.ArimaPlain"]], "__init__() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.__init__"]], "create() (arimaplain static method)": [[6, "pyhelayers.ArimaPlain.create"]], "fit() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.fit"]], "get_empty_he_model() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.get_empty_he_model"]], "get_hyper_params() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.get_hyper_params"]], "get_input_shapes_for_fit() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.get_input_shapes_for_fit"]], "get_input_shapes_for_predict() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.get_input_shapes_for_predict"]], "get_inputs_names_for_fit() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.get_inputs_names_for_fit"]], "get_inputs_names_for_predict() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.get_inputs_names_for_predict"]], "get_outputs_names_of_predict() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.get_outputs_names_of_predict"]], "init() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.init"]], "init_from_files() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.init_from_files"]], "is_fit_mode() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.is_fit_mode"]], "is_verbose() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.is_verbose"]], "predict() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.predict"]], "to_string() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.to_string"]], "validate_init() (arimaplain method)": [[6, "pyhelayers.ArimaPlain.validate_init"]], "bootstrapconfig (class in pyhelayers)": [[7, "pyhelayers.BootstrapConfig"]], "__init__() (bootstrapconfig method)": [[7, "pyhelayers.BootstrapConfig.__init__"]], "ctile (class in pyhelayers)": [[8, "pyhelayers.CTile"]], "__init__() (ctile method)": [[8, "pyhelayers.CTile.__init__"]], "add() (ctile method)": [[8, "pyhelayers.CTile.add"]], "add_plain() (ctile method)": [[8, "pyhelayers.CTile.add_plain"]], "add_plain_raw() (ctile method)": [[8, "pyhelayers.CTile.add_plain_raw"]], "add_raw() (ctile method)": [[8, "pyhelayers.CTile.add_raw"]], "add_scalar() (ctile method)": [[8, "pyhelayers.CTile.add_scalar"]], "add_tile() (ctile method)": [[8, "pyhelayers.CTile.add_tile"]], "add_tile_raw() (ctile method)": [[8, "pyhelayers.CTile.add_tile_raw"]], "attach_input_storage() (ctile method)": [[8, "pyhelayers.CTile.attach_input_storage"]], "attach_output_storage() (ctile method)": [[8, "pyhelayers.CTile.attach_output_storage"]], "conjugate() (ctile method)": [[8, "pyhelayers.CTile.conjugate"]], "conjugate_raw() (ctile method)": [[8, "pyhelayers.CTile.conjugate_raw"]], "flush_to_storage() (ctile method)": [[8, "pyhelayers.CTile.flush_to_storage"]], "get_chain_index() (ctile method)": [[8, "pyhelayers.CTile.get_chain_index"]], "get_class_name() (ctile method)": [[8, "pyhelayers.CTile.get_class_name"]], "get_current_device() (ctile method)": [[8, "pyhelayers.CTile.get_current_device"]], "get_multiply() (ctile method)": [[8, "pyhelayers.CTile.get_multiply"]], "get_scale() (ctile method)": [[8, "pyhelayers.CTile.get_scale"]], "inner_sum() (ctile method)": [[8, "pyhelayers.CTile.inner_sum"]], "is_empty() (ctile method)": [[8, "pyhelayers.CTile.is_empty"]], "load_from_buffer() (ctile method)": [[8, "pyhelayers.CTile.load_from_buffer"]], "load_from_file() (ctile method)": [[8, "pyhelayers.CTile.load_from_file"]], "multiply() (ctile method)": [[8, "pyhelayers.CTile.multiply"]], "multiply_by_chainging_scale() (ctile method)": [[8, "pyhelayers.CTile.multiply_by_chainging_scale"]], "multiply_imaginary_unit() (ctile method)": [[8, "pyhelayers.CTile.multiply_imaginary_unit"]], "multiply_plain() (ctile method)": [[8, "pyhelayers.CTile.multiply_plain"]], "multiply_plain_raw() (ctile method)": [[8, "pyhelayers.CTile.multiply_plain_raw"]], "multiply_raw() (ctile method)": [[8, "pyhelayers.CTile.multiply_raw"]], "multiply_scalar() (ctile method)": [[8, "pyhelayers.CTile.multiply_scalar"]], "multiply_tile() (ctile method)": [[8, "pyhelayers.CTile.multiply_tile"]], "multiply_tile_raw() (ctile method)": [[8, "pyhelayers.CTile.multiply_tile_raw"]], "negate() (ctile method)": [[8, "pyhelayers.CTile.negate"]], "nullify_imaginary_part() (ctile method)": [[8, "pyhelayers.CTile.nullify_imaginary_part"]], "reduce_chain_index() (ctile method)": [[8, "pyhelayers.CTile.reduce_chain_index"]], "relinearize() (ctile method)": [[8, "pyhelayers.CTile.relinearize"]], "rescale() (ctile method)": [[8, "pyhelayers.CTile.rescale"]], "rescale_raw() (ctile method)": [[8, "pyhelayers.CTile.rescale_raw"]], "rotate() (ctile method)": [[8, "pyhelayers.CTile.rotate"]], "save_to_buffer() (ctile method)": [[8, "pyhelayers.CTile.save_to_buffer"]], "save_to_file() (ctile method)": [[8, "pyhelayers.CTile.save_to_file"]], "set_chain_index() (ctile method)": [[8, "pyhelayers.CTile.set_chain_index"]], "set_scale() (ctile method)": [[8, "pyhelayers.CTile.set_scale"]], "slot_count() (ctile method)": [[8, "pyhelayers.CTile.slot_count"]], "square() (ctile method)": [[8, "pyhelayers.CTile.square"]], "square_raw() (ctile method)": [[8, "pyhelayers.CTile.square_raw"]], "sub() (ctile method)": [[8, "pyhelayers.CTile.sub"]], "sub_plain() (ctile method)": [[8, "pyhelayers.CTile.sub_plain"]], "sub_plain_raw() (ctile method)": [[8, "pyhelayers.CTile.sub_plain_raw"]], "sub_raw() (ctile method)": [[8, "pyhelayers.CTile.sub_raw"]], "sub_tile() (ctile method)": [[8, "pyhelayers.CTile.sub_tile"]], "sub_tile_raw() (ctile method)": [[8, "pyhelayers.CTile.sub_tile_raw"]], "sum_exp_by_squaring_left_to_right() (ctile method)": [[8, "pyhelayers.CTile.sum_exp_by_squaring_left_to_right"]], "sum_exp_by_squaring_right_to_left() (ctile method)": [[8, "pyhelayers.CTile.sum_exp_by_squaring_right_to_left"]], "to_device() (ctile method)": [[8, "pyhelayers.CTile.to_device"]], "to_string() (ctile method)": [[8, "pyhelayers.CTile.to_string"]], "ctiletensor (class in pyhelayers)": [[9, "pyhelayers.CTileTensor"]], "__init__() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.__init__"]], "add() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.add"]], "add_plain() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.add_plain"]], "add_plain_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.add_plain_raw"]], "add_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.add_raw"]], "add_scalar() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.add_scalar"]], "add_to() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.add_to"]], "add_to_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.add_to_raw"]], "adjust_chain_index() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.adjust_chain_index"]], "assert_integrity() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.assert_integrity"]], "attach_input_storage() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.attach_input_storage"]], "attach_output_storage() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.attach_output_storage"]], "clear_unknowns() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.clear_unknowns"]], "duplicate_over_dim() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.duplicate_over_dim"]], "flatten() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.flatten"]], "flush_to_storage() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.flush_to_storage"]], "get_add() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_add"]], "get_add_plain() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_add_plain"]], "get_add_plain_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_add_plain_raw"]], "get_add_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_add_raw"]], "get_add_scalar() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_add_scalar"]], "get_chain_index() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_chain_index"]], "get_class_name() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_class_name"]], "get_clear_unknowns() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_clear_unknowns"]], "get_convolution() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_convolution"]], "get_current_device() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_current_device"]], "get_duplicate_over_dim() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_duplicate_over_dim"]], "get_estimated_memory_usage_bytes() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_estimated_memory_usage_bytes"]], "get_multiply() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_multiply"]], "get_multiply_and_sum() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_multiply_and_sum"]], "get_multiply_plain() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_multiply_plain"]], "get_multiply_plain_and_sum() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_multiply_plain_and_sum"]], "get_multiply_plain_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_multiply_plain_raw"]], "get_multiply_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_multiply_raw"]], "get_multiply_scalar() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_multiply_scalar"]], "get_num_used_tiles() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_num_used_tiles"]], "get_reduce_chain_index() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_reduce_chain_index"]], "get_relinearize() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_relinearize"]], "get_rescale() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_rescale"]], "get_set_chain_index() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_set_chain_index"]], "get_shape() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_shape"]], "get_slice() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_slice"]], "get_square() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_square"]], "get_square_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_square_raw"]], "get_sub() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_sub"]], "get_sub_plain() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_sub_plain"]], "get_sub_plain_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_sub_plain_raw"]], "get_sub_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_sub_raw"]], "get_sum_in_tiles_over_dim() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_sum_in_tiles_over_dim"]], "get_sum_over_dim() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_sum_over_dim"]], "get_sum_tiles_over_dim() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_sum_tiles_over_dim"]], "get_tile_at() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_tile_at"]], "get_tile_by_flat_index() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.get_tile_by_flat_index"]], "load_from_buffer() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.load_from_buffer"]], "load_from_file() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.load_from_file"]], "multiply() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.multiply"]], "multiply_and_sum() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.multiply_and_sum"]], "multiply_and_sum_to() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.multiply_and_sum_to"]], "multiply_plain() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.multiply_plain"]], "multiply_plain_and_sum() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.multiply_plain_and_sum"]], "multiply_plain_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.multiply_plain_raw"]], "multiply_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.multiply_raw"]], "multiply_scalar() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.multiply_scalar"]], "multiply_to() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.multiply_to"]], "multiply_to_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.multiply_to_raw"]], "negate() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.negate"]], "re_encrypt() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.re_encrypt"]], "reduce_chain_index() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.reduce_chain_index"]], "relinearize() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.relinearize"]], "relinearize_and_rescale() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.relinearize_and_rescale"]], "rescale() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.rescale"]], "rotate_along_dim() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.rotate_along_dim"]], "save_to_buffer() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.save_to_buffer"]], "save_to_file() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.save_to_file"]], "set_chain_index() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.set_chain_index"]], "shift_along_dim() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.shift_along_dim"]], "square() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.square"]], "square_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.square_raw"]], "sub() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.sub"]], "sub_from() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.sub_from"]], "sub_from_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.sub_from_raw"]], "sub_plain() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.sub_plain"]], "sub_plain_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.sub_plain_raw"]], "sub_raw() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.sub_raw"]], "sum_in_tiles_over_dim() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.sum_in_tiles_over_dim"]], "sum_over_dim() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.sum_over_dim"]], "sum_tiles_over_dim() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.sum_tiles_over_dim"]], "to_device() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.to_device"]], "to_string() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.to_string"]], "validate_packed() (ctiletensor method)": [[9, "pyhelayers.CTileTensor.validate_packed"]], "ctiletensorvector (class in pyhelayers)": [[10, "pyhelayers.CTileTensorVector"]], "__init__() (ctiletensorvector method)": [[10, "pyhelayers.CTileTensorVector.__init__"]], "append() (ctiletensorvector method)": [[10, "pyhelayers.CTileTensorVector.append"]], "clear() (ctiletensorvector method)": [[10, "pyhelayers.CTileTensorVector.clear"]], "extend() (ctiletensorvector method)": [[10, "pyhelayers.CTileTensorVector.extend"]], "insert() (ctiletensorvector method)": [[10, "pyhelayers.CTileTensorVector.insert"]], "pop() (ctiletensorvector method)": [[10, "pyhelayers.CTileTensorVector.pop"]], "ctilevector (class in pyhelayers)": [[11, "pyhelayers.CTileVector"]], "__init__() (ctilevector method)": [[11, "pyhelayers.CTileVector.__init__"]], "append() (ctilevector method)": [[11, "pyhelayers.CTileVector.append"]], "clear() (ctilevector method)": [[11, "pyhelayers.CTileVector.clear"]], "extend() (ctilevector method)": [[11, "pyhelayers.CTileVector.extend"]], "insert() (ctilevector method)": [[11, "pyhelayers.CTileVector.insert"]], "pop() (ctilevector method)": [[11, "pyhelayers.CTileVector.pop"]], "comparisontype (class in pyhelayers)": [[12, "pyhelayers.ComparisonType"]], "__init__() (comparisontype method)": [[12, "pyhelayers.ComparisonType.__init__"]], "name (comparisontype property)": [[12, "pyhelayers.ComparisonType.name"]], "conjugationsupport (class in pyhelayers)": [[13, "pyhelayers.ConjugationSupport"]], "__init__() (conjugationsupport method)": [[13, "pyhelayers.ConjugationSupport.__init__"]], "name (conjugationsupport property)": [[13, "pyhelayers.ConjugationSupport.name"]], "crf (class in pyhelayers)": [[14, "pyhelayers.Crf"]], "__init__() (crf method)": [[14, "pyhelayers.Crf.__init__"]], "are_hyper_params_set() (crf method)": [[14, "pyhelayers.Crf.are_hyper_params_set"]], "attach_input_storage() (crf method)": [[14, "pyhelayers.Crf.attach_input_storage"]], "attach_output_storage() (crf method)": [[14, "pyhelayers.Crf.attach_output_storage"]], "decrypt_decode() (crf method)": [[14, "pyhelayers.Crf.decrypt_decode"]], "encode_encrypt_input() (crf method)": [[14, "pyhelayers.Crf.encode_encrypt_input"]], "fit() (crf method)": [[14, "pyhelayers.Crf.fit"]], "flush_to_storage() (crf method)": [[14, "pyhelayers.Crf.flush_to_storage"]], "get_class_name() (crf method)": [[14, "pyhelayers.Crf.get_class_name"]], "load_from_buffer() (crf method)": [[14, "pyhelayers.Crf.load_from_buffer"]], "load_from_file() (crf method)": [[14, "pyhelayers.Crf.load_from_file"]], "save_to_buffer() (crf method)": [[14, "pyhelayers.Crf.save_to_buffer"]], "save_to_file() (crf method)": [[14, "pyhelayers.Crf.save_to_file"]], "set_hyper_params() (crf method)": [[14, "pyhelayers.Crf.set_hyper_params"]], "to_string() (crf method)": [[14, "pyhelayers.Crf.to_string"]], "crfplain (class in pyhelayers)": [[15, "pyhelayers.CrfPlain"]], "__init__() (crfplain method)": [[15, "pyhelayers.CrfPlain.__init__"]], "attach_input_storage() (crfplain method)": [[15, "pyhelayers.CrfPlain.attach_input_storage"]], "attach_output_storage() (crfplain method)": [[15, "pyhelayers.CrfPlain.attach_output_storage"]], "flush_to_storage() (crfplain method)": [[15, "pyhelayers.CrfPlain.flush_to_storage"]], "get_class_name() (crfplain method)": [[15, "pyhelayers.CrfPlain.get_class_name"]], "get_num_input_cols() (crfplain method)": [[15, "pyhelayers.CrfPlain.get_num_input_cols"]], "load_from_buffer() (crfplain method)": [[15, "pyhelayers.CrfPlain.load_from_buffer"]], "load_from_file() (crfplain method)": [[15, "pyhelayers.CrfPlain.load_from_file"]], "predict() (crfplain method)": [[15, "pyhelayers.CrfPlain.predict"]], "predict_count_all_trees() (crfplain method)": [[15, "pyhelayers.CrfPlain.predict_count_all_trees"]], "predict_proba() (crfplain method)": [[15, "pyhelayers.CrfPlain.predict_proba"]], "save_to_buffer() (crfplain method)": [[15, "pyhelayers.CrfPlain.save_to_buffer"]], "save_to_file() (crfplain method)": [[15, "pyhelayers.CrfPlain.save_to_file"]], "set_category_weights() (crfplain method)": [[15, "pyhelayers.CrfPlain.set_category_weights"]], "set_nan_handling_method() (crfplain method)": [[15, "pyhelayers.CrfPlain.set_nan_handling_method"]], "set_prediction_method() (crfplain method)": [[15, "pyhelayers.CrfPlain.set_prediction_method"]], "to_string() (crfplain method)": [[15, "pyhelayers.CrfPlain.to_string"]], "defaultcontext (in module pyhelayers)": [[16, "pyhelayers.DefaultContext"]], "devicetype (class in pyhelayers)": [[17, "pyhelayers.DeviceType"]], "__init__() (devicetype method)": [[17, "pyhelayers.DeviceType.__init__"]], "name (devicetype property)": [[17, "pyhelayers.DeviceType.name"]], "doubletensor (class in pyhelayers)": [[18, "pyhelayers.DoubleTensor"]], "__init__() (doubletensor method)": [[18, "pyhelayers.DoubleTensor.__init__"]], "add_scalar() (doubletensor method)": [[18, "pyhelayers.DoubleTensor.add_scalar"]], "assert_equals() (doubletensor method)": [[18, "pyhelayers.DoubleTensor.assert_equals"]], "to_numpy() (doubletensor method)": [[18, "pyhelayers.DoubleTensor.to_numpy"]], "encoder (class in pyhelayers)": [[19, "pyhelayers.Encoder"]], "__init__() (encoder method)": [[19, "pyhelayers.Encoder.__init__"]], "assert_equals() (encoder method)": [[19, "pyhelayers.Encoder.assert_equals"]], "decode_complex() (encoder method)": [[19, "pyhelayers.Encoder.decode_complex"]], "decode_double() (encoder method)": [[19, "pyhelayers.Encoder.decode_double"]], "decode_int() (encoder method)": [[19, "pyhelayers.Encoder.decode_int"]], "decrypt_decode_complex() (encoder method)": [[19, "pyhelayers.Encoder.decrypt_decode_complex"]], "decrypt_decode_double() (encoder method)": [[19, "pyhelayers.Encoder.decrypt_decode_double"]], "decrypt_decode_int() (encoder method)": [[19, "pyhelayers.Encoder.decrypt_decode_int"]], "decrypt_decode_tile_double() (encoder method)": [[19, "pyhelayers.Encoder.decrypt_decode_tile_double"]], "encode() (encoder method)": [[19, "pyhelayers.Encoder.encode"]], "encode_encrypt() (encoder method)": [[19, "pyhelayers.Encoder.encode_encrypt"]], "encrypt_tile() (encoder method)": [[19, "pyhelayers.Encoder.encrypt_tile"]], "get_decrypt_added_noise_enabled() (encoder method)": [[19, "pyhelayers.Encoder.get_decrypt_added_noise_enabled"]], "get_decrypt_added_noise_precision() (encoder method)": [[19, "pyhelayers.Encoder.get_decrypt_added_noise_precision"]], "get_default_device() (encoder method)": [[19, "pyhelayers.Encoder.get_default_device"]], "get_default_scale() (encoder method)": [[19, "pyhelayers.Encoder.get_default_scale"]], "print_error_stats() (encoder method)": [[19, "pyhelayers.Encoder.print_error_stats"]], "restore_default_scale() (encoder method)": [[19, "pyhelayers.Encoder.restore_default_scale"]], "set_decrypt_added_noise_enabled() (encoder method)": [[19, "pyhelayers.Encoder.set_decrypt_added_noise_enabled"]], "set_decrypt_added_noise_precision() (encoder method)": [[19, "pyhelayers.Encoder.set_decrypt_added_noise_precision"]], "set_default_device() (encoder method)": [[19, "pyhelayers.Encoder.set_default_device"]], "set_default_scale() (encoder method)": [[19, "pyhelayers.Encoder.set_default_scale"]], "encryptedbatch (class in pyhelayers)": [[20, "pyhelayers.EncryptedBatch"]], "__init__() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.__init__"]], "attach_input_storage() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.attach_input_storage"]], "attach_output_storage() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.attach_output_storage"]], "flush_to_storage() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.flush_to_storage"]], "get_class_name() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.get_class_name"]], "get_item() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.get_item"]], "get_num_items() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.get_num_items"]], "load_from_buffer() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.load_from_buffer"]], "load_from_file() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.load_from_file"]], "save_to_buffer() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.save_to_buffer"]], "save_to_file() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.save_to_file"]], "to_string() (encryptedbatch method)": [[20, "pyhelayers.EncryptedBatch.to_string"]], "encrypteddata (class in pyhelayers)": [[21, "pyhelayers.EncryptedData"]], "__init__() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.__init__"]], "attach_input_storage() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.attach_input_storage"]], "attach_output_storage() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.attach_output_storage"]], "flush_to_storage() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.flush_to_storage"]], "get_batch() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.get_batch"]], "get_class_name() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.get_class_name"]], "get_num_batches() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.get_num_batches"]], "load_from_buffer() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.load_from_buffer"]], "load_from_file() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.load_from_file"]], "save_to_buffer() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.save_to_buffer"]], "save_to_file() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.save_to_file"]], "to_string() (encrypteddata method)": [[21, "pyhelayers.EncryptedData.to_string"]], "evaltype (class in pyhelayers)": [[22, "pyhelayers.EvalType"]], "__init__() (evaltype method)": [[22, "pyhelayers.EvalType.__init__"]], "name (evaltype property)": [[22, "pyhelayers.EvalType.name"]], "field (class in pyhelayers)": [[23, "pyhelayers.Field"]], "__init__() (field method)": [[23, "pyhelayers.Field.__init__"]], "load_from_buffer() (field method)": [[23, "pyhelayers.Field.load_from_buffer"]], "load_from_file() (field method)": [[23, "pyhelayers.Field.load_from_file"]], "save_to_buffer() (field method)": [[23, "pyhelayers.Field.save_to_buffer"]], "save_to_file() (field method)": [[23, "pyhelayers.Field.save_to_file"]], "fieldtype (class in pyhelayers)": [[24, "pyhelayers.FieldType"]], "__init__() (fieldtype method)": [[24, "pyhelayers.FieldType.__init__"]], "name (fieldtype property)": [[24, "pyhelayers.FieldType.name"]], "fieldvector (class in pyhelayers)": [[25, "pyhelayers.FieldVector"]], "__init__() (fieldvector method)": [[25, "pyhelayers.FieldVector.__init__"]], "append() (fieldvector method)": [[25, "pyhelayers.FieldVector.append"]], "clear() (fieldvector method)": [[25, "pyhelayers.FieldVector.clear"]], "extend() (fieldvector method)": [[25, "pyhelayers.FieldVector.extend"]], "insert() (fieldvector method)": [[25, "pyhelayers.FieldVector.insert"]], "pop() (fieldvector method)": [[25, "pyhelayers.FieldVector.pop"]], "filestorage (class in pyhelayers)": [[26, "pyhelayers.FileStorage"]], "__init__() (filestorage method)": [[26, "pyhelayers.FileStorage.__init__"]], "load() (filestorage method)": [[26, "pyhelayers.FileStorage.load"]], "save() (filestorage method)": [[26, "pyhelayers.FileStorage.save"]], "fithyperparams (class in pyhelayers)": [[27, "pyhelayers.FitHyperParams"]], "__init__() (fithyperparams method)": [[27, "pyhelayers.FitHyperParams.__init__"]], "fit_batch_size (fithyperparams property)": [[27, "pyhelayers.FitHyperParams.fit_batch_size"]], "learning_rate (fithyperparams property)": [[27, "pyhelayers.FitHyperParams.learning_rate"]], "number_of_epochs (fithyperparams property)": [[27, "pyhelayers.FitHyperParams.number_of_epochs"]], "number_of_iterations (fithyperparams property)": [[27, "pyhelayers.FitHyperParams.number_of_iterations"]], "functionevaluator (class in pyhelayers)": [[28, "pyhelayers.FunctionEvaluator"]], "__init__() (functionevaluator method)": [[28, "pyhelayers.FunctionEvaluator.__init__"]], "compare() (functionevaluator method)": [[28, "pyhelayers.FunctionEvaluator.compare"]], "compareinplace() (functionevaluator method)": [[28, "pyhelayers.FunctionEvaluator.compareInPlace"]], "inverse() (functionevaluator method)": [[28, "pyhelayers.FunctionEvaluator.inverse"]], "one_hot() (functionevaluator method)": [[28, "pyhelayers.FunctionEvaluator.one_hot"]], "sign() (functionevaluator method)": [[28, "pyhelayers.FunctionEvaluator.sign"]], "heconfigrequirement (class in pyhelayers)": [[29, "pyhelayers.HeConfigRequirement"]], "__init__() (heconfigrequirement method)": [[29, "pyhelayers.HeConfigRequirement.__init__"]], "automatic_bootstrapping (heconfigrequirement property)": [[29, "pyhelayers.HeConfigRequirement.automatic_bootstrapping"]], "bootstrappable (heconfigrequirement property)": [[29, "pyhelayers.HeConfigRequirement.bootstrappable"]], "fractional_part_precision (heconfigrequirement property)": [[29, "pyhelayers.HeConfigRequirement.fractional_part_precision"]], "insecure() (heconfigrequirement static method)": [[29, "pyhelayers.HeConfigRequirement.insecure"]], "integer_part_precision (heconfigrequirement property)": [[29, "pyhelayers.HeConfigRequirement.integer_part_precision"]], "multiplication_depth (heconfigrequirement property)": [[29, "pyhelayers.HeConfigRequirement.multiplication_depth"]], "num_slots (heconfigrequirement property)": [[29, "pyhelayers.HeConfigRequirement.num_slots"]], "public_functions (heconfigrequirement property)": [[29, "pyhelayers.HeConfigRequirement.public_functions"]], "security_level (heconfigrequirement property)": [[29, "pyhelayers.HeConfigRequirement.security_level"]], "to_string() (heconfigrequirement method)": [[29, "pyhelayers.HeConfigRequirement.to_string"]], "hecontext (class in pyhelayers)": [[30, "pyhelayers.HeContext"]], "__init__() (hecontext method)": [[30, "pyhelayers.HeContext.__init__"]], "clone() (hecontext method)": [[30, "pyhelayers.HeContext.clone"]], "create() (hecontext static method)": [[30, "pyhelayers.HeContext.create"]], "get_automatic_bootstrapping() (hecontext method)": [[30, "pyhelayers.HeContext.get_automatic_bootstrapping"]], "get_context_id() (hecontext method)": [[30, "pyhelayers.HeContext.get_context_id"]], "get_default_device() (hecontext method)": [[30, "pyhelayers.HeContext.get_default_device"]], "get_default_scale() (hecontext method)": [[30, "pyhelayers.HeContext.get_default_scale"]], "get_library_name() (hecontext method)": [[30, "pyhelayers.HeContext.get_library_name"]], "get_modulus_chain() (hecontext method)": [[30, "pyhelayers.HeContext.get_modulus_chain"]], "get_public_functions() (hecontext method)": [[30, "pyhelayers.HeContext.get_public_functions"]], "get_scheme_name() (hecontext method)": [[30, "pyhelayers.HeContext.get_scheme_name"]], "get_security_level() (hecontext method)": [[30, "pyhelayers.HeContext.get_security_level"]], "get_signature() (hecontext method)": [[30, "pyhelayers.HeContext.get_signature"]], "get_top_chain_index() (hecontext method)": [[30, "pyhelayers.HeContext.get_top_chain_index"]], "get_traits() (hecontext method)": [[30, "pyhelayers.HeContext.get_traits"]], "has_secret_key() (hecontext method)": [[30, "pyhelayers.HeContext.has_secret_key"]], "is_registered_context() (hecontext static method)": [[30, "pyhelayers.HeContext.is_registered_context"]], "load_from_buffer() (hecontext method)": [[30, "pyhelayers.HeContext.load_from_buffer"]], "load_from_file() (hecontext method)": [[30, "pyhelayers.HeContext.load_from_file"]], "load_secret_key() (hecontext method)": [[30, "pyhelayers.HeContext.load_secret_key"]], "load_secret_key_from_file() (hecontext method)": [[30, "pyhelayers.HeContext.load_secret_key_from_file"]], "print_signature() (hecontext method)": [[30, "pyhelayers.HeContext.print_signature"]], "public_functions_supported() (hecontext method)": [[30, "pyhelayers.HeContext.public_functions_supported"]], "save_secret_key() (hecontext method)": [[30, "pyhelayers.HeContext.save_secret_key"]], "save_secret_key_to_file() (hecontext method)": [[30, "pyhelayers.HeContext.save_secret_key_to_file"]], "save_to_buffer() (hecontext method)": [[30, "pyhelayers.HeContext.save_to_buffer"]], "save_to_file() (hecontext method)": [[30, "pyhelayers.HeContext.save_to_file"]], "set_automatic_bootstrapping() (hecontext method)": [[30, "pyhelayers.HeContext.set_automatic_bootstrapping"]], "set_default_device() (hecontext method)": [[30, "pyhelayers.HeContext.set_default_device"]], "set_default_scale() (hecontext method)": [[30, "pyhelayers.HeContext.set_default_scale"]], "slot_count() (hecontext method)": [[30, "pyhelayers.HeContext.slot_count"]], "to_string() (hecontext method)": [[30, "pyhelayers.HeContext.to_string"]], "hemodel (class in pyhelayers)": [[31, "pyhelayers.HeModel"]], "__init__() (hemodel method)": [[31, "pyhelayers.HeModel.__init__"]], "attach_input_storage() (hemodel method)": [[31, "pyhelayers.HeModel.attach_input_storage"]], "attach_output_storage() (hemodel method)": [[31, "pyhelayers.HeModel.attach_output_storage"]], "compile() (hemodel static method)": [[31, "pyhelayers.HeModel.compile"]], "create_context() (hemodel static method)": [[31, "pyhelayers.HeModel.create_context"]], "create_io_processor() (hemodel method)": [[31, "pyhelayers.HeModel.create_io_processor"]], "decrypt_decode() (hemodel method)": [[31, "pyhelayers.HeModel.decrypt_decode"]], "encode() (hemodel method)": [[31, "pyhelayers.HeModel.encode"]], "encode_encrypt() (hemodel method)": [[31, "pyhelayers.HeModel.encode_encrypt"]], "fit() (hemodel method)": [[31, "pyhelayers.HeModel.fit"]], "flush_to_storage() (hemodel method)": [[31, "pyhelayers.HeModel.flush_to_storage"]], "get_class_name() (hemodel method)": [[31, "pyhelayers.HeModel.get_class_name"]], "get_fit_hyperparams() (hemodel method)": [[31, "pyhelayers.HeModel.get_fit_hyperparams"]], "get_profile() (hemodel method)": [[31, "pyhelayers.HeModel.get_profile"]], "load_from_buffer() (hemodel method)": [[31, "pyhelayers.HeModel.load_from_buffer"]], "load_from_file() (hemodel method)": [[31, "pyhelayers.HeModel.load_from_file"]], "predict() (hemodel method)": [[31, "pyhelayers.HeModel.predict"]], "save_to_buffer() (hemodel method)": [[31, "pyhelayers.HeModel.save_to_buffer"]], "save_to_file() (hemodel method)": [[31, "pyhelayers.HeModel.save_to_file"]], "to_string() (hemodel method)": [[31, "pyhelayers.HeModel.to_string"]], "hemodelrunner (class in pyhelayers)": [[32, "pyhelayers.HeModelRunner"]], "__init__() (hemodelrunner method)": [[32, "pyhelayers.HeModelRunner.__init__"]], "decrypt_time (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.decrypt_time"]], "encrypt_time (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.encrypt_time"]], "he_input_size (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.he_input_size"]], "he_model_size (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.he_model_size"]], "he_output_size (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.he_output_size"]], "key_creation_time (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.key_creation_time"]], "keys_size (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.keys_size"]], "model_encode_time (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.model_encode_time"]], "predict() (hemodelrunner method)": [[32, "pyhelayers.HeModelRunner.predict"]], "predict_time (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.predict_time"]], "to_string() (hemodelrunner method)": [[32, "pyhelayers.HeModelRunner.to_string"]], "total_predict_time (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.total_predict_time"]], "total_setup_time (hemodelrunner property)": [[32, "pyhelayers.HeModelRunner.total_setup_time"]], "heprofile (class in pyhelayers)": [[33, "pyhelayers.HeProfile"]], "__init__() (heprofile method)": [[33, "pyhelayers.HeProfile.__init__"]], "from_string() (heprofile method)": [[33, "pyhelayers.HeProfile.from_string"]], "get_context_name() (heprofile method)": [[33, "pyhelayers.HeProfile.get_context_name"]], "get_he_config_requirement() (heprofile method)": [[33, "pyhelayers.HeProfile.get_he_config_requirement"]], "get_is_model_encrypted() (heprofile method)": [[33, "pyhelayers.HeProfile.get_is_model_encrypted"]], "get_optimal_batch_size() (heprofile method)": [[33, "pyhelayers.HeProfile.get_optimal_batch_size"]], "set_not_secure() (heprofile method)": [[33, "pyhelayers.HeProfile.set_not_secure"]], "set_not_secure_mockup() (heprofile method)": [[33, "pyhelayers.HeProfile.set_not_secure_mockup"]], "to_string() (heprofile method)": [[33, "pyhelayers.HeProfile.to_string"]], "herunrequirements (class in pyhelayers)": [[34, "pyhelayers.HeRunRequirements"]], "__init__() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.__init__"]], "optimize_for_batch_size() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.optimize_for_batch_size"]], "set_aes_key_size() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_aes_key_size"]], "set_aes_number_config() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_aes_number_config"]], "set_compress_aes_key() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_compress_aes_key"]], "set_exhaustive_search() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_exhaustive_search"]], "set_fixed_num_slots() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_fixed_num_slots"]], "set_fractional_part_precision() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_fractional_part_precision"]], "set_handle_overflow() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_handle_overflow"]], "set_he_context_options() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_he_context_options"]], "set_integer_part_precision() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_integer_part_precision"]], "set_lazy_encoding() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_lazy_encoding"]], "set_max_batch_memory() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_batch_memory"]], "set_max_client_inference_cpu_time() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_client_inference_cpu_time"]], "set_max_client_inference_memory() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_client_inference_memory"]], "set_max_context_memory() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_context_memory"]], "set_max_decrypt_output_cpu_time() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_decrypt_output_cpu_time"]], "set_max_encrypt_input_cpu_time() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_encrypt_input_cpu_time"]], "set_max_fit_cpu_time() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_fit_cpu_time"]], "set_max_inference_cpu_time() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_inference_cpu_time"]], "set_max_inference_memory() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_inference_memory"]], "set_max_init_model_cpu_time() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_init_model_cpu_time"]], "set_max_input_memory() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_input_memory"]], "set_max_model_memory() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_model_memory"]], "set_max_output_memory() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_output_memory"]], "set_max_predict_cpu_time() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_max_predict_cpu_time"]], "set_model_encrypted() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_model_encrypted"]], "set_no_fixed_batch_size() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_no_fixed_batch_size"]], "set_not_secure() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_not_secure"]], "set_optimization_target() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_optimization_target"]], "set_security_level() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_security_level"]], "set_system_spec() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_system_spec"]], "set_use_aes_inputs() (herunrequirements method)": [[34, "pyhelayers.HeRunRequirements.set_use_aes_inputs"]], "hetraits (class in pyhelayers)": [[35, "pyhelayers.HeTraits"]], "__init__() (hetraits method)": [[35, "pyhelayers.HeTraits.__init__"]], "heaancontext (class in pyhelayers)": [[36, "pyhelayers.HeaanContext"]], "__init__() (heaancontext method)": [[36, "pyhelayers.HeaanContext.__init__"]], "clone() (heaancontext method)": [[36, "pyhelayers.HeaanContext.clone"]], "create() (heaancontext static method)": [[36, "pyhelayers.HeaanContext.create"]], "get_automatic_bootstrapping() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_automatic_bootstrapping"]], "get_context_id() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_context_id"]], "get_default_device() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_default_device"]], "get_default_scale() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_default_scale"]], "get_library_name() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_library_name"]], "get_modulus_chain() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_modulus_chain"]], "get_public_functions() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_public_functions"]], "get_scheme_name() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_scheme_name"]], "get_security_level() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_security_level"]], "get_signature() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_signature"]], "get_top_chain_index() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_top_chain_index"]], "get_traits() (heaancontext method)": [[36, "pyhelayers.HeaanContext.get_traits"]], "has_secret_key() (heaancontext method)": [[36, "pyhelayers.HeaanContext.has_secret_key"]], "init() (heaancontext method)": [[36, "pyhelayers.HeaanContext.init"]], "is_registered_context() (heaancontext static method)": [[36, "pyhelayers.HeaanContext.is_registered_context"]], "load_from_buffer() (heaancontext method)": [[36, "pyhelayers.HeaanContext.load_from_buffer"]], "load_from_file() (heaancontext method)": [[36, "pyhelayers.HeaanContext.load_from_file"]], "load_secret_key() (heaancontext method)": [[36, "pyhelayers.HeaanContext.load_secret_key"]], "load_secret_key_from_file() (heaancontext method)": [[36, "pyhelayers.HeaanContext.load_secret_key_from_file"]], "print_signature() (heaancontext method)": [[36, "pyhelayers.HeaanContext.print_signature"]], "public_functions_supported() (heaancontext method)": [[36, "pyhelayers.HeaanContext.public_functions_supported"]], "save_secret_key() (heaancontext method)": [[36, "pyhelayers.HeaanContext.save_secret_key"]], "save_secret_key_to_file() (heaancontext method)": [[36, "pyhelayers.HeaanContext.save_secret_key_to_file"]], "save_to_buffer() (heaancontext method)": [[36, "pyhelayers.HeaanContext.save_to_buffer"]], "save_to_file() (heaancontext method)": [[36, "pyhelayers.HeaanContext.save_to_file"]], "set_automatic_bootstrapping() (heaancontext method)": [[36, "pyhelayers.HeaanContext.set_automatic_bootstrapping"]], "set_default_device() (heaancontext method)": [[36, "pyhelayers.HeaanContext.set_default_device"]], "set_default_scale() (heaancontext method)": [[36, "pyhelayers.HeaanContext.set_default_scale"]], "slot_count() (heaancontext method)": [[36, "pyhelayers.HeaanContext.slot_count"]], "to_string() (heaancontext method)": [[36, "pyhelayers.HeaanContext.to_string"]], "helibbgvcontext (class in pyhelayers)": [[37, "pyhelayers.HelibBgvContext"]], "__init__() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.__init__"]], "clone() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.clone"]], "create() (helibbgvcontext static method)": [[37, "pyhelayers.HelibBgvContext.create"]], "get_automatic_bootstrapping() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_automatic_bootstrapping"]], "get_context_id() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_context_id"]], "get_default_device() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_default_device"]], "get_default_scale() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_default_scale"]], "get_library_name() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_library_name"]], "get_modulus_chain() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_modulus_chain"]], "get_public_functions() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_public_functions"]], "get_scheme_name() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_scheme_name"]], "get_security_level() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_security_level"]], "get_signature() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_signature"]], "get_top_chain_index() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_top_chain_index"]], "get_traits() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.get_traits"]], "has_secret_key() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.has_secret_key"]], "init() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.init"]], "is_registered_context() (helibbgvcontext static method)": [[37, "pyhelayers.HelibBgvContext.is_registered_context"]], "load_from_buffer() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.load_from_buffer"]], "load_from_file() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.load_from_file"]], "load_secret_key() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.load_secret_key"]], "load_secret_key_from_file() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.load_secret_key_from_file"]], "print_signature() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.print_signature"]], "public_functions_supported() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.public_functions_supported"]], "save_secret_key() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.save_secret_key"]], "save_secret_key_to_file() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.save_secret_key_to_file"]], "save_to_buffer() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.save_to_buffer"]], "save_to_file() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.save_to_file"]], "set_automatic_bootstrapping() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.set_automatic_bootstrapping"]], "set_default_device() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.set_default_device"]], "set_default_scale() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.set_default_scale"]], "set_ntl_num_threads() (helibbgvcontext static method)": [[37, "pyhelayers.HelibBgvContext.set_ntl_num_threads"]], "slot_count() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.slot_count"]], "to_string() (helibbgvcontext method)": [[37, "pyhelayers.HelibBgvContext.to_string"]], "helibckkscontext (class in pyhelayers)": [[38, "pyhelayers.HelibCkksContext"]], "__init__() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.__init__"]], "clone() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.clone"]], "create() (helibckkscontext static method)": [[38, "pyhelayers.HelibCkksContext.create"]], "get_automatic_bootstrapping() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_automatic_bootstrapping"]], "get_context_id() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_context_id"]], "get_default_device() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_default_device"]], "get_default_scale() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_default_scale"]], "get_enable_conjugate() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_enable_conjugate"]], "get_library_name() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_library_name"]], "get_modulus_chain() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_modulus_chain"]], "get_public_functions() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_public_functions"]], "get_scheme_name() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_scheme_name"]], "get_security_level() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_security_level"]], "get_signature() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_signature"]], "get_top_chain_index() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_top_chain_index"]], "get_traits() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.get_traits"]], "has_secret_key() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.has_secret_key"]], "init() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.init"]], "is_registered_context() (helibckkscontext static method)": [[38, "pyhelayers.HelibCkksContext.is_registered_context"]], "load_from_buffer() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.load_from_buffer"]], "load_from_file() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.load_from_file"]], "load_secret_key() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.load_secret_key"]], "load_secret_key_from_file() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.load_secret_key_from_file"]], "print_signature() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.print_signature"]], "public_functions_supported() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.public_functions_supported"]], "save_secret_key() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.save_secret_key"]], "save_secret_key_to_file() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.save_secret_key_to_file"]], "save_to_buffer() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.save_to_buffer"]], "save_to_file() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.save_to_file"]], "set_automatic_bootstrapping() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.set_automatic_bootstrapping"]], "set_default_device() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.set_default_device"]], "set_default_scale() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.set_default_scale"]], "set_ntl_num_threads() (helibckkscontext static method)": [[38, "pyhelayers.HelibCkksContext.set_ntl_num_threads"]], "slot_count() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.slot_count"]], "to_string() (helibckkscontext method)": [[38, "pyhelayers.HelibCkksContext.to_string"]], "helibconfig (class in pyhelayers)": [[39, "pyhelayers.HelibConfig"]], "__init__() (helibconfig method)": [[39, "pyhelayers.HelibConfig.__init__"]], "init_preset() (helibconfig method)": [[39, "pyhelayers.HelibConfig.init_preset"]], "load_from_buffer() (helibconfig method)": [[39, "pyhelayers.HelibConfig.load_from_buffer"]], "save_to_buffer() (helibconfig method)": [[39, "pyhelayers.HelibConfig.save_to_buffer"]], "helibcontext (class in pyhelayers)": [[40, "pyhelayers.HelibContext"]], "__init__() (helibcontext method)": [[40, "pyhelayers.HelibContext.__init__"]], "clone() (helibcontext method)": [[40, "pyhelayers.HelibContext.clone"]], "create() (helibcontext static method)": [[40, "pyhelayers.HelibContext.create"]], "get_automatic_bootstrapping() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_automatic_bootstrapping"]], "get_context_id() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_context_id"]], "get_default_device() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_default_device"]], "get_default_scale() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_default_scale"]], "get_library_name() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_library_name"]], "get_modulus_chain() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_modulus_chain"]], "get_public_functions() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_public_functions"]], "get_scheme_name() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_scheme_name"]], "get_security_level() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_security_level"]], "get_signature() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_signature"]], "get_top_chain_index() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_top_chain_index"]], "get_traits() (helibcontext method)": [[40, "pyhelayers.HelibContext.get_traits"]], "has_secret_key() (helibcontext method)": [[40, "pyhelayers.HelibContext.has_secret_key"]], "is_registered_context() (helibcontext static method)": [[40, "pyhelayers.HelibContext.is_registered_context"]], "load_from_buffer() (helibcontext method)": [[40, "pyhelayers.HelibContext.load_from_buffer"]], "load_from_file() (helibcontext method)": [[40, "pyhelayers.HelibContext.load_from_file"]], "load_secret_key() (helibcontext method)": [[40, "pyhelayers.HelibContext.load_secret_key"]], "load_secret_key_from_file() (helibcontext method)": [[40, "pyhelayers.HelibContext.load_secret_key_from_file"]], "print_signature() (helibcontext method)": [[40, "pyhelayers.HelibContext.print_signature"]], "public_functions_supported() (helibcontext method)": [[40, "pyhelayers.HelibContext.public_functions_supported"]], "save_secret_key() (helibcontext method)": [[40, "pyhelayers.HelibContext.save_secret_key"]], "save_secret_key_to_file() (helibcontext method)": [[40, "pyhelayers.HelibContext.save_secret_key_to_file"]], "save_to_buffer() (helibcontext method)": [[40, "pyhelayers.HelibContext.save_to_buffer"]], "save_to_file() (helibcontext method)": [[40, "pyhelayers.HelibContext.save_to_file"]], "set_automatic_bootstrapping() (helibcontext method)": [[40, "pyhelayers.HelibContext.set_automatic_bootstrapping"]], "set_default_device() (helibcontext method)": [[40, "pyhelayers.HelibContext.set_default_device"]], "set_default_scale() (helibcontext method)": [[40, "pyhelayers.HelibContext.set_default_scale"]], "set_ntl_num_threads() (helibcontext static method)": [[40, "pyhelayers.HelibContext.set_ntl_num_threads"]], "slot_count() (helibcontext method)": [[40, "pyhelayers.HelibContext.slot_count"]], "to_string() (helibcontext method)": [[40, "pyhelayers.HelibContext.to_string"]], "helibpreset (class in pyhelayers)": [[41, "pyhelayers.HelibPreset"]], "__init__() (helibpreset method)": [[41, "pyhelayers.HelibPreset.__init__"]], "name (helibpreset property)": [[41, "pyhelayers.HelibPreset.name"]], "kmeans (class in pyhelayers)": [[42, "pyhelayers.KMeans"]], "__init__() (kmeans method)": [[42, "pyhelayers.KMeans.__init__"]], "attach_input_storage() (kmeans method)": [[42, "pyhelayers.KMeans.attach_input_storage"]], "attach_output_storage() (kmeans method)": [[42, "pyhelayers.KMeans.attach_output_storage"]], "compile() (kmeans static method)": [[42, "pyhelayers.KMeans.compile"]], "create_context() (kmeans static method)": [[42, "pyhelayers.KMeans.create_context"]], "create_io_processor() (kmeans method)": [[42, "pyhelayers.KMeans.create_io_processor"]], "decrypt_decode() (kmeans method)": [[42, "pyhelayers.KMeans.decrypt_decode"]], "encode() (kmeans method)": [[42, "pyhelayers.KMeans.encode"]], "encode_encrypt() (kmeans method)": [[42, "pyhelayers.KMeans.encode_encrypt"]], "fit() (kmeans method)": [[42, "pyhelayers.KMeans.fit"]], "flush_to_storage() (kmeans method)": [[42, "pyhelayers.KMeans.flush_to_storage"]], "get_class_name() (kmeans method)": [[42, "pyhelayers.KMeans.get_class_name"]], "get_fit_hyperparams() (kmeans method)": [[42, "pyhelayers.KMeans.get_fit_hyperparams"]], "get_profile() (kmeans method)": [[42, "pyhelayers.KMeans.get_profile"]], "load_from_buffer() (kmeans method)": [[42, "pyhelayers.KMeans.load_from_buffer"]], "load_from_file() (kmeans method)": [[42, "pyhelayers.KMeans.load_from_file"]], "predict() (kmeans method)": [[42, "pyhelayers.KMeans.predict"]], "save_to_buffer() (kmeans method)": [[42, "pyhelayers.KMeans.save_to_buffer"]], "save_to_file() (kmeans method)": [[42, "pyhelayers.KMeans.save_to_file"]], "to_string() (kmeans method)": [[42, "pyhelayers.KMeans.to_string"]], "kmeansplain (class in pyhelayers)": [[43, "pyhelayers.KMeansPlain"]], "__init__() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.__init__"]], "create() (kmeansplain static method)": [[43, "pyhelayers.KMeansPlain.create"]], "fit() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.fit"]], "get_empty_he_model() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.get_empty_he_model"]], "get_hyper_params() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.get_hyper_params"]], "get_input_shapes_for_fit() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.get_input_shapes_for_fit"]], "get_input_shapes_for_predict() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.get_input_shapes_for_predict"]], "get_inputs_names_for_fit() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.get_inputs_names_for_fit"]], "get_inputs_names_for_predict() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.get_inputs_names_for_predict"]], "get_outputs_names_of_predict() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.get_outputs_names_of_predict"]], "init() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.init"]], "init_from_files() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.init_from_files"]], "is_fit_mode() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.is_fit_mode"]], "is_verbose() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.is_verbose"]], "predict() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.predict"]], "set_centroids() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.set_centroids"]], "to_string() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.to_string"]], "validate_init() (kmeansplain method)": [[43, "pyhelayers.KMeansPlain.validate_init"]], "lractivation (class in pyhelayers)": [[44, "pyhelayers.LRActivation"]], "__init__() (lractivation method)": [[44, "pyhelayers.LRActivation.__init__"]], "name (lractivation property)": [[44, "pyhelayers.LRActivation.name"]], "lattigocontext (class in pyhelayers)": [[45, "pyhelayers.LattigoContext"]], "__init__() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.__init__"]], "clone() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.clone"]], "create() (lattigocontext static method)": [[45, "pyhelayers.LattigoContext.create"]], "get_automatic_bootstrapping() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_automatic_bootstrapping"]], "get_context_id() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_context_id"]], "get_default_device() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_default_device"]], "get_default_scale() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_default_scale"]], "get_library_name() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_library_name"]], "get_modulus_chain() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_modulus_chain"]], "get_public_functions() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_public_functions"]], "get_scheme_name() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_scheme_name"]], "get_security_level() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_security_level"]], "get_signature() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_signature"]], "get_top_chain_index() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_top_chain_index"]], "get_traits() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.get_traits"]], "has_secret_key() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.has_secret_key"]], "init() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.init"]], "is_registered_context() (lattigocontext static method)": [[45, "pyhelayers.LattigoContext.is_registered_context"]], "load_from_buffer() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.load_from_buffer"]], "load_from_file() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.load_from_file"]], "load_secret_key() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.load_secret_key"]], "load_secret_key_from_file() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.load_secret_key_from_file"]], "print_signature() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.print_signature"]], "public_functions_supported() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.public_functions_supported"]], "save_secret_key() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.save_secret_key"]], "save_secret_key_to_file() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.save_secret_key_to_file"]], "save_to_buffer() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.save_to_buffer"]], "save_to_file() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.save_to_file"]], "set_automatic_bootstrapping() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.set_automatic_bootstrapping"]], "set_default_device() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.set_default_device"]], "set_default_scale() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.set_default_scale"]], "slot_count() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.slot_count"]], "to_string() (lattigocontext method)": [[45, "pyhelayers.LattigoContext.to_string"]], "logisticregression (class in pyhelayers)": [[46, "pyhelayers.LogisticRegression"]], "__init__() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.__init__"]], "attach_input_storage() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.attach_input_storage"]], "attach_output_storage() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.attach_output_storage"]], "compile() (logisticregression static method)": [[46, "pyhelayers.LogisticRegression.compile"]], "create_context() (logisticregression static method)": [[46, "pyhelayers.LogisticRegression.create_context"]], "create_io_processor() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.create_io_processor"]], "decrypt_decode() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.decrypt_decode"]], "encode() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.encode"]], "encode_encrypt() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.encode_encrypt"]], "fit() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.fit"]], "flush_to_storage() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.flush_to_storage"]], "get_activation() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.get_activation"]], "get_class_name() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.get_class_name"]], "get_fit_hyperparams() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.get_fit_hyperparams"]], "get_negate_sigmoid() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.get_negate_sigmoid"]], "get_num_features() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.get_num_features"]], "get_profile() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.get_profile"]], "load_from_buffer() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.load_from_buffer"]], "load_from_file() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.load_from_file"]], "predict() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.predict"]], "save_to_buffer() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.save_to_buffer"]], "save_to_file() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.save_to_file"]], "to_string() (logisticregression method)": [[46, "pyhelayers.LogisticRegression.to_string"]], "logisticregressionplain (class in pyhelayers)": [[47, "pyhelayers.LogisticRegressionPlain"]], "__init__() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.__init__"]], "create() (logisticregressionplain static method)": [[47, "pyhelayers.LogisticRegressionPlain.create"]], "fit() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.fit"]], "get_activation() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.get_activation"]], "get_bias() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.get_bias"]], "get_empty_he_model() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.get_empty_he_model"]], "get_hyper_params() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.get_hyper_params"]], "get_input_shapes_for_fit() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.get_input_shapes_for_fit"]], "get_input_shapes_for_predict() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.get_input_shapes_for_predict"]], "get_inputs_names_for_fit() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.get_inputs_names_for_fit"]], "get_inputs_names_for_predict() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.get_inputs_names_for_predict"]], "get_outputs_names_of_predict() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.get_outputs_names_of_predict"]], "get_weights() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.get_weights"]], "init() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.init"]], "init_from_files() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.init_from_files"]], "is_fit_mode() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.is_fit_mode"]], "is_verbose() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.is_verbose"]], "predict() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.predict"]], "to_string() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.to_string"]], "validate_init() (logisticregressionplain method)": [[47, "pyhelayers.LogisticRegressionPlain.validate_init"]], "modelioprocessor (class in pyhelayers)": [[48, "pyhelayers.ModelIoProcessor"]], "__init__() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.__init__"]], "attach_input_storage() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.attach_input_storage"]], "attach_output_storage() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.attach_output_storage"]], "decrypt_decode_output() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.decrypt_decode_output"]], "decrypt_decode_outputs() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.decrypt_decode_outputs"]], "encode_encrypt_inputs_for_fit() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.encode_encrypt_inputs_for_fit"]], "encode_encrypt_inputs_for_predict() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.encode_encrypt_inputs_for_predict"]], "flush_to_storage() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.flush_to_storage"]], "get_class_name() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.get_class_name"]], "get_data_packing() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.get_data_packing"]], "load_from_buffer() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.load_from_buffer"]], "load_from_file() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.load_from_file"]], "save_to_buffer() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.save_to_buffer"]], "save_to_file() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.save_to_file"]], "to_string() (modelioprocessor method)": [[48, "pyhelayers.ModelIoProcessor.to_string"]], "nativefunctionevaluator (class in pyhelayers)": [[49, "pyhelayers.NativeFunctionEvaluator"]], "__init__() (nativefunctionevaluator method)": [[49, "pyhelayers.NativeFunctionEvaluator.__init__"]], "power_in_place() (nativefunctionevaluator method)": [[49, "pyhelayers.NativeFunctionEvaluator.power_in_place"]], "total_product() (nativefunctionevaluator method)": [[49, "pyhelayers.NativeFunctionEvaluator.total_product"]], "neuralnet (class in pyhelayers)": [[50, "pyhelayers.NeuralNet"]], "__init__() (neuralnet method)": [[50, "pyhelayers.NeuralNet.__init__"]], "attach_input_storage() (neuralnet method)": [[50, "pyhelayers.NeuralNet.attach_input_storage"]], "attach_output_storage() (neuralnet method)": [[50, "pyhelayers.NeuralNet.attach_output_storage"]], "compile() (neuralnet static method)": [[50, "pyhelayers.NeuralNet.compile"]], "create_context() (neuralnet static method)": [[50, "pyhelayers.NeuralNet.create_context"]], "create_io_processor() (neuralnet method)": [[50, "pyhelayers.NeuralNet.create_io_processor"]], "decrypt_decode() (neuralnet method)": [[50, "pyhelayers.NeuralNet.decrypt_decode"]], "encode() (neuralnet method)": [[50, "pyhelayers.NeuralNet.encode"]], "encode_encrypt() (neuralnet method)": [[50, "pyhelayers.NeuralNet.encode_encrypt"]], "fit() (neuralnet method)": [[50, "pyhelayers.NeuralNet.fit"]], "flush_to_storage() (neuralnet method)": [[50, "pyhelayers.NeuralNet.flush_to_storage"]], "get_class_name() (neuralnet method)": [[50, "pyhelayers.NeuralNet.get_class_name"]], "get_fit_hyperparams() (neuralnet method)": [[50, "pyhelayers.NeuralNet.get_fit_hyperparams"]], "get_profile() (neuralnet method)": [[50, "pyhelayers.NeuralNet.get_profile"]], "load_from_buffer() (neuralnet method)": [[50, "pyhelayers.NeuralNet.load_from_buffer"]], "load_from_file() (neuralnet method)": [[50, "pyhelayers.NeuralNet.load_from_file"]], "predict() (neuralnet method)": [[50, "pyhelayers.NeuralNet.predict"]], "save_to_buffer() (neuralnet method)": [[50, "pyhelayers.NeuralNet.save_to_buffer"]], "save_to_file() (neuralnet method)": [[50, "pyhelayers.NeuralNet.save_to_file"]], "to_string() (neuralnet method)": [[50, "pyhelayers.NeuralNet.to_string"]], "neuralnetconfig (class in pyhelayers)": [[51, "pyhelayers.NeuralNetConfig"]], "__init__() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.__init__"]], "get_clear_for_physical_padding() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.get_clear_for_physical_padding"]], "get_io_channels_last() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.get_io_channels_last"]], "get_normalize_poly_activation() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.get_normalize_poly_activation"]], "get_overflow_margin() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.get_overflow_margin"]], "get_poly_activation_eval_type() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.get_poly_activation_eval_type"]], "set_clear_for_physical_padding() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.set_clear_for_physical_padding"]], "set_io_channels_last() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.set_io_channels_last"]], "set_normalize_poly_activation() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.set_normalize_poly_activation"]], "set_overflow_margin() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.set_overflow_margin"]], "set_poly_activation_eval_type() (neuralnetconfig method)": [[51, "pyhelayers.NeuralNetConfig.set_poly_activation_eval_type"]], "neuralnetplain (class in pyhelayers)": [[52, "pyhelayers.NeuralNetPlain"]], "__init__() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.__init__"]], "create() (neuralnetplain static method)": [[52, "pyhelayers.NeuralNetPlain.create"]], "fit() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.fit"]], "get_empty_he_model() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.get_empty_he_model"]], "get_hyper_params() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.get_hyper_params"]], "get_input_shapes_for_fit() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.get_input_shapes_for_fit"]], "get_input_shapes_for_predict() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.get_input_shapes_for_predict"]], "get_inputs_names_for_fit() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.get_inputs_names_for_fit"]], "get_inputs_names_for_predict() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.get_inputs_names_for_predict"]], "get_neural_net_config() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.get_neural_net_config"]], "get_outputs_names_of_predict() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.get_outputs_names_of_predict"]], "init() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.init"]], "init_from_files() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.init_from_files"]], "is_fit_mode() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.is_fit_mode"]], "is_verbose() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.is_verbose"]], "predict() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.predict"]], "to_string() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.to_string"]], "validate_init() (neuralnetplain method)": [[52, "pyhelayers.NeuralNetPlain.validate_init"]], "numberconfig (class in pyhelayers)": [[53, "pyhelayers.NumberConfig"]], "__init__() (numberconfig method)": [[53, "pyhelayers.NumberConfig.__init__"]], "bit() (numberconfig static method)": [[53, "pyhelayers.NumberConfig.bit"]], "fixed_point() (numberconfig static method)": [[53, "pyhelayers.NumberConfig.fixed_point"]], "floating_point() (numberconfig static method)": [[53, "pyhelayers.NumberConfig.floating_point"]], "integer() (numberconfig static method)": [[53, "pyhelayers.NumberConfig.integer"]], "load_from_buffer() (numberconfig method)": [[53, "pyhelayers.NumberConfig.load_from_buffer"]], "save_to_buffer() (numberconfig method)": [[53, "pyhelayers.NumberConfig.save_to_buffer"]], "to_string() (numberconfig method)": [[53, "pyhelayers.NumberConfig.to_string"]], "numbersigned (class in pyhelayers)": [[54, "pyhelayers.NumberSigned"]], "__init__() (numbersigned method)": [[54, "pyhelayers.NumberSigned.__init__"]], "name (numbersigned property)": [[54, "pyhelayers.NumberSigned.name"]], "numbersize (class in pyhelayers)": [[55, "pyhelayers.NumberSize"]], "__init__() (numbersize method)": [[55, "pyhelayers.NumberSize.__init__"]], "name (numbersize property)": [[55, "pyhelayers.NumberSize.name"]], "optimizationtarget (class in pyhelayers)": [[56, "pyhelayers.OptimizationTarget"]], "__init__() (optimizationtarget method)": [[56, "pyhelayers.OptimizationTarget.__init__"]], "name (optimizationtarget property)": [[56, "pyhelayers.OptimizationTarget.name"]], "ptile (class in pyhelayers)": [[57, "pyhelayers.PTile"]], "__init__() (ptile method)": [[57, "pyhelayers.PTile.__init__"]], "attach_input_storage() (ptile method)": [[57, "pyhelayers.PTile.attach_input_storage"]], "attach_output_storage() (ptile method)": [[57, "pyhelayers.PTile.attach_output_storage"]], "flush_to_storage() (ptile method)": [[57, "pyhelayers.PTile.flush_to_storage"]], "get_chain_index() (ptile method)": [[57, "pyhelayers.PTile.get_chain_index"]], "get_class_name() (ptile method)": [[57, "pyhelayers.PTile.get_class_name"]], "get_current_device() (ptile method)": [[57, "pyhelayers.PTile.get_current_device"]], "get_scale() (ptile method)": [[57, "pyhelayers.PTile.get_scale"]], "is_all_zeroes() (ptile method)": [[57, "pyhelayers.PTile.is_all_zeroes"]], "load_from_buffer() (ptile method)": [[57, "pyhelayers.PTile.load_from_buffer"]], "load_from_file() (ptile method)": [[57, "pyhelayers.PTile.load_from_file"]], "reduce_chain_index() (ptile method)": [[57, "pyhelayers.PTile.reduce_chain_index"]], "save_to_buffer() (ptile method)": [[57, "pyhelayers.PTile.save_to_buffer"]], "save_to_file() (ptile method)": [[57, "pyhelayers.PTile.save_to_file"]], "set_chain_index() (ptile method)": [[57, "pyhelayers.PTile.set_chain_index"]], "set_scale() (ptile method)": [[57, "pyhelayers.PTile.set_scale"]], "slot_count() (ptile method)": [[57, "pyhelayers.PTile.slot_count"]], "to_device() (ptile method)": [[57, "pyhelayers.PTile.to_device"]], "to_string() (ptile method)": [[57, "pyhelayers.PTile.to_string"]], "ptiletensor (class in pyhelayers)": [[58, "pyhelayers.PTileTensor"]], "__init__() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.__init__"]], "add_to() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.add_to"]], "add_to_raw() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.add_to_raw"]], "assert_integrity() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.assert_integrity"]], "attach_input_storage() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.attach_input_storage"]], "attach_output_storage() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.attach_output_storage"]], "flush_to_storage() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.flush_to_storage"]], "get_add() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_add"]], "get_add_raw() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_add_raw"]], "get_chain_index() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_chain_index"]], "get_class_name() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_class_name"]], "get_current_device() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_current_device"]], "get_estimated_memory_usage_bytes() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_estimated_memory_usage_bytes"]], "get_multiply() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_multiply"]], "get_multiply_and_sum() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_multiply_and_sum"]], "get_multiply_raw() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_multiply_raw"]], "get_num_used_tiles() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_num_used_tiles"]], "get_reduce_chain_index() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_reduce_chain_index"]], "get_set_chain_index() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_set_chain_index"]], "get_shape() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_shape"]], "get_tile_at() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_tile_at"]], "get_tile_by_flat_index() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.get_tile_by_flat_index"]], "load_from_buffer() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.load_from_buffer"]], "load_from_file() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.load_from_file"]], "multiply_and_sum_to() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.multiply_and_sum_to"]], "multiply_to() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.multiply_to"]], "multiply_to_raw() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.multiply_to_raw"]], "reduce_chain_index() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.reduce_chain_index"]], "save_to_buffer() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.save_to_buffer"]], "save_to_file() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.save_to_file"]], "set_chain_index() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.set_chain_index"]], "sub_from() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.sub_from"]], "sub_from_raw() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.sub_from_raw"]], "to_device() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.to_device"]], "to_string() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.to_string"]], "validate_packed() (ptiletensor method)": [[58, "pyhelayers.PTileTensor.validate_packed"]], "padding2d (class in pyhelayers)": [[59, "pyhelayers.Padding2d"]], "__init__() (padding2d method)": [[59, "pyhelayers.Padding2d.__init__"]], "all_zero() (padding2d method)": [[59, "pyhelayers.Padding2d.all_zero"]], "down (padding2d property)": [[59, "pyhelayers.Padding2d.down"]], "get_max_left_right() (padding2d method)": [[59, "pyhelayers.Padding2d.get_max_left_right"]], "get_max_up_down() (padding2d method)": [[59, "pyhelayers.Padding2d.get_max_up_down"]], "left (padding2d property)": [[59, "pyhelayers.Padding2d.left"]], "right (padding2d property)": [[59, "pyhelayers.Padding2d.right"]], "set() (padding2d method)": [[59, "pyhelayers.Padding2d.set"]], "to_string() (padding2d method)": [[59, "pyhelayers.Padding2d.to_string"]], "up (padding2d property)": [[59, "pyhelayers.Padding2d.up"]], "plainmodel (class in pyhelayers)": [[60, "pyhelayers.PlainModel"]], "__init__() (plainmodel method)": [[60, "pyhelayers.PlainModel.__init__"]], "create() (plainmodel static method)": [[60, "pyhelayers.PlainModel.create"]], "fit() (plainmodel method)": [[60, "pyhelayers.PlainModel.fit"]], "get_empty_he_model() (plainmodel method)": [[60, "pyhelayers.PlainModel.get_empty_he_model"]], "get_hyper_params() (plainmodel method)": [[60, "pyhelayers.PlainModel.get_hyper_params"]], "get_input_shapes_for_fit() (plainmodel method)": [[60, "pyhelayers.PlainModel.get_input_shapes_for_fit"]], "get_input_shapes_for_predict() (plainmodel method)": [[60, "pyhelayers.PlainModel.get_input_shapes_for_predict"]], "get_inputs_names_for_fit() (plainmodel method)": [[60, "pyhelayers.PlainModel.get_inputs_names_for_fit"]], "get_inputs_names_for_predict() (plainmodel method)": [[60, "pyhelayers.PlainModel.get_inputs_names_for_predict"]], "get_outputs_names_of_predict() (plainmodel method)": [[60, "pyhelayers.PlainModel.get_outputs_names_of_predict"]], "init() (plainmodel method)": [[60, "pyhelayers.PlainModel.init"]], "init_from_files() (plainmodel method)": [[60, "pyhelayers.PlainModel.init_from_files"]], "is_fit_mode() (plainmodel method)": [[60, "pyhelayers.PlainModel.is_fit_mode"]], "is_verbose() (plainmodel method)": [[60, "pyhelayers.PlainModel.is_verbose"]], "predict() (plainmodel method)": [[60, "pyhelayers.PlainModel.predict"]], "to_string() (plainmodel method)": [[60, "pyhelayers.PlainModel.to_string"]], "validate_init() (plainmodel method)": [[60, "pyhelayers.PlainModel.validate_init"]], "plainmodelhyperparams (class in pyhelayers)": [[61, "pyhelayers.PlainModelHyperParams"]], "__init__() (plainmodelhyperparams method)": [[61, "pyhelayers.PlainModelHyperParams.__init__"]], "d (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.d"]], "feature_ranges (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.feature_ranges"]], "features_bin_size (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.features_bin_size"]], "features_scale_target (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.features_scale_target"]], "fit_hyper_params (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.fit_hyper_params"]], "frep (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.frep"]], "grep (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.grep"]], "init_random_weights (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.init_random_weights"]], "load() (plainmodelhyperparams method)": [[61, "pyhelayers.PlainModelHyperParams.load"]], "load_from_buffer() (plainmodelhyperparams method)": [[61, "pyhelayers.PlainModelHyperParams.load_from_buffer"]], "logistic_regression_activation (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.logistic_regression_activation"]], "max_rand_value (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.max_rand_value"]], "min_rand_value (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.min_rand_value"]], "mu (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.mu"]], "negate_sigmoid_input (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.negate_sigmoid_input"]], "num_centers (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.num_centers"]], "num_samples (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.num_samples"]], "num_values_used_for_prediction (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.num_values_used_for_prediction"]], "number_of_features (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.number_of_features"]], "p (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.p"]], "phi (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.phi"]], "q (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.q"]], "sparse_rate (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.sparse_rate"]], "theta1 (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.theta1"]], "trainable (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.trainable"]], "varw (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.varw"]], "verbose (plainmodelhyperparams property)": [[61, "pyhelayers.PlainModelHyperParams.verbose"]], "printoptions (class in pyhelayers)": [[62, "pyhelayers.PrintOptions"]], "__init__() (printoptions method)": [[62, "pyhelayers.PrintOptions.__init__"]], "factor (printoptions property)": [[62, "pyhelayers.PrintOptions.factor"]], "num_printed_elements (printoptions property)": [[62, "pyhelayers.PrintOptions.num_printed_elements"]], "num_printed_last_elements (printoptions property)": [[62, "pyhelayers.PrintOptions.num_printed_last_elements"]], "precision (printoptions property)": [[62, "pyhelayers.PrintOptions.precision"]], "print_complex_numbers (printoptions property)": [[62, "pyhelayers.PrintOptions.print_complex_numbers"]], "print_encrypted_content (printoptions property)": [[62, "pyhelayers.PrintOptions.print_encrypted_content"]], "table_cell_width (printoptions property)": [[62, "pyhelayers.PrintOptions.table_cell_width"]], "tt_demo_tiles (printoptions property)": [[62, "pyhelayers.PrintOptions.tt_demo_tiles"]], "publicfunctions (class in pyhelayers)": [[63, "pyhelayers.PublicFunctions"]], "__init__() (publicfunctions method)": [[63, "pyhelayers.PublicFunctions.__init__"]], "clear() (publicfunctions method)": [[63, "pyhelayers.PublicFunctions.clear"]], "conjugate (publicfunctions property)": [[63, "pyhelayers.PublicFunctions.conjugate"]], "encrypt (publicfunctions property)": [[63, "pyhelayers.PublicFunctions.encrypt"]], "get_rotation_steps() (publicfunctions method)": [[63, "pyhelayers.PublicFunctions.get_rotation_steps"]], "load_from_buffer() (publicfunctions method)": [[63, "pyhelayers.PublicFunctions.load_from_buffer"]], "relinearize (publicfunctions property)": [[63, "pyhelayers.PublicFunctions.relinearize"]], "rotate (publicfunctions property)": [[63, "pyhelayers.PublicFunctions.rotate"]], "save_to_buffer() (publicfunctions method)": [[63, "pyhelayers.PublicFunctions.save_to_buffer"]], "set_rotation_steps() (publicfunctions method)": [[63, "pyhelayers.PublicFunctions.set_rotation_steps"]], "to_string() (publicfunctions method)": [[63, "pyhelayers.PublicFunctions.to_string"]], "pythonbackedstorage (class in pyhelayers)": [[64, "pyhelayers.PythonBackedStorage"]], "__init__() (pythonbackedstorage method)": [[64, "pyhelayers.PythonBackedStorage.__init__"]], "load() (pythonbackedstorage method)": [[64, "pyhelayers.PythonBackedStorage.load"]], "save() (pythonbackedstorage method)": [[64, "pyhelayers.PythonBackedStorage.save"]], "recordlinkageconfig (class in pyhelayers)": [[65, "pyhelayers.RecordLinkageConfig"]], "__init__() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.__init__"]], "get_fields_names() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.get_fields_names"]], "get_name_field_name() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.get_name_field_name"]], "get_num_bands() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.get_num_bands"]], "get_size_bands() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.get_size_bands"]], "get_verbosity() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.get_verbosity"]], "is_fully_initialized() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.is_fully_initialized"]], "set_num_bands_and_size_bands() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.set_num_bands_and_size_bands"]], "set_records_fields() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.set_records_fields"]], "set_verbosity() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.set_verbosity"]], "to_string() (recordlinkageconfig method)": [[65, "pyhelayers.RecordLinkageConfig.to_string"]], "recordlinkagemanager (class in pyhelayers)": [[66, "pyhelayers.RecordLinkageManager"]], "__init__() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.__init__"]], "apply_secret_key_to_records() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.apply_secret_key_to_records"]], "encrypt_fields_for_equal_rule() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.encrypt_fields_for_equal_rule"]], "encrypt_fields_for_similar_rule() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.encrypt_fields_for_similar_rule"]], "get_next_expected_function_name() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.get_next_expected_function_name"]], "get_num_matched_records() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.get_num_matched_records"]], "get_num_of_records() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.get_num_of_records"]], "init_records_from_file() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.init_records_from_file"]], "match_records_by_equal_rule() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.match_records_by_equal_rule"]], "match_records_by_similar_rule() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.match_records_by_similar_rule"]], "report_matched_records() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.report_matched_records"]], "report_matched_records_along_with_other_side_records() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.report_matched_records_along_with_other_side_records"]], "set_current_rule() (recordlinkagemanager method)": [[66, "pyhelayers.RecordLinkageManager.set_current_rule"]], "recordlinkagepackage (class in pyhelayers)": [[67, "pyhelayers.RecordLinkagePackage"]], "__init__() (recordlinkagepackage method)": [[67, "pyhelayers.RecordLinkagePackage.__init__"]], "to_string() (recordlinkagepackage method)": [[67, "pyhelayers.RecordLinkagePackage.to_string"]], "recordlinkagerule (class in pyhelayers)": [[68, "pyhelayers.RecordLinkageRule"]], "__init__() (recordlinkagerule method)": [[68, "pyhelayers.RecordLinkageRule.__init__"]], "get_field_rule_type() (recordlinkagerule method)": [[68, "pyhelayers.RecordLinkageRule.get_field_rule_type"]], "get_field_shingles_size() (recordlinkagerule method)": [[68, "pyhelayers.RecordLinkageRule.get_field_shingles_size"]], "get_field_shingles_weight() (recordlinkagerule method)": [[68, "pyhelayers.RecordLinkageRule.get_field_shingles_weight"]], "set_field() (recordlinkagerule method)": [[68, "pyhelayers.RecordLinkageRule.set_field"]], "to_string() (recordlinkagerule method)": [[68, "pyhelayers.RecordLinkageRule.to_string"]], "recordlinkageruletype (class in pyhelayers)": [[69, "pyhelayers.RecordLinkageRuleType"]], "__init__() (recordlinkageruletype method)": [[69, "pyhelayers.RecordLinkageRuleType.__init__"]], "name (recordlinkageruletype property)": [[69, "pyhelayers.RecordLinkageRuleType.name"]], "rotationsettype (class in pyhelayers)": [[70, "pyhelayers.RotationSetType"]], "__init__() (rotationsettype method)": [[70, "pyhelayers.RotationSetType.__init__"]], "name (rotationsettype property)": [[70, "pyhelayers.RotationSetType.name"]], "rtspsimanager (class in pyhelayers)": [[71, "pyhelayers.RtsPsiManager"]], "__init__() (rtspsimanager method)": [[71, "pyhelayers.RtsPsiManager.__init__"]], "compaction() (rtspsimanager method)": [[71, "pyhelayers.RtsPsiManager.compaction"]], "generate_indicator_vector() (rtspsimanager method)": [[71, "pyhelayers.RtsPsiManager.generate_indicator_vector"]], "get_uids_mapping() (rtspsimanager method)": [[71, "pyhelayers.RtsPsiManager.get_uids_mapping"]], "get_uninserted_uids() (rtspsimanager method)": [[71, "pyhelayers.RtsPsiManager.get_uninserted_uids"]], "get_verbosity() (rtspsimanager method)": [[71, "pyhelayers.RtsPsiManager.get_verbosity"]], "insert_to_hash() (rtspsimanager method)": [[71, "pyhelayers.RtsPsiManager.insert_to_hash"]], "multiply_indicator_vectors() (rtspsimanager method)": [[71, "pyhelayers.RtsPsiManager.multiply_indicator_vectors"]], "set_verbosity() (rtspsimanager method)": [[71, "pyhelayers.RtsPsiManager.set_verbosity"]], "sealckkscontext (class in pyhelayers)": [[72, "pyhelayers.SealCkksContext"]], "__init__() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.__init__"]], "clone() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.clone"]], "create() (sealckkscontext static method)": [[72, "pyhelayers.SealCkksContext.create"]], "get_accurate_scale() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_accurate_scale"]], "get_automatic_bootstrapping() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_automatic_bootstrapping"]], "get_context_id() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_context_id"]], "get_default_device() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_default_device"]], "get_default_scale() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_default_scale"]], "get_library_name() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_library_name"]], "get_modulus_chain() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_modulus_chain"]], "get_public_functions() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_public_functions"]], "get_scheme_name() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_scheme_name"]], "get_security_level() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_security_level"]], "get_signature() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_signature"]], "get_top_chain_index() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_top_chain_index"]], "get_traits() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_traits"]], "get_use_accurate_scaling() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.get_use_accurate_scaling"]], "has_secret_key() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.has_secret_key"]], "init() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.init"]], "is_registered_context() (sealckkscontext static method)": [[72, "pyhelayers.SealCkksContext.is_registered_context"]], "load_from_buffer() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.load_from_buffer"]], "load_from_file() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.load_from_file"]], "load_secret_key() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.load_secret_key"]], "load_secret_key_from_file() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.load_secret_key_from_file"]], "print_signature() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.print_signature"]], "public_functions_supported() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.public_functions_supported"]], "save_secret_key() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.save_secret_key"]], "save_secret_key_to_file() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.save_secret_key_to_file"]], "save_to_buffer() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.save_to_buffer"]], "save_to_file() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.save_to_file"]], "set_automatic_bootstrapping() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.set_automatic_bootstrapping"]], "set_default_device() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.set_default_device"]], "set_default_scale() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.set_default_scale"]], "set_use_accurate_scaling() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.set_use_accurate_scaling"]], "slot_count() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.slot_count"]], "to_string() (sealckkscontext method)": [[72, "pyhelayers.SealCkksContext.to_string"]], "storage (class in pyhelayers)": [[73, "pyhelayers.Storage"]], "__init__() (storage method)": [[73, "pyhelayers.Storage.__init__"]], "load() (storage method)": [[73, "pyhelayers.Storage.load"]], "save() (storage method)": [[73, "pyhelayers.Storage.save"]], "ttdim (class in pyhelayers)": [[74, "pyhelayers.TTDim"]], "__init__() (ttdim method)": [[74, "pyhelayers.TTDim.__init__"]], "apply_compatibility_adjustments() (ttdim method)": [[74, "pyhelayers.TTDim.apply_compatibility_adjustments"]], "duplicate() (ttdim method)": [[74, "pyhelayers.TTDim.duplicate"]], "get_are_unused_slots_unknown() (ttdim method)": [[74, "pyhelayers.TTDim.get_are_unused_slots_unknown"]], "get_external_size() (ttdim method)": [[74, "pyhelayers.TTDim.get_external_size"]], "get_is_complex_packed() (ttdim method)": [[74, "pyhelayers.TTDim.get_is_complex_packed"]], "get_max_used_slots_in_tile() (ttdim method)": [[74, "pyhelayers.TTDim.get_max_used_slots_in_tile"]], "get_num_duplicated() (ttdim method)": [[74, "pyhelayers.TTDim.get_num_duplicated"]], "get_num_duplicated_slots() (ttdim method)": [[74, "pyhelayers.TTDim.get_num_duplicated_slots"]], "get_num_unused_slots() (ttdim method)": [[74, "pyhelayers.TTDim.get_num_unused_slots"]], "get_num_used_slots() (ttdim method)": [[74, "pyhelayers.TTDim.get_num_used_slots"]], "get_original_size() (ttdim method)": [[74, "pyhelayers.TTDim.get_original_size"]], "get_original_size_slots() (ttdim method)": [[74, "pyhelayers.TTDim.get_original_size_slots"]], "get_tile_size() (ttdim method)": [[74, "pyhelayers.TTDim.get_tile_size"]], "is_compatible() (ttdim method)": [[74, "pyhelayers.TTDim.is_compatible"]], "is_degenerate_tile() (ttdim method)": [[74, "pyhelayers.TTDim.is_degenerate_tile"]], "is_equal_on_original_slots() (ttdim method)": [[74, "pyhelayers.TTDim.is_equal_on_original_slots"]], "is_fully_duplicated() (ttdim method)": [[74, "pyhelayers.TTDim.is_fully_duplicated"]], "is_incomplete() (ttdim method)": [[74, "pyhelayers.TTDim.is_incomplete"]], "is_interleaved() (ttdim method)": [[74, "pyhelayers.TTDim.is_interleaved"]], "load_from_buffer() (ttdim method)": [[74, "pyhelayers.TTDim.load_from_buffer"]], "reduce_original_size() (ttdim method)": [[74, "pyhelayers.TTDim.reduce_original_size"]], "save_to_buffer() (ttdim method)": [[74, "pyhelayers.TTDim.save_to_buffer"]], "set_are_unused_slots_unknown() (ttdim method)": [[74, "pyhelayers.TTDim.set_are_unused_slots_unknown"]], "set_incomplete() (ttdim method)": [[74, "pyhelayers.TTDim.set_incomplete"]], "set_interleaved() (ttdim method)": [[74, "pyhelayers.TTDim.set_interleaved"]], "set_interleaved_external_size() (ttdim method)": [[74, "pyhelayers.TTDim.set_interleaved_external_size"]], "set_is_complex_packed() (ttdim method)": [[74, "pyhelayers.TTDim.set_is_complex_packed"]], "set_num_duplicated() (ttdim method)": [[74, "pyhelayers.TTDim.set_num_duplicated"]], "set_original_size() (ttdim method)": [[74, "pyhelayers.TTDim.set_original_size"]], "set_tile_size() (ttdim method)": [[74, "pyhelayers.TTDim.set_tile_size"]], "set_unused_slots_unknown() (ttdim method)": [[74, "pyhelayers.TTDim.set_unused_slots_unknown"]], "to_string() (ttdim method)": [[74, "pyhelayers.TTDim.to_string"]], "ttencoder (class in pyhelayers)": [[75, "pyhelayers.TTEncoder"]], "__init__() (ttencoder method)": [[75, "pyhelayers.TTEncoder.__init__"]], "assert_equals() (ttencoder method)": [[75, "pyhelayers.TTEncoder.assert_equals"]], "decode_double() (ttencoder method)": [[75, "pyhelayers.TTEncoder.decode_double"]], "decrypt() (ttencoder method)": [[75, "pyhelayers.TTEncoder.decrypt"]], "decrypt_decode_double() (ttencoder method)": [[75, "pyhelayers.TTEncoder.decrypt_decode_double"]], "encode() (ttencoder method)": [[75, "pyhelayers.TTEncoder.encode"]], "encode_encrypt() (ttencoder method)": [[75, "pyhelayers.TTEncoder.encode_encrypt"]], "encrypt() (ttencoder method)": [[75, "pyhelayers.TTEncoder.encrypt"]], "get_encoder() (ttencoder method)": [[75, "pyhelayers.TTEncoder.get_encoder"]], "ttfunctionevaluator (class in pyhelayers)": [[76, "pyhelayers.TTFunctionEvaluator"]], "__init__() (ttfunctionevaluator method)": [[76, "pyhelayers.TTFunctionEvaluator.__init__"]], "compare() (ttfunctionevaluator method)": [[76, "pyhelayers.TTFunctionEvaluator.compare"]], "inverse() (ttfunctionevaluator method)": [[76, "pyhelayers.TTFunctionEvaluator.inverse"]], "poly_eval_in_place() (ttfunctionevaluator method)": [[76, "pyhelayers.TTFunctionEvaluator.poly_eval_in_place"]], "pow_in_place() (ttfunctionevaluator method)": [[76, "pyhelayers.TTFunctionEvaluator.pow_in_place"]], "sigmoid3_in_place() (ttfunctionevaluator method)": [[76, "pyhelayers.TTFunctionEvaluator.sigmoid3_in_place"]], "sigmoid7_in_place() (ttfunctionevaluator method)": [[76, "pyhelayers.TTFunctionEvaluator.sigmoid7_in_place"]], "sigmoid9_in_place() (ttfunctionevaluator method)": [[76, "pyhelayers.TTFunctionEvaluator.sigmoid9_in_place"]], "sign_in_place() (ttfunctionevaluator method)": [[76, "pyhelayers.TTFunctionEvaluator.sign_in_place"]], "ttshape (class in pyhelayers)": [[77, "pyhelayers.TTShape"]], "__init__() (ttshape method)": [[77, "pyhelayers.TTShape.__init__"]], "add_dim() (ttshape method)": [[77, "pyhelayers.TTShape.add_dim"]], "apply_compatibility_adjustments() (ttshape method)": [[77, "pyhelayers.TTShape.apply_compatibility_adjustments"]], "are_all_dims_incomplete() (ttshape method)": [[77, "pyhelayers.TTShape.are_all_dims_incomplete"]], "assert_compatible() (ttshape method)": [[77, "pyhelayers.TTShape.assert_compatible"]], "clear_unknowns() (ttshape method)": [[77, "pyhelayers.TTShape.clear_unknowns"]], "contains_unknown_unused_slots() (ttshape method)": [[77, "pyhelayers.TTShape.contains_unknown_unused_slots"]], "get_dim() (ttshape method)": [[77, "pyhelayers.TTShape.get_dim"]], "get_external_sizes() (ttshape method)": [[77, "pyhelayers.TTShape.get_external_sizes"]], "get_incomplete_tile_sizes() (ttshape method)": [[77, "pyhelayers.TTShape.get_incomplete_tile_sizes"]], "get_num_dims() (ttshape method)": [[77, "pyhelayers.TTShape.get_num_dims"]], "get_num_slots_in_tile() (ttshape method)": [[77, "pyhelayers.TTShape.get_num_slots_in_tile"]], "get_num_used_tiles() (ttshape method)": [[77, "pyhelayers.TTShape.get_num_used_tiles"]], "get_original_sizes() (ttshape method)": [[77, "pyhelayers.TTShape.get_original_sizes"]], "get_rotate_offset_of_dim() (ttshape method)": [[77, "pyhelayers.TTShape.get_rotate_offset_of_dim"]], "get_sub_shape() (ttshape method)": [[77, "pyhelayers.TTShape.get_sub_shape"]], "get_tile_sizes() (ttshape method)": [[77, "pyhelayers.TTShape.get_tile_sizes"]], "get_with_duplicated_dim() (ttshape method)": [[77, "pyhelayers.TTShape.get_with_duplicated_dim"]], "get_with_duplicated_dims() (ttshape method)": [[77, "pyhelayers.TTShape.get_with_duplicated_dims"]], "insert_dim_at() (ttshape method)": [[77, "pyhelayers.TTShape.insert_dim_at"]], "is_compatible() (ttshape method)": [[77, "pyhelayers.TTShape.is_compatible"]], "is_first_non_degenerate_tile_dim() (ttshape method)": [[77, "pyhelayers.TTShape.is_first_non_degenerate_tile_dim"]], "is_incomplete() (ttshape method)": [[77, "pyhelayers.TTShape.is_incomplete"]], "load_from_buffer() (ttshape method)": [[77, "pyhelayers.TTShape.load_from_buffer"]], "save_to_buffer() (ttshape method)": [[77, "pyhelayers.TTShape.save_to_buffer"]], "set_all_unused_slots_unknown() (ttshape method)": [[77, "pyhelayers.TTShape.set_all_unused_slots_unknown"]], "set_original_sizes() (ttshape method)": [[77, "pyhelayers.TTShape.set_original_sizes"]], "tile_layout_to_string() (ttshape method)": [[77, "pyhelayers.TTShape.tile_layout_to_string"]], "to_string() (ttshape method)": [[77, "pyhelayers.TTShape.to_string"]], "table (class in pyhelayers)": [[78, "pyhelayers.Table"]], "__init__() (table method)": [[78, "pyhelayers.Table.__init__"]], "attach_input_storage() (table method)": [[78, "pyhelayers.Table.attach_input_storage"]], "attach_output_storage() (table method)": [[78, "pyhelayers.Table.attach_output_storage"]], "average_query() (table method)": [[78, "pyhelayers.Table.average_query"]], "count_query() (table method)": [[78, "pyhelayers.Table.count_query"]], "create_compare_value() (table method)": [[78, "pyhelayers.Table.create_compare_value"]], "create_indicators_for_col() (table method)": [[78, "pyhelayers.Table.create_indicators_for_col"]], "flush_to_storage() (table method)": [[78, "pyhelayers.Table.flush_to_storage"]], "get_cell_content() (table method)": [[78, "pyhelayers.Table.get_cell_content"]], "get_class_name() (table method)": [[78, "pyhelayers.Table.get_class_name"]], "get_num_of_rows() (table method)": [[78, "pyhelayers.Table.get_num_of_rows"]], "load_from_buffer() (table method)": [[78, "pyhelayers.Table.load_from_buffer"]], "load_from_file() (table method)": [[78, "pyhelayers.Table.load_from_file"]], "mult_indicators() (table method)": [[78, "pyhelayers.Table.mult_indicators"]], "post_process_average_query() (table method)": [[78, "pyhelayers.Table.post_process_average_query"]], "post_process_count_query() (table method)": [[78, "pyhelayers.Table.post_process_count_query"]], "post_process_std_dev_query() (table method)": [[78, "pyhelayers.Table.post_process_std_dev_query"]], "post_process_sum_query() (table method)": [[78, "pyhelayers.Table.post_process_sum_query"]], "post_process_sum_squares_query() (table method)": [[78, "pyhelayers.Table.post_process_sum_squares_query"]], "save_to_buffer() (table method)": [[78, "pyhelayers.Table.save_to_buffer"]], "save_to_file() (table method)": [[78, "pyhelayers.Table.save_to_file"]], "set_inverse_optimization() (table method)": [[78, "pyhelayers.Table.set_inverse_optimization"]], "standard_deviation_query() (table method)": [[78, "pyhelayers.Table.standard_deviation_query"]], "sum_query() (table method)": [[78, "pyhelayers.Table.sum_query"]], "sum_squares_query() (table method)": [[78, "pyhelayers.Table.sum_squares_query"]], "to_string() (table method)": [[78, "pyhelayers.Table.to_string"]], "tile (class in pyhelayers)": [[79, "pyhelayers.Tile"]], "__init__() (tile method)": [[79, "pyhelayers.Tile.__init__"]], "attach_input_storage() (tile method)": [[79, "pyhelayers.Tile.attach_input_storage"]], "attach_output_storage() (tile method)": [[79, "pyhelayers.Tile.attach_output_storage"]], "flush_to_storage() (tile method)": [[79, "pyhelayers.Tile.flush_to_storage"]], "get_chain_index() (tile method)": [[79, "pyhelayers.Tile.get_chain_index"]], "get_class_name() (tile method)": [[79, "pyhelayers.Tile.get_class_name"]], "get_scale() (tile method)": [[79, "pyhelayers.Tile.get_scale"]], "load_from_buffer() (tile method)": [[79, "pyhelayers.Tile.load_from_buffer"]], "load_from_file() (tile method)": [[79, "pyhelayers.Tile.load_from_file"]], "reduce_chain_index() (tile method)": [[79, "pyhelayers.Tile.reduce_chain_index"]], "save_to_buffer() (tile method)": [[79, "pyhelayers.Tile.save_to_buffer"]], "save_to_file() (tile method)": [[79, "pyhelayers.Tile.save_to_file"]], "set_chain_index() (tile method)": [[79, "pyhelayers.Tile.set_chain_index"]], "set_scale() (tile method)": [[79, "pyhelayers.Tile.set_scale"]], "slot_count() (tile method)": [[79, "pyhelayers.Tile.slot_count"]], "to_string() (tile method)": [[79, "pyhelayers.Tile.to_string"]], "tiletensor (class in pyhelayers)": [[80, "pyhelayers.TileTensor"]], "__init__() (tiletensor method)": [[80, "pyhelayers.TileTensor.__init__"]], "add_to() (tiletensor method)": [[80, "pyhelayers.TileTensor.add_to"]], "add_to_raw() (tiletensor method)": [[80, "pyhelayers.TileTensor.add_to_raw"]], "assert_integrity() (tiletensor method)": [[80, "pyhelayers.TileTensor.assert_integrity"]], "attach_input_storage() (tiletensor method)": [[80, "pyhelayers.TileTensor.attach_input_storage"]], "attach_output_storage() (tiletensor method)": [[80, "pyhelayers.TileTensor.attach_output_storage"]], "flush_to_storage() (tiletensor method)": [[80, "pyhelayers.TileTensor.flush_to_storage"]], "get_add() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_add"]], "get_add_raw() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_add_raw"]], "get_class_name() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_class_name"]], "get_current_device() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_current_device"]], "get_estimated_memory_usage_bytes() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_estimated_memory_usage_bytes"]], "get_multiply() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_multiply"]], "get_multiply_and_sum() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_multiply_and_sum"]], "get_multiply_raw() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_multiply_raw"]], "get_num_used_tiles() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_num_used_tiles"]], "get_shape() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_shape"]], "get_tile_at() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_tile_at"]], "get_tile_by_flat_index() (tiletensor method)": [[80, "pyhelayers.TileTensor.get_tile_by_flat_index"]], "load_from_buffer() (tiletensor method)": [[80, "pyhelayers.TileTensor.load_from_buffer"]], "load_from_file() (tiletensor method)": [[80, "pyhelayers.TileTensor.load_from_file"]], "multiply_and_sum_to() (tiletensor method)": [[80, "pyhelayers.TileTensor.multiply_and_sum_to"]], "multiply_to() (tiletensor method)": [[80, "pyhelayers.TileTensor.multiply_to"]], "multiply_to_raw() (tiletensor method)": [[80, "pyhelayers.TileTensor.multiply_to_raw"]], "save_to_buffer() (tiletensor method)": [[80, "pyhelayers.TileTensor.save_to_buffer"]], "save_to_file() (tiletensor method)": [[80, "pyhelayers.TileTensor.save_to_file"]], "sub_from() (tiletensor method)": [[80, "pyhelayers.TileTensor.sub_from"]], "sub_from_raw() (tiletensor method)": [[80, "pyhelayers.TileTensor.sub_from_raw"]], "to_device() (tiletensor method)": [[80, "pyhelayers.TileTensor.to_device"]], "to_string() (tiletensor method)": [[80, "pyhelayers.TileTensor.to_string"]], "validate_packed() (tiletensor method)": [[80, "pyhelayers.TileTensor.validate_packed"]], "verbosity (class in pyhelayers)": [[81, "pyhelayers.Verbosity"]], "__init__() (verbosity method)": [[81, "pyhelayers.Verbosity.__init__"]], "name (verbosity property)": [[81, "pyhelayers.Verbosity.name"]], "xgboost (class in pyhelayers)": [[82, "pyhelayers.XGBoost"]], "__init__() (xgboost method)": [[82, "pyhelayers.XGBoost.__init__"]], "attach_input_storage() (xgboost method)": [[82, "pyhelayers.XGBoost.attach_input_storage"]], "attach_output_storage() (xgboost method)": [[82, "pyhelayers.XGBoost.attach_output_storage"]], "compile() (xgboost static method)": [[82, "pyhelayers.XGBoost.compile"]], "create_context() (xgboost static method)": [[82, "pyhelayers.XGBoost.create_context"]], "create_io_processor() (xgboost method)": [[82, "pyhelayers.XGBoost.create_io_processor"]], "decrypt_decode() (xgboost method)": [[82, "pyhelayers.XGBoost.decrypt_decode"]], "encode() (xgboost method)": [[82, "pyhelayers.XGBoost.encode"]], "encode_encrypt() (xgboost method)": [[82, "pyhelayers.XGBoost.encode_encrypt"]], "fit() (xgboost method)": [[82, "pyhelayers.XGBoost.fit"]], "flush_to_storage() (xgboost method)": [[82, "pyhelayers.XGBoost.flush_to_storage"]], "get_class_name() (xgboost method)": [[82, "pyhelayers.XGBoost.get_class_name"]], "get_fit_hyperparams() (xgboost method)": [[82, "pyhelayers.XGBoost.get_fit_hyperparams"]], "get_profile() (xgboost method)": [[82, "pyhelayers.XGBoost.get_profile"]], "load_from_buffer() (xgboost method)": [[82, "pyhelayers.XGBoost.load_from_buffer"]], "load_from_file() (xgboost method)": [[82, "pyhelayers.XGBoost.load_from_file"]], "predict() (xgboost method)": [[82, "pyhelayers.XGBoost.predict"]], "save_to_buffer() (xgboost method)": [[82, "pyhelayers.XGBoost.save_to_buffer"]], "save_to_file() (xgboost method)": [[82, "pyhelayers.XGBoost.save_to_file"]], "to_string() (xgboost method)": [[82, "pyhelayers.XGBoost.to_string"]], "xgboostplain (class in pyhelayers)": [[83, "pyhelayers.XGBoostPlain"]], "__init__() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.__init__"]], "create() (xgboostplain static method)": [[83, "pyhelayers.XGBoostPlain.create"]], "fit() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.fit"]], "get_empty_he_model() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.get_empty_he_model"]], "get_hyper_params() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.get_hyper_params"]], "get_input_shapes_for_fit() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.get_input_shapes_for_fit"]], "get_input_shapes_for_predict() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.get_input_shapes_for_predict"]], "get_inputs_names_for_fit() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.get_inputs_names_for_fit"]], "get_inputs_names_for_predict() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.get_inputs_names_for_predict"]], "get_outputs_names_of_predict() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.get_outputs_names_of_predict"]], "init() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.init"]], "init_from_files() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.init_from_files"]], "is_fit_mode() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.is_fit_mode"]], "is_verbose() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.is_verbose"]], "predict() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.predict"]], "to_string() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.to_string"]], "validate_init() (xgboostplain method)": [[83, "pyhelayers.XGBoostPlain.validate_init"]], "decrypt_default_aes_encrypted_blocks_under_fhe() (in module pyhelayers)": [[84, "pyhelayers.decrypt_default_aes_encrypted_blocks_under_fhe"]], "pyhelayers.ext": [[85, "module-pyhelayers.ext"]], "model_arch (class in pyhelayers.ext)": [[86, "pyhelayers.ext.MODEL_ARCH"]], "__init__() (model_arch method)": [[86, "pyhelayers.ext.MODEL_ARCH.__init__"], [93, "pyhelayers.ext.pyfhemlimpl.pyfheml.MODEL_ARCH.__init__"]], "pyhelayers.ext.pyfhe": [[87, "module-pyhelayers.ext.pyfhe"]], "pyhelayers.ext.pyfhecommon": [[88, "module-pyhelayers.ext.pyfhecommon"]], "abc (class in pyhelayers.ext.pyfhecommon)": [[89, "pyhelayers.ext.pyfhecommon.ABC"]], "__init__() (abc method)": [[89, "pyhelayers.ext.pyfhecommon.ABC.__init__"]], "abstractmethod() (in module pyhelayers.ext.pyfhecommon)": [[90, "pyhelayers.ext.pyfhecommon.abstractmethod"]], "pyhelayers.ext.pyfhemlimpl": [[91, "module-pyhelayers.ext.pyfhemlimpl"]], "pyhelayers.ext.pyfhemlimpl.pyfheml": [[92, "module-pyhelayers.ext.pyfhemlimpl.pyfheml"]], "model_arch (class in pyhelayers.ext.pyfhemlimpl.pyfheml)": [[93, "pyhelayers.ext.pyfhemlimpl.pyfheml.MODEL_ARCH"]], "replace() (in module pyhelayers.ext)": [[94, "pyhelayers.ext.replace"]], "pyhelayers.ext.utils": [[95, "module-pyhelayers.ext.utils"]], "end_timer() (in module pyhelayers.ext.utils)": [[96, "pyhelayers.ext.utils.end_timer"]], "extract_batch() (in module pyhelayers.ext.utils)": [[97, "pyhelayers.ext.utils.extract_batch"]], "report_duration() (in module pyhelayers.ext.utils)": [[98, "pyhelayers.ext.utils.report_duration"]], "start_timer() (in module pyhelayers.ext.utils)": [[99, "pyhelayers.ext.utils.start_timer"]], "get_print_options() (in module pyhelayers)": [[100, "pyhelayers.get_print_options"]], "load_encrypted_data() (in module pyhelayers)": [[101, "pyhelayers.load_encrypted_data"]], "load_he_context() (in module pyhelayers)": [[102, "pyhelayers.load_he_context"]], "load_he_context_from_file() (in module pyhelayers)": [[103, "pyhelayers.load_he_context_from_file"]], "load_he_model() (in module pyhelayers)": [[104, "pyhelayers.load_he_model"]], "load_io_processor() (in module pyhelayers)": [[105, "pyhelayers.load_io_processor"]], "pyhelayers.mltoolbox": [[106, "module-pyhelayers.mltoolbox"]], "pyhelayers.mltoolbox.arguments": [[107, "module-pyhelayers.mltoolbox.arguments"]], "arguments (class in pyhelayers.mltoolbox.arguments)": [[108, "pyhelayers.mltoolbox.arguments.Arguments"]], "__init__() (arguments method)": [[108, "pyhelayers.mltoolbox.arguments.Arguments.__init__"]], "pyhelayers.mltoolbox.data_loader": [[109, "module-pyhelayers.mltoolbox.data_loader"]], "pyhelayers.mltoolbox.data_loader.cifar10_dataset": [[110, "module-pyhelayers.mltoolbox.data_loader.cifar10_dataset"]], "cifar10dataset (class in pyhelayers.mltoolbox.data_loader.cifar10_dataset)": [[111, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset"]], "__init__() (cifar10dataset method)": [[111, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset.__init__"]], "get_samples_per_class() (cifar10dataset method)": [[111, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset.get_samples_per_class"]], "get_test_data() (cifar10dataset method)": [[111, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset.get_test_data"]], "get_train_data() (cifar10dataset method)": [[111, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset.get_train_data"]], "get_val_data() (cifar10dataset method)": [[111, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset.get_val_data"]], "is_imbalanced() (cifar10dataset method)": [[111, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Cifar10Dataset.is_imbalanced"]], "datasetwrapper (class in pyhelayers.mltoolbox.data_loader.cifar10_dataset)": [[112, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper"]], "__init__() (datasetwrapper method)": [[112, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper.__init__"], [120, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper.__init__"], [125, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper.__init__"], [130, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper.__init__"], [133, "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper.__init__"], [137, "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper.__init__"]], "get_class_labels_dict() (datasetwrapper method)": [[112, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper.get_class_labels_dict"], [120, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper.get_class_labels_dict"], [125, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper.get_class_labels_dict"], [130, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper.get_class_labels_dict"], [133, "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper.get_class_labels_dict"], [137, "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper.get_class_labels_dict"]], "get_samples_per_class() (datasetwrapper method)": [[112, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper.get_samples_per_class"], [120, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper.get_samples_per_class"], [125, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper.get_samples_per_class"], [130, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper.get_samples_per_class"], [133, "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper.get_samples_per_class"], [137, "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper.get_samples_per_class"]], "get_test_data() (datasetwrapper method)": [[112, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper.get_test_data"], [120, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper.get_test_data"], [125, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper.get_test_data"], [130, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper.get_test_data"], [133, "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper.get_test_data"], [137, "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper.get_test_data"]], "get_train_data() (datasetwrapper method)": [[112, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper.get_train_data"], [120, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper.get_train_data"], [125, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper.get_train_data"], [130, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper.get_train_data"], [133, "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper.get_train_data"], [137, "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper.get_train_data"]], "get_val_data() (datasetwrapper method)": [[112, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper.get_val_data"], [120, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper.get_val_data"], [125, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper.get_val_data"], [130, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper.get_val_data"], [133, "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper.get_val_data"], [137, "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper.get_val_data"]], "is_imbalanced() (datasetwrapper method)": [[112, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.DatasetWrapper.is_imbalanced"], [120, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper.is_imbalanced"], [125, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper.is_imbalanced"], [130, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper.is_imbalanced"], [133, "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper.is_imbalanced"], [137, "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper.is_imbalanced"]], "subset (class in pyhelayers.mltoolbox.data_loader.cifar10_dataset)": [[113, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Subset"]], "__init__() (subset method)": [[113, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.Subset.__init__"], [138, "pyhelayers.mltoolbox.data_loader.places205_dataset.Subset.__init__"]], "get_logger() (in module pyhelayers.mltoolbox.data_loader.cifar10_dataset)": [[114, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.get_logger"]], "per_image_standardization() (in module pyhelayers.mltoolbox.data_loader.cifar10_dataset)": [[115, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.per_image_standardization"]], "train_test_split() (in module pyhelayers.mltoolbox.data_loader.cifar10_dataset)": [[116, "pyhelayers.mltoolbox.data_loader.cifar10_dataset.train_test_split"]], "pyhelayers.mltoolbox.data_loader.covidct_dataset": [[117, "module-pyhelayers.mltoolbox.data_loader.covidCT_dataset"]], "covidctdataset (class in pyhelayers.mltoolbox.data_loader.covidct_dataset)": [[118, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.CovidCTDataset"]], "__init__() (covidctdataset method)": [[118, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.CovidCTDataset.__init__"], [214, "pyhelayers.mltoolbox.trainer.CovidCTDataset.__init__"]], "get_samples_per_class() (covidctdataset method)": [[118, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.CovidCTDataset.get_samples_per_class"], [214, "pyhelayers.mltoolbox.trainer.CovidCTDataset.get_samples_per_class"]], "dataset (class in pyhelayers.mltoolbox.data_loader.covidct_dataset)": [[119, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.Dataset"]], "__init__() (dataset method)": [[119, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.Dataset.__init__"], [124, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.Dataset.__init__"], [129, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.Dataset.__init__"], [136, "pyhelayers.mltoolbox.data_loader.places205_dataset.Dataset.__init__"]], "datasetwrapper (class in pyhelayers.mltoolbox.data_loader.covidct_dataset)": [[120, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.DatasetWrapper"]], "get_logger() (in module pyhelayers.mltoolbox.data_loader.covidct_dataset)": [[121, "pyhelayers.mltoolbox.data_loader.covidCT_dataset.get_logger"]], "pyhelayers.mltoolbox.data_loader.covidxray_dataset": [[122, "module-pyhelayers.mltoolbox.data_loader.covidXray_dataset"]], "covidxraydataset (class in pyhelayers.mltoolbox.data_loader.covidxray_dataset)": [[123, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.CovidXrayDataset"]], "__init__() (covidxraydataset method)": [[123, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.CovidXrayDataset.__init__"], [215, "pyhelayers.mltoolbox.trainer.CovidXrayDataset.__init__"]], "dataset (class in pyhelayers.mltoolbox.data_loader.covidxray_dataset)": [[124, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.Dataset"]], "datasetwrapper (class in pyhelayers.mltoolbox.data_loader.covidxray_dataset)": [[125, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.DatasetWrapper"]], "get_logger() (in module pyhelayers.mltoolbox.data_loader.covidxray_dataset)": [[126, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.get_logger"]], "read_filepaths() (in module pyhelayers.mltoolbox.data_loader.covidxray_dataset)": [[127, "pyhelayers.mltoolbox.data_loader.covidXray_dataset.read_filepaths"]], "pyhelayers.mltoolbox.data_loader.dataset_wrapper": [[128, "module-pyhelayers.mltoolbox.data_loader.dataset_wrapper"]], "dataset (class in pyhelayers.mltoolbox.data_loader.dataset_wrapper)": [[129, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.Dataset"]], "datasetwrapper (class in pyhelayers.mltoolbox.data_loader.dataset_wrapper)": [[130, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.DatasetWrapper"]], "get_logger() (in module pyhelayers.mltoolbox.data_loader.dataset_wrapper)": [[131, "pyhelayers.mltoolbox.data_loader.dataset_wrapper.get_logger"]], "pyhelayers.mltoolbox.data_loader.ds_factory": [[132, "module-pyhelayers.mltoolbox.data_loader.ds_factory"]], "datasetwrapper (class in pyhelayers.mltoolbox.data_loader.ds_factory)": [[133, "pyhelayers.mltoolbox.data_loader.ds_factory.DatasetWrapper"]], "get_logger() (in module pyhelayers.mltoolbox.data_loader.ds_factory)": [[134, "pyhelayers.mltoolbox.data_loader.ds_factory.get_logger"]], "pyhelayers.mltoolbox.data_loader.places205_dataset": [[135, "module-pyhelayers.mltoolbox.data_loader.places205_dataset"]], "dataset (class in pyhelayers.mltoolbox.data_loader.places205_dataset)": [[136, "pyhelayers.mltoolbox.data_loader.places205_dataset.Dataset"]], "datasetwrapper (class in pyhelayers.mltoolbox.data_loader.places205_dataset)": [[137, "pyhelayers.mltoolbox.data_loader.places205_dataset.DatasetWrapper"]], "subset (class in pyhelayers.mltoolbox.data_loader.places205_dataset)": [[138, "pyhelayers.mltoolbox.data_loader.places205_dataset.Subset"]], "get_logger() (in module pyhelayers.mltoolbox.data_loader.places205_dataset)": [[139, "pyhelayers.mltoolbox.data_loader.places205_dataset.get_logger"]], "__init__() (places205dataset method)": [[140, "pyhelayers.mltoolbox.data_loader.places205_dataset.places205Dataset.__init__"], [228, "pyhelayers.mltoolbox.trainer.places205Dataset.__init__"]], "get_samples_per_class() (places205dataset method)": [[140, "pyhelayers.mltoolbox.data_loader.places205_dataset.places205Dataset.get_samples_per_class"], [228, "pyhelayers.mltoolbox.trainer.places205Dataset.get_samples_per_class"]], "places205dataset (class in pyhelayers.mltoolbox.data_loader.places205_dataset)": [[140, "pyhelayers.mltoolbox.data_loader.places205_dataset.places205Dataset"]], "random_split() (in module pyhelayers.mltoolbox.data_loader.places205_dataset)": [[141, "pyhelayers.mltoolbox.data_loader.places205_dataset.random_split"]], "train_test_split() (in module pyhelayers.mltoolbox.data_loader.places205_dataset)": [[142, "pyhelayers.mltoolbox.data_loader.places205_dataset.train_test_split"]], "pyhelayers.mltoolbox.fhe_friendly_convertor": [[143, "module-pyhelayers.mltoolbox.fhe_friendly_convertor"]], "fhefriendlyconvertor (class in pyhelayers.mltoolbox.fhe_friendly_convertor)": [[144, "pyhelayers.mltoolbox.fhe_friendly_convertor.FheFriendlyConvertor"]], "__init__() (fhefriendlyconvertor method)": [[144, "pyhelayers.mltoolbox.fhe_friendly_convertor.FheFriendlyConvertor.__init__"]], "create_train_state() (fhefriendlyconvertor method)": [[144, "pyhelayers.mltoolbox.fhe_friendly_convertor.FheFriendlyConvertor.create_train_state"]], "replace_activations() (fhefriendlyconvertor method)": [[144, "pyhelayers.mltoolbox.fhe_friendly_convertor.FheFriendlyConvertor.replace_activations"]], "reducelronplateau (class in pyhelayers.mltoolbox.fhe_friendly_convertor)": [[145, "pyhelayers.mltoolbox.fhe_friendly_convertor.ReduceLROnPlateau"]], "__init__() (reducelronplateau method)": [[145, "pyhelayers.mltoolbox.fhe_friendly_convertor.ReduceLROnPlateau.__init__"]], "simplenamespace (class in pyhelayers.mltoolbox.fhe_friendly_convertor)": [[146, "pyhelayers.mltoolbox.fhe_friendly_convertor.SimpleNamespace"]], "__init__() (simplenamespace method)": [[146, "pyhelayers.mltoolbox.fhe_friendly_convertor.SimpleNamespace.__init__"], [219, "pyhelayers.mltoolbox.trainer.SimpleNamespace.__init__"]], "trainer (class in pyhelayers.mltoolbox.fhe_friendly_convertor)": [[147, "pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer"]], "__init__() (trainer method)": [[147, "pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer.__init__"], [220, "pyhelayers.mltoolbox.trainer.Trainer.__init__"]], "get_model() (trainer method)": [[147, "pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer.get_model"], [220, "pyhelayers.mltoolbox.trainer.Trainer.get_model"]], "get_optimizer() (trainer method)": [[147, "pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer.get_optimizer"], [220, "pyhelayers.mltoolbox.trainer.Trainer.get_optimizer"]], "test() (trainer method)": [[147, "pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer.test"], [220, "pyhelayers.mltoolbox.trainer.Trainer.test"]], "train_step() (trainer method)": [[147, "pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer.train_step"], [220, "pyhelayers.mltoolbox.trainer.Trainer.train_step"]], "validation() (trainer method)": [[147, "pyhelayers.mltoolbox.fhe_friendly_convertor.Trainer.validation"], [220, "pyhelayers.mltoolbox.trainer.Trainer.validation"]], "get_logger() (in module pyhelayers.mltoolbox.fhe_friendly_convertor)": [[148, "pyhelayers.mltoolbox.fhe_friendly_convertor.get_logger"]], "get_optimizer() (in module pyhelayers.mltoolbox.fhe_friendly_convertor)": [[149, "pyhelayers.mltoolbox.fhe_friendly_convertor.get_optimizer"]], "load_checkpoint() (in module pyhelayers.mltoolbox.fhe_friendly_convertor)": [[150, "pyhelayers.mltoolbox.fhe_friendly_convertor.load_checkpoint"]], "set_seed() (in module pyhelayers.mltoolbox.fhe_friendly_convertor)": [[151, "pyhelayers.mltoolbox.fhe_friendly_convertor.set_seed"]], "starting_point() (in module pyhelayers.mltoolbox.fhe_friendly_convertor)": [[152, "pyhelayers.mltoolbox.fhe_friendly_convertor.starting_point"]], "pyhelayers.mltoolbox.he_dl_lib": [[153, "module-pyhelayers.mltoolbox.he_dl_lib"]], "pyhelayers.mltoolbox.he_dl_lib.distillation": [[154, "module-pyhelayers.mltoolbox.he_dl_lib.distillation"]], "nd_loss() (in module pyhelayers.mltoolbox.he_dl_lib.distillation)": [[155, "pyhelayers.mltoolbox.he_dl_lib.distillation.nd_loss"]], "pyhelayers.mltoolbox.he_dl_lib.my_logger": [[156, "module-pyhelayers.mltoolbox.he_dl_lib.my_logger"]], "logger (class in pyhelayers.mltoolbox.he_dl_lib.my_logger)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger"]], "__init__() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.__init__"]], "addfilter() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.addFilter"]], "addhandler() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.addHandler"]], "callhandlers() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.callHandlers"]], "critical() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.critical"]], "debug() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.debug"]], "error() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.error"]], "exception() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.exception"]], "fatal() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.fatal"]], "filter() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.filter"]], "findcaller() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.findCaller"]], "getchild() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.getChild"]], "geteffectivelevel() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.getEffectiveLevel"]], "handle() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.handle"]], "hashandlers() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.hasHandlers"]], "info() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.info"]], "isenabledfor() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.isEnabledFor"]], "log() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.log"]], "makerecord() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.makeRecord"]], "removefilter() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.removeFilter"]], "removehandler() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.removeHandler"]], "setlevel() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.setLevel"]], "warning() (logger method)": [[157, "pyhelayers.mltoolbox.he_dl_lib.my_logger.Logger.warning"]], "get_logger() (in module pyhelayers.mltoolbox.he_dl_lib.my_logger)": [[158, "pyhelayers.mltoolbox.he_dl_lib.my_logger.get_logger"]], "set_logger() (in module pyhelayers.mltoolbox.he_dl_lib.my_logger)": [[159, "pyhelayers.mltoolbox.he_dl_lib.my_logger.set_logger"]], "pyhelayers.mltoolbox.he_dl_lib.poly_activations": [[160, "module-pyhelayers.mltoolbox.he_dl_lib.poly_activations"]], "approxrelu (class in pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU"]], "__init__() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.__init__"]], "add_module() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.add_module"]], "apply() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.apply"]], "bfloat16() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.bfloat16"]], "buffers() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.buffers"]], "children() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.children"]], "cpu() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.cpu"]], "cuda() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.cuda"]], "double() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.double"]], "eval() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.eval"]], "extra_repr() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.extra_repr"]], "float() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.float"]], "forward() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.forward"]], "get_buffer() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.get_buffer"]], "get_extra_state() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.get_extra_state"]], "get_parameter() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.get_parameter"]], "get_submodule() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.get_submodule"]], "half() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.half"]], "ipu() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.ipu"]], "load_state_dict() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.load_state_dict"]], "modules() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.modules"]], "named_buffers() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.named_buffers"]], "named_children() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.named_children"]], "named_modules() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.named_modules"]], "named_parameters() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.named_parameters"]], "parameters() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.parameters"]], "register_backward_hook() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.register_backward_hook"]], "register_buffer() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.register_buffer"]], "register_forward_hook() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.register_forward_hook"]], "register_forward_pre_hook() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.register_forward_pre_hook"]], "register_full_backward_hook() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.register_full_backward_hook"]], "register_load_state_dict_post_hook() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.register_load_state_dict_post_hook"]], "register_module() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.register_module"]], "register_parameter() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.register_parameter"]], "requires_grad_() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.requires_grad_"]], "set_extra_state() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.set_extra_state"]], "share_memory() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.share_memory"]], "state_dict() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.state_dict"]], "to() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.to"]], "to_empty() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.to_empty"]], "train() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.train"]], "type() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.type"]], "xpu() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.xpu"]], "zero_grad() (approxrelu method)": [[161, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.ApproxReLU.zero_grad"]], "iterativerelu (class in pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU"]], "__init__() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.__init__"]], "add_module() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.add_module"]], "apply() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.apply"]], "bfloat16() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.bfloat16"]], "buffers() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.buffers"]], "children() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.children"]], "cpu() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.cpu"]], "cuda() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.cuda"]], "double() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.double"]], "eval() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.eval"]], "extra_repr() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.extra_repr"]], "float() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.float"]], "forward() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.forward"]], "get_buffer() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.get_buffer"]], "get_extra_state() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.get_extra_state"]], "get_parameter() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.get_parameter"]], "get_submodule() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.get_submodule"]], "half() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.half"]], "ipu() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.ipu"]], "load_state_dict() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.load_state_dict"]], "modules() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.modules"]], "named_buffers() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.named_buffers"]], "named_children() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.named_children"]], "named_modules() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.named_modules"]], "named_parameters() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.named_parameters"]], "parameters() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.parameters"]], "register_backward_hook() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.register_backward_hook"]], "register_buffer() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.register_buffer"]], "register_forward_hook() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.register_forward_hook"]], "register_forward_pre_hook() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.register_forward_pre_hook"]], "register_full_backward_hook() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.register_full_backward_hook"]], "register_load_state_dict_post_hook() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.register_load_state_dict_post_hook"]], "register_module() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.register_module"]], "register_parameter() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.register_parameter"]], "requires_grad_() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.requires_grad_"]], "set_extra_state() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.set_extra_state"]], "share_memory() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.share_memory"]], "state_dict() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.state_dict"]], "to() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.to"]], "to_empty() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.to_empty"]], "train() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.train"]], "type() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.type"]], "xpu() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.xpu"]], "zero_grad() (iterativerelu method)": [[162, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.IterativeReLU.zero_grad"]], "h (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.H"]], "parameter (class in pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter"]], "t (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.T"]], "__init__() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.__init__"]], "abs() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.abs"]], "abs_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.abs_"]], "absolute() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.absolute"]], "absolute_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.absolute_"]], "acos() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.acos"]], "acos_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.acos_"]], "acosh() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.acosh"]], "acosh_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.acosh_"]], "add() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.add"]], "add_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.add_"]], "addbmm() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addbmm"]], "addbmm_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addbmm_"]], "addcdiv() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addcdiv"]], "addcdiv_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addcdiv_"]], "addcmul() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addcmul"]], "addcmul_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addcmul_"]], "addmm() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addmm"]], "addmm_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addmm_"]], "addmv() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addmv"]], "addmv_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addmv_"]], "addr() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addr"]], "addr_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.addr_"]], "adjoint() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.adjoint"]], "align_as() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.align_as"]], "align_to() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.align_to"]], "all() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.all"]], "allclose() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.allclose"]], "amax() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.amax"]], "amin() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.amin"]], "aminmax() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.aminmax"]], "angle() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.angle"]], "any() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.any"]], "apply_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.apply_"]], "arccos() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arccos"]], "arccos_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arccos_"]], "arccosh() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arccosh"]], "arccosh_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arccosh_"]], "arcsin() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arcsin"]], "arcsin_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arcsin_"]], "arcsinh() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arcsinh"]], "arcsinh_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arcsinh_"]], "arctan() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arctan"]], "arctan2() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arctan2"]], "arctan2_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arctan2_"]], "arctan_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arctan_"]], "arctanh() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arctanh"]], "arctanh_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.arctanh_"]], "argmax() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.argmax"]], "argmin() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.argmin"]], "argsort() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.argsort"]], "argwhere() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.argwhere"]], "as_strided() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.as_strided"]], "as_strided_scatter() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.as_strided_scatter"]], "as_subclass() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.as_subclass"]], "asin() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.asin"]], "asin_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.asin_"]], "asinh() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.asinh"]], "asinh_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.asinh_"]], "atan() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.atan"]], "atan2() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.atan2"]], "atan2_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.atan2_"]], "atan_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.atan_"]], "atanh() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.atanh"]], "atanh_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.atanh_"]], "backward() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.backward"]], "baddbmm() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.baddbmm"]], "baddbmm_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.baddbmm_"]], "bernoulli() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bernoulli"]], "bernoulli_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bernoulli_"]], "bfloat16() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bfloat16"]], "bincount() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bincount"]], "bitwise_and() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_and"]], "bitwise_and_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_and_"]], "bitwise_left_shift() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_left_shift"]], "bitwise_left_shift_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_left_shift_"]], "bitwise_not() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_not"]], "bitwise_not_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_not_"]], "bitwise_or() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_or"]], "bitwise_or_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_or_"]], "bitwise_right_shift() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_right_shift"]], "bitwise_right_shift_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_right_shift_"]], "bitwise_xor() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_xor"]], "bitwise_xor_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bitwise_xor_"]], "bmm() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bmm"]], "bool() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.bool"]], "broadcast_to() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.broadcast_to"]], "byte() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.byte"]], "cauchy_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cauchy_"]], "cdouble() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cdouble"]], "ceil() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ceil"]], "ceil_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ceil_"]], "cfloat() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cfloat"]], "chalf() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.chalf"]], "char() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.char"]], "cholesky() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cholesky"]], "cholesky_inverse() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cholesky_inverse"]], "cholesky_solve() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cholesky_solve"]], "chunk() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.chunk"]], "clamp() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.clamp"]], "clamp_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.clamp_"]], "clip() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.clip"]], "clip_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.clip_"]], "clone() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.clone"]], "coalesce() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.coalesce"]], "col_indices() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.col_indices"]], "conj() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.conj"]], "conj_physical() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.conj_physical"]], "conj_physical_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.conj_physical_"]], "contiguous() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.contiguous"]], "copy_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.copy_"]], "copysign() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.copysign"]], "copysign_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.copysign_"]], "corrcoef() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.corrcoef"]], "cos() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cos"]], "cos_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cos_"]], "cosh() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cosh"]], "cosh_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cosh_"]], "count_nonzero() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.count_nonzero"]], "cov() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cov"]], "cpu() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cpu"]], "cross() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cross"]], "crow_indices() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.crow_indices"]], "cuda() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cuda"]], "cummax() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cummax"]], "cummin() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cummin"]], "cumprod() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cumprod"]], "cumprod_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cumprod_"]], "cumsum() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cumsum"]], "cumsum_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.cumsum_"]], "data_ptr() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.data_ptr"]], "deg2rad() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.deg2rad"]], "deg2rad_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.deg2rad_"]], "dense_dim() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.dense_dim"]], "dequantize() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.dequantize"]], "det() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.det"]], "detach() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.detach"]], "detach_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.detach_"]], "device (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.device"]], "diag() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.diag"]], "diag_embed() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.diag_embed"]], "diagflat() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.diagflat"]], "diagonal() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.diagonal"]], "diagonal_scatter() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.diagonal_scatter"]], "diff() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.diff"]], "digamma() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.digamma"]], "digamma_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.digamma_"]], "dim() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.dim"]], "dist() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.dist"]], "div() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.div"]], "div_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.div_"]], "divide() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.divide"]], "divide_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.divide_"]], "dot() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.dot"]], "double() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.double"]], "dsplit() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.dsplit"]], "element_size() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.element_size"]], "eq() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.eq"]], "eq_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.eq_"]], "equal() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.equal"]], "erf() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.erf"]], "erf_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.erf_"]], "erfc() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.erfc"]], "erfc_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.erfc_"]], "erfinv() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.erfinv"]], "erfinv_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.erfinv_"]], "exp() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.exp"]], "exp2() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.exp2"]], "exp2_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.exp2_"]], "exp_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.exp_"]], "expand() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.expand"]], "expand_as() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.expand_as"]], "expm1() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.expm1"]], "expm1_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.expm1_"]], "exponential_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.exponential_"]], "fill_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.fill_"]], "fill_diagonal_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.fill_diagonal_"]], "fix() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.fix"]], "fix_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.fix_"]], "flatten() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.flatten"]], "flip() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.flip"]], "fliplr() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.fliplr"]], "flipud() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.flipud"]], "float() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.float"]], "float_power() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.float_power"]], "float_power_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.float_power_"]], "floor() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.floor"]], "floor_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.floor_"]], "floor_divide() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.floor_divide"]], "floor_divide_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.floor_divide_"]], "fmax() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.fmax"]], "fmin() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.fmin"]], "fmod() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.fmod"]], "fmod_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.fmod_"]], "frac() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.frac"]], "frac_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.frac_"]], "frexp() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.frexp"]], "gather() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.gather"]], "gcd() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.gcd"]], "gcd_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.gcd_"]], "ge() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ge"]], "ge_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ge_"]], "geometric_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.geometric_"]], "geqrf() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.geqrf"]], "ger() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ger"]], "get_device() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.get_device"]], "grad (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.grad"]], "greater() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.greater"]], "greater_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.greater_"]], "greater_equal() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.greater_equal"]], "greater_equal_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.greater_equal_"]], "gt() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.gt"]], "gt_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.gt_"]], "half() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.half"]], "hardshrink() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.hardshrink"]], "has_names() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.has_names"]], "heaviside() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.heaviside"]], "heaviside_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.heaviside_"]], "histc() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.histc"]], "histogram() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.histogram"]], "hsplit() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.hsplit"]], "hypot() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.hypot"]], "hypot_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.hypot_"]], "i0() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.i0"]], "i0_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.i0_"]], "igamma() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.igamma"]], "igamma_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.igamma_"]], "igammac() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.igammac"]], "igammac_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.igammac_"]], "imag (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.imag"]], "index_add() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.index_add"]], "index_add_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.index_add_"]], "index_copy() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.index_copy"]], "index_copy_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.index_copy_"]], "index_fill() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.index_fill"]], "index_fill_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.index_fill_"]], "index_put() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.index_put"]], "index_put_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.index_put_"]], "index_reduce_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.index_reduce_"]], "index_select() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.index_select"]], "indices() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.indices"]], "inner() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.inner"]], "int() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.int"]], "int_repr() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.int_repr"]], "inverse() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.inverse"]], "ipu() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ipu"]], "is_coalesced() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_coalesced"]], "is_complex() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_complex"]], "is_conj() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_conj"]], "is_contiguous() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_contiguous"]], "is_cpu (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_cpu"]], "is_cuda (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_cuda"]], "is_floating_point() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_floating_point"]], "is_inference() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_inference"]], "is_ipu (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_ipu"]], "is_leaf (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_leaf"]], "is_meta (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_meta"]], "is_mps (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_mps"]], "is_neg() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_neg"]], "is_pinned() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_pinned"]], "is_quantized (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_quantized"]], "is_set_to() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_set_to"]], "is_shared() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_shared"]], "is_signed() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_signed"]], "is_sparse (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_sparse"]], "is_sparse_csr (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_sparse_csr"]], "is_xpu (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.is_xpu"]], "isclose() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.isclose"]], "isfinite() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.isfinite"]], "isinf() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.isinf"]], "isnan() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.isnan"]], "isneginf() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.isneginf"]], "isposinf() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.isposinf"]], "isreal() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.isreal"]], "istft() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.istft"]], "item() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.item"]], "kron() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.kron"]], "kthvalue() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.kthvalue"]], "lcm() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.lcm"]], "lcm_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.lcm_"]], "ldexp() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ldexp"]], "ldexp_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ldexp_"]], "le() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.le"]], "le_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.le_"]], "lerp() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.lerp"]], "lerp_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.lerp_"]], "less() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.less"]], "less_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.less_"]], "less_equal() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.less_equal"]], "less_equal_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.less_equal_"]], "lgamma() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.lgamma"]], "lgamma_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.lgamma_"]], "log() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.log"]], "log10() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.log10"]], "log10_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.log10_"]], "log1p() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.log1p"]], "log1p_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.log1p_"]], "log2() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.log2"]], "log2_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.log2_"]], "log_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.log_"]], "log_normal_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.log_normal_"]], "logaddexp() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logaddexp"]], "logaddexp2() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logaddexp2"]], "logcumsumexp() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logcumsumexp"]], "logdet() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logdet"]], "logical_and() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logical_and"]], "logical_and_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logical_and_"]], "logical_not() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logical_not"]], "logical_not_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logical_not_"]], "logical_or() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logical_or"]], "logical_or_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logical_or_"]], "logical_xor() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logical_xor"]], "logical_xor_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logical_xor_"]], "logit() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logit"]], "logit_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logit_"]], "logsumexp() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.logsumexp"]], "long() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.long"]], "lt() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.lt"]], "lt_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.lt_"]], "lu() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.lu"]], "lu_solve() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.lu_solve"]], "mh (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.mH"]], "mt (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.mT"]], "map_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.map_"]], "masked_fill() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.masked_fill"]], "masked_fill_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.masked_fill_"]], "masked_scatter() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.masked_scatter"]], "masked_scatter_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.masked_scatter_"]], "masked_select() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.masked_select"]], "matmul() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.matmul"]], "matrix_exp() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.matrix_exp"]], "matrix_power() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.matrix_power"]], "max() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.max"]], "maximum() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.maximum"]], "mean() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.mean"]], "median() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.median"]], "min() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.min"]], "minimum() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.minimum"]], "mm() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.mm"]], "mode() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.mode"]], "moveaxis() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.moveaxis"]], "movedim() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.movedim"]], "msort() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.msort"]], "mul() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.mul"]], "mul_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.mul_"]], "multinomial() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.multinomial"]], "multiply() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.multiply"]], "multiply_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.multiply_"]], "mv() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.mv"]], "mvlgamma() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.mvlgamma"]], "mvlgamma_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.mvlgamma_"]], "names (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.names"]], "nan_to_num() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.nan_to_num"]], "nan_to_num_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.nan_to_num_"]], "nanmean() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.nanmean"]], "nanmedian() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.nanmedian"]], "nanquantile() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.nanquantile"]], "nansum() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.nansum"]], "narrow() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.narrow"]], "narrow_copy() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.narrow_copy"]], "ndim (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ndim"]], "ndimension() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ndimension"]], "ne() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ne"]], "ne_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ne_"]], "neg() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.neg"]], "neg_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.neg_"]], "negative() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.negative"]], "negative_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.negative_"]], "nelement() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.nelement"]], "new_empty() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.new_empty"]], "new_empty_strided() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.new_empty_strided"]], "new_full() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.new_full"]], "new_ones() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.new_ones"]], "new_tensor() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.new_tensor"]], "new_zeros() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.new_zeros"]], "nextafter() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.nextafter"]], "nextafter_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.nextafter_"]], "nonzero() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.nonzero"]], "norm() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.norm"]], "normal_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.normal_"]], "not_equal() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.not_equal"]], "not_equal_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.not_equal_"]], "numel() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.numel"]], "numpy() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.numpy"]], "orgqr() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.orgqr"]], "ormqr() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ormqr"]], "outer() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.outer"]], "permute() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.permute"]], "pin_memory() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.pin_memory"]], "pinverse() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.pinverse"]], "polygamma() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.polygamma"]], "polygamma_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.polygamma_"]], "positive() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.positive"]], "pow() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.pow"]], "pow_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.pow_"]], "prod() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.prod"]], "put() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.put"]], "put_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.put_"]], "q_per_channel_axis() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.q_per_channel_axis"]], "q_per_channel_scales() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.q_per_channel_scales"]], "q_per_channel_zero_points() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.q_per_channel_zero_points"]], "q_scale() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.q_scale"]], "q_zero_point() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.q_zero_point"]], "qr() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.qr"]], "qscheme() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.qscheme"]], "quantile() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.quantile"]], "rad2deg() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.rad2deg"]], "rad2deg_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.rad2deg_"]], "random_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.random_"]], "ravel() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.ravel"]], "real (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.real"]], "reciprocal() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.reciprocal"]], "reciprocal_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.reciprocal_"]], "record_stream() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.record_stream"]], "refine_names() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.refine_names"]], "register_hook() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.register_hook"]], "remainder() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.remainder"]], "remainder_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.remainder_"]], "rename() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.rename"]], "rename_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.rename_"]], "renorm() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.renorm"]], "renorm_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.renorm_"]], "repeat() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.repeat"]], "repeat_interleave() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.repeat_interleave"]], "requires_grad (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.requires_grad"]], "requires_grad_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.requires_grad_"]], "reshape() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.reshape"]], "reshape_as() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.reshape_as"]], "resize_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.resize_"]], "resize_as_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.resize_as_"]], "resolve_conj() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.resolve_conj"]], "resolve_neg() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.resolve_neg"]], "retain_grad() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.retain_grad"]], "retains_grad (parameter attribute)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.retains_grad"]], "roll() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.roll"]], "rot90() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.rot90"]], "round() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.round"]], "round_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.round_"]], "rsqrt() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.rsqrt"]], "rsqrt_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.rsqrt_"]], "scatter() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.scatter"]], "scatter_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.scatter_"]], "scatter_add() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.scatter_add"]], "scatter_add_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.scatter_add_"]], "scatter_reduce() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.scatter_reduce"]], "scatter_reduce_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.scatter_reduce_"]], "select() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.select"]], "select_scatter() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.select_scatter"]], "set_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.set_"]], "sgn() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sgn"]], "sgn_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sgn_"]], "share_memory_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.share_memory_"]], "short() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.short"]], "sigmoid() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sigmoid"]], "sigmoid_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sigmoid_"]], "sign() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sign"]], "sign_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sign_"]], "signbit() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.signbit"]], "sin() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sin"]], "sin_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sin_"]], "sinc() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sinc"]], "sinc_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sinc_"]], "sinh() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sinh"]], "sinh_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sinh_"]], "size() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.size"]], "slice_scatter() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.slice_scatter"]], "slogdet() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.slogdet"]], "smm() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.smm"]], "sort() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sort"]], "sparse_dim() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sparse_dim"]], "sparse_mask() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sparse_mask"]], "sparse_resize_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sparse_resize_"]], "sparse_resize_and_clear_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sparse_resize_and_clear_"]], "split() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.split"]], "sqrt() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sqrt"]], "sqrt_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sqrt_"]], "square() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.square"]], "square_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.square_"]], "squeeze() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.squeeze"]], "squeeze_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.squeeze_"]], "sspaddmm() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sspaddmm"]], "std() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.std"]], "stft() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.stft"]], "storage() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.storage"]], "storage_offset() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.storage_offset"]], "storage_type() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.storage_type"]], "stride() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.stride"]], "sub() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sub"]], "sub_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sub_"]], "subtract() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.subtract"]], "subtract_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.subtract_"]], "sum() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sum"]], "sum_to_size() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.sum_to_size"]], "svd() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.svd"]], "swapaxes() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.swapaxes"]], "swapaxes_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.swapaxes_"]], "swapdims() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.swapdims"]], "swapdims_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.swapdims_"]], "symeig() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.symeig"]], "t() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.t"]], "t_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.t_"]], "take() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.take"]], "take_along_dim() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.take_along_dim"]], "tan() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.tan"]], "tan_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.tan_"]], "tanh() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.tanh"]], "tanh_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.tanh_"]], "tensor_split() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.tensor_split"]], "tile() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.tile"]], "to() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.to"]], "to_dense() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.to_dense"]], "to_mkldnn() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.to_mkldnn"]], "to_padded_tensor() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.to_padded_tensor"]], "to_sparse() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.to_sparse"]], "to_sparse_bsc() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.to_sparse_bsc"]], "to_sparse_bsr() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.to_sparse_bsr"]], "to_sparse_coo() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.to_sparse_coo"]], "to_sparse_csc() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.to_sparse_csc"]], "to_sparse_csr() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.to_sparse_csr"]], "tolist() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.tolist"]], "topk() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.topk"]], "trace() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.trace"]], "transpose() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.transpose"]], "transpose_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.transpose_"]], "triangular_solve() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.triangular_solve"]], "tril() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.tril"]], "tril_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.tril_"]], "triu() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.triu"]], "triu_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.triu_"]], "true_divide() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.true_divide"]], "true_divide_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.true_divide_"]], "trunc() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.trunc"]], "trunc_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.trunc_"]], "type() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.type"]], "type_as() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.type_as"]], "unbind() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.unbind"]], "unflatten() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.unflatten"]], "unfold() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.unfold"]], "uniform_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.uniform_"]], "unique() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.unique"]], "unique_consecutive() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.unique_consecutive"]], "unsafe_chunk() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.unsafe_chunk"]], "unsafe_split() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.unsafe_split"]], "unsqueeze() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.unsqueeze"]], "unsqueeze_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.unsqueeze_"]], "values() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.values"]], "var() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.var"]], "vdot() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.vdot"]], "view() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.view"]], "view_as() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.view_as"]], "vsplit() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.vsplit"]], "where() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.where"]], "xlogy() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.xlogy"]], "xlogy_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.xlogy_"]], "xpu() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.xpu"]], "zero_() (parameter method)": [[163, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Parameter.zero_"]], "srelu (class in pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU"]], "__init__() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.__init__"]], "add_module() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.add_module"]], "apply() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.apply"]], "bfloat16() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.bfloat16"]], "buffers() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.buffers"]], "children() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.children"]], "cpu() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.cpu"]], "cuda() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.cuda"]], "double() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.double"]], "eval() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.eval"]], "extra_repr() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.extra_repr"]], "float() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.float"]], "forward() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.forward"]], "get_buffer() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.get_buffer"]], "get_extra_state() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.get_extra_state"]], "get_parameter() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.get_parameter"]], "get_submodule() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.get_submodule"]], "half() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.half"]], "ipu() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.ipu"]], "load_state_dict() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.load_state_dict"]], "modules() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.modules"]], "named_buffers() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.named_buffers"]], "named_children() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.named_children"]], "named_modules() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.named_modules"]], "named_parameters() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.named_parameters"]], "parameters() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.parameters"]], "register_backward_hook() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.register_backward_hook"]], "register_buffer() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.register_buffer"]], "register_forward_hook() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.register_forward_hook"]], "register_forward_pre_hook() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.register_forward_pre_hook"]], "register_full_backward_hook() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.register_full_backward_hook"]], "register_load_state_dict_post_hook() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.register_load_state_dict_post_hook"]], "register_module() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.register_module"]], "register_parameter() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.register_parameter"]], "requires_grad_() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.requires_grad_"]], "set_extra_state() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.set_extra_state"]], "share_memory() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.share_memory"]], "state_dict() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.state_dict"]], "to() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.to"]], "to_empty() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.to_empty"]], "train() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.train"]], "type() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.type"]], "xpu() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.xpu"]], "zero_grad() (srelu method)": [[164, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.SReLU.zero_grad"]], "square (class in pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square"]], "__init__() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.__init__"]], "add_module() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.add_module"]], "apply() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.apply"]], "bfloat16() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.bfloat16"]], "buffers() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.buffers"]], "children() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.children"]], "cpu() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.cpu"]], "cuda() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.cuda"]], "double() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.double"]], "eval() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.eval"]], "extra_repr() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.extra_repr"]], "float() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.float"]], "forward() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.forward"]], "get_buffer() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.get_buffer"]], "get_extra_state() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.get_extra_state"]], "get_parameter() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.get_parameter"]], "get_submodule() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.get_submodule"]], "half() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.half"]], "ipu() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.ipu"]], "load_state_dict() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.load_state_dict"]], "modules() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.modules"]], "named_buffers() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.named_buffers"]], "named_children() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.named_children"]], "named_modules() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.named_modules"]], "named_parameters() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.named_parameters"]], "parameters() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.parameters"]], "register_backward_hook() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.register_backward_hook"]], "register_buffer() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.register_buffer"]], "register_forward_hook() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.register_forward_hook"]], "register_forward_pre_hook() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.register_forward_pre_hook"]], "register_full_backward_hook() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.register_full_backward_hook"]], "register_load_state_dict_post_hook() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.register_load_state_dict_post_hook"]], "register_module() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.register_module"]], "register_parameter() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.register_parameter"]], "requires_grad_() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.requires_grad_"]], "set_extra_state() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.set_extra_state"]], "share_memory() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.share_memory"]], "state_dict() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.state_dict"]], "to() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.to"]], "to_empty() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.to_empty"]], "train() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.train"]], "type() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.type"]], "xpu() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.xpu"]], "zero_grad() (square method)": [[165, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.Square.zero_grad"]], "trainablepolyrelu (class in pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU"]], "__init__() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.__init__"]], "add_module() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.add_module"]], "apply() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.apply"]], "bfloat16() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.bfloat16"]], "buffers() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.buffers"]], "children() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.children"]], "cpu() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.cpu"]], "cuda() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.cuda"]], "double() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.double"]], "eval() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.eval"]], "float() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.float"]], "forward() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.forward"]], "get_buffer() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.get_buffer"]], "get_extra_state() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.get_extra_state"]], "get_parameter() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.get_parameter"]], "get_submodule() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.get_submodule"]], "half() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.half"]], "ipu() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.ipu"]], "load_state_dict() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.load_state_dict"]], "modules() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.modules"]], "named_buffers() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.named_buffers"]], "named_children() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.named_children"]], "named_modules() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.named_modules"]], "named_parameters() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.named_parameters"]], "parameters() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.parameters"]], "register_backward_hook() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.register_backward_hook"]], "register_buffer() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.register_buffer"]], "register_forward_hook() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.register_forward_hook"]], "register_forward_pre_hook() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.register_forward_pre_hook"]], "register_full_backward_hook() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.register_full_backward_hook"]], "register_load_state_dict_post_hook() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.register_load_state_dict_post_hook"]], "register_module() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.register_module"]], "register_parameter() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.register_parameter"]], "requires_grad_() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.requires_grad_"]], "set_extra_state() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.set_extra_state"]], "share_memory() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.share_memory"]], "state_dict() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.state_dict"]], "to() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.to"]], "to_empty() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.to_empty"]], "train() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.train"]], "type() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.type"]], "xpu() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.xpu"]], "zero_grad() (trainablepolyrelu method)": [[166, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.TrainablePolyReLU.zero_grad"]], "weightedrelu (class in pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu"]], "__init__() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.__init__"]], "add_module() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.add_module"]], "apply() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.apply"]], "bfloat16() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.bfloat16"]], "buffers() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.buffers"]], "children() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.children"]], "cpu() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.cpu"]], "cuda() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.cuda"]], "double() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.double"]], "eval() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.eval"]], "float() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.float"]], "get_buffer() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.get_buffer"]], "get_extra_state() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.get_extra_state"]], "get_parameter() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.get_parameter"]], "get_submodule() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.get_submodule"]], "half() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.half"]], "ipu() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.ipu"]], "load_state_dict() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.load_state_dict"]], "modules() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.modules"]], "named_buffers() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.named_buffers"]], "named_children() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.named_children"]], "named_modules() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.named_modules"]], "named_parameters() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.named_parameters"]], "parameters() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.parameters"]], "register_backward_hook() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.register_backward_hook"]], "register_buffer() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.register_buffer"]], "register_forward_hook() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.register_forward_hook"]], "register_forward_pre_hook() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.register_forward_pre_hook"]], "register_full_backward_hook() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.register_full_backward_hook"]], "register_load_state_dict_post_hook() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.register_load_state_dict_post_hook"]], "register_module() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.register_module"]], "register_parameter() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.register_parameter"]], "requires_grad_() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.requires_grad_"]], "set_extra_state() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.set_extra_state"]], "share_memory() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.share_memory"]], "state_dict() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.state_dict"]], "to() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.to"]], "to_empty() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.to_empty"]], "train() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.train"]], "type() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.type"]], "xpu() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.xpu"]], "zero_grad() (weightedrelu method)": [[167, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.WeightedRelu.zero_grad"]], "change_module() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[168, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.change_module"]], "create_or_update_weighted_activations() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[169, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.create_or_update_weighted_activations"]], "find_modules_by_type() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[170, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.find_modules_by_type"]], "forward_iterative_relu() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[171, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.forward_iterative_relu"]], "get_activation_gen() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[172, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_activation_gen"]], "get_logger() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[173, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_logger"]], "get_module_by_name() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[174, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_module_by_name"]], "get_relu_activations() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[175, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.get_relu_activations"]], "iterative_sqrt() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[176, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.iterative_sqrt"]], "poly_activation_non_trainable() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[177, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.poly_activation_non_trainable"]], "replace_relu_activation() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[178, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.replace_relu_activation"]], "replace_relu_activations() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[179, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.replace_relu_activations"]], "round_noise_activation() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[180, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.round_noise_activation"]], "set_activation_layer() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[181, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.set_activation_layer"]], "square_activation() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[182, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.square_activation"]], "srelu_poly_activation() (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[183, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.srelu_poly_activation"]], "tryout (in module pyhelayers.mltoolbox.he_dl_lib.poly_activations)": [[184, "pyhelayers.mltoolbox.he_dl_lib.poly_activations.tryout"]], "pyhelayers.mltoolbox.he_dl_lib.singleton": [[185, "module-pyhelayers.mltoolbox.he_dl_lib.singleton"]], "pyhelayers.mltoolbox.he_dl_lib.timers": [[186, "module-pyhelayers.mltoolbox.he_dl_lib.timers"]], "get_logger() (in module pyhelayers.mltoolbox.he_dl_lib.timers)": [[187, "pyhelayers.mltoolbox.he_dl_lib.timers.get_logger"]], "perf_counter() (in module pyhelayers.mltoolbox.he_dl_lib.timers)": [[188, "pyhelayers.mltoolbox.he_dl_lib.timers.perf_counter"]], "pyhelayers.mltoolbox.model": [[189, "module-pyhelayers.mltoolbox.model"]], "pyhelayers.mltoolbox.model.dnn_factory": [[190, "module-pyhelayers.mltoolbox.model.DNN_factory"]], "lenet5 (class in pyhelayers.mltoolbox.model.dnn_factory)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5"]], "lenet5.bn_info (class in pyhelayers.mltoolbox.model.dnn_factory)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.bn_info"]], "__init__() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.__init__"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.__init__"]], "addbatchnormafteractivation() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.addBatchNormAfterActivation"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.addBatchNormAfterActivation"]], "add_batch_norm_after_conv() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.add_batch_norm_after_conv"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.add_batch_norm_after_conv"]], "add_batch_norm_before_conv() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.add_batch_norm_before_conv"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.add_batch_norm_before_conv"]], "add_module() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.add_module"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.add_module"]], "apply() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.apply"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.apply"]], "assertsize() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.assertSize"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.assertSize"]], "bfloat16() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.bfloat16"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.bfloat16"]], "buffers() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.buffers"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.buffers"]], "children() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.children"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.children"]], "cpu() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.cpu"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.cpu"]], "cuda() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.cuda"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.cuda"]], "double() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.double"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.double"]], "eval() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.eval"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.eval"]], "extra_repr() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.extra_repr"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.extra_repr"]], "float() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.float"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.float"]], "get_buffer() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.get_buffer"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.get_buffer"]], "get_extra_state() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.get_extra_state"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.get_extra_state"]], "get_input_size() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.get_input_size"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.get_input_size"]], "get_parameter() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.get_parameter"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.get_parameter"]], "get_submodule() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.get_submodule"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.get_submodule"]], "half() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.half"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.half"]], "ipu() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.ipu"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.ipu"]], "load_state_dict() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.load_state_dict"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.load_state_dict"]], "make_fhe_friendly() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.make_fhe_friendly"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.make_fhe_friendly"]], "modules() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.modules"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.modules"]], "named_buffers() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.named_buffers"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.named_buffers"]], "named_children() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.named_children"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.named_children"]], "named_modules() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.named_modules"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.named_modules"]], "named_parameters() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.named_parameters"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.named_parameters"]], "parameters() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.parameters"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.parameters"]], "post_process_activations() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.post_process_activations"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.post_process_activations"]], "register_backward_hook() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.register_backward_hook"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.register_backward_hook"]], "register_buffer() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.register_buffer"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.register_buffer"]], "register_forward_hook() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.register_forward_hook"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.register_forward_hook"]], "register_forward_pre_hook() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.register_forward_pre_hook"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.register_forward_pre_hook"]], "register_full_backward_hook() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.register_full_backward_hook"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.register_full_backward_hook"]], "register_load_state_dict_post_hook() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.register_load_state_dict_post_hook"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.register_load_state_dict_post_hook"]], "register_module() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.register_module"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.register_module"]], "register_parameter() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.register_parameter"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.register_parameter"]], "requires_grad_() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.requires_grad_"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.requires_grad_"]], "set_extra_state() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.set_extra_state"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.set_extra_state"]], "set_max_pooling_to_avg() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.set_max_pooling_to_avg"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.set_max_pooling_to_avg"]], "share_memory() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.share_memory"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.share_memory"]], "state_dict() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.state_dict"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.state_dict"]], "to() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.to"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.to"]], "to_empty() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.to_empty"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.to_empty"]], "train() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.train"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.train"]], "type() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.type"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.type"]], "xpu() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.xpu"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.xpu"]], "zero_grad() (lenet5 method)": [[191, "pyhelayers.mltoolbox.model.DNN_factory.Lenet5.zero_grad"], [202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.zero_grad"]], "squeezenet1_0_fhe (class in pyhelayers.mltoolbox.model.dnn_factory)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE"]], "squeezenet1_0_fhe.bn_info (class in pyhelayers.mltoolbox.model.dnn_factory)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.bn_info"]], "__init__() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.__init__"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.__init__"]], "addbatchnormafteractivation() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.addBatchNormAfterActivation"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.addBatchNormAfterActivation"]], "add_batch_norm_after_conv() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.add_batch_norm_after_conv"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.add_batch_norm_after_conv"]], "add_batch_norm_before_conv() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.add_batch_norm_before_conv"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.add_batch_norm_before_conv"]], "add_module() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.add_module"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.add_module"]], "apply() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.apply"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.apply"]], "assertsize() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.assertSize"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.assertSize"]], "bfloat16() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.bfloat16"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.bfloat16"]], "buffers() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.buffers"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.buffers"]], "children() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.children"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.children"]], "cpu() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.cpu"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.cpu"]], "cuda() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.cuda"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.cuda"]], "double() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.double"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.double"]], "eval() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.eval"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.eval"]], "extra_repr() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.extra_repr"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.extra_repr"]], "float() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.float"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.float"]], "get_buffer() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.get_buffer"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.get_buffer"]], "get_extra_state() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.get_extra_state"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.get_extra_state"]], "get_input_size() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.get_input_size"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.get_input_size"]], "get_parameter() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.get_parameter"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.get_parameter"]], "get_submodule() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.get_submodule"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.get_submodule"]], "half() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.half"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.half"]], "ipu() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.ipu"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.ipu"]], "load_state_dict() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.load_state_dict"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.load_state_dict"]], "make_fhe_friendly() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.make_fhe_friendly"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.make_fhe_friendly"]], "modules() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.modules"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.modules"]], "named_buffers() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.named_buffers"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.named_buffers"]], "named_children() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.named_children"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.named_children"]], "named_modules() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.named_modules"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.named_modules"]], "named_parameters() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.named_parameters"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.named_parameters"]], "parameters() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.parameters"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.parameters"]], "post_process_activations() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.post_process_activations"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.post_process_activations"]], "register_backward_hook() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.register_backward_hook"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.register_backward_hook"]], "register_buffer() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.register_buffer"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.register_buffer"]], "register_forward_hook() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.register_forward_hook"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.register_forward_hook"]], "register_forward_pre_hook() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.register_forward_pre_hook"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.register_forward_pre_hook"]], "register_full_backward_hook() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.register_full_backward_hook"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.register_full_backward_hook"]], "register_load_state_dict_post_hook() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.register_load_state_dict_post_hook"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.register_load_state_dict_post_hook"]], "register_module() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.register_module"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.register_module"]], "register_parameter() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.register_parameter"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.register_parameter"]], "requires_grad_() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.requires_grad_"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.requires_grad_"]], "set_extra_state() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.set_extra_state"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.set_extra_state"]], "set_max_pooling_to_avg() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.set_max_pooling_to_avg"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.set_max_pooling_to_avg"]], "share_memory() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.share_memory"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.share_memory"]], "state_dict() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.state_dict"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.state_dict"]], "to() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.to"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.to"]], "to_empty() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.to_empty"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.to_empty"]], "train() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.train"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.train"]], "type() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.type"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.type"]], "xpu() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.xpu"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.xpu"]], "zero_grad() (squeezenet1_0_fhe method)": [[192, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_0_FHE.zero_grad"], [207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.zero_grad"]], "squeezenet1_1_fhe (class in pyhelayers.mltoolbox.model.dnn_factory)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE"]], "squeezenet1_1_fhe.bn_info (class in pyhelayers.mltoolbox.model.dnn_factory)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.bn_info"]], "__init__() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.__init__"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.__init__"]], "addbatchnormafteractivation() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.addBatchNormAfterActivation"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.addBatchNormAfterActivation"]], "add_batch_norm_after_conv() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.add_batch_norm_after_conv"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.add_batch_norm_after_conv"]], "add_batch_norm_before_conv() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.add_batch_norm_before_conv"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.add_batch_norm_before_conv"]], "add_module() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.add_module"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.add_module"]], "apply() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.apply"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.apply"]], "assertsize() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.assertSize"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.assertSize"]], "bfloat16() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.bfloat16"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.bfloat16"]], "buffers() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.buffers"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.buffers"]], "children() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.children"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.children"]], "cpu() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.cpu"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.cpu"]], "cuda() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.cuda"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.cuda"]], "double() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.double"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.double"]], "eval() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.eval"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.eval"]], "extra_repr() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.extra_repr"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.extra_repr"]], "float() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.float"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.float"]], "get_buffer() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.get_buffer"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.get_buffer"]], "get_extra_state() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.get_extra_state"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.get_extra_state"]], "get_input_size() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.get_input_size"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.get_input_size"]], "get_parameter() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.get_parameter"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.get_parameter"]], "get_submodule() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.get_submodule"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.get_submodule"]], "half() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.half"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.half"]], "ipu() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.ipu"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.ipu"]], "load_state_dict() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.load_state_dict"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.load_state_dict"]], "make_fhe_friendly() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.make_fhe_friendly"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.make_fhe_friendly"]], "modules() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.modules"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.modules"]], "named_buffers() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.named_buffers"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.named_buffers"]], "named_children() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.named_children"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.named_children"]], "named_modules() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.named_modules"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.named_modules"]], "named_parameters() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.named_parameters"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.named_parameters"]], "parameters() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.parameters"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.parameters"]], "post_process_activations() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.post_process_activations"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.post_process_activations"]], "register_backward_hook() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.register_backward_hook"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.register_backward_hook"]], "register_buffer() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.register_buffer"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.register_buffer"]], "register_forward_hook() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.register_forward_hook"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.register_forward_hook"]], "register_forward_pre_hook() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.register_forward_pre_hook"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.register_forward_pre_hook"]], "register_full_backward_hook() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.register_full_backward_hook"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.register_full_backward_hook"]], "register_load_state_dict_post_hook() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.register_load_state_dict_post_hook"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.register_load_state_dict_post_hook"]], "register_module() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.register_module"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.register_module"]], "register_parameter() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.register_parameter"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.register_parameter"]], "requires_grad_() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.requires_grad_"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.requires_grad_"]], "set_extra_state() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.set_extra_state"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.set_extra_state"]], "set_max_pooling_to_avg() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.set_max_pooling_to_avg"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.set_max_pooling_to_avg"]], "share_memory() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.share_memory"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.share_memory"]], "state_dict() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.state_dict"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.state_dict"]], "to() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.to"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.to"]], "to_empty() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.to_empty"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.to_empty"]], "train() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.train"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.train"]], "type() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.type"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.type"]], "xpu() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.xpu"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.xpu"]], "zero_grad() (squeezenet1_1_fhe method)": [[193, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNet1_1_FHE.zero_grad"], [208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.zero_grad"]], "squeezenetchet (class in pyhelayers.mltoolbox.model.dnn_factory)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET"]], "squeezenetchet.bn_info (class in pyhelayers.mltoolbox.model.dnn_factory)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.bn_info"]], "__init__() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.__init__"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.__init__"]], "addbatchnormafteractivation() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.addBatchNormAfterActivation"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.addBatchNormAfterActivation"]], "add_batch_norm_after_conv() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.add_batch_norm_after_conv"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.add_batch_norm_after_conv"]], "add_batch_norm_before_conv() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.add_batch_norm_before_conv"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.add_batch_norm_before_conv"]], "add_module() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.add_module"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.add_module"]], "apply() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.apply"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.apply"]], "assertsize() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.assertSize"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.assertSize"]], "bfloat16() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.bfloat16"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.bfloat16"]], "buffers() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.buffers"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.buffers"]], "children() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.children"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.children"]], "cpu() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.cpu"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.cpu"]], "cuda() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.cuda"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.cuda"]], "double() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.double"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.double"]], "eval() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.eval"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.eval"]], "extra_repr() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.extra_repr"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.extra_repr"]], "float() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.float"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.float"]], "get_buffer() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.get_buffer"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.get_buffer"]], "get_extra_state() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.get_extra_state"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.get_extra_state"]], "get_input_size() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.get_input_size"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.get_input_size"]], "get_parameter() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.get_parameter"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.get_parameter"]], "get_submodule() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.get_submodule"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.get_submodule"]], "half() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.half"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.half"]], "ipu() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.ipu"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.ipu"]], "load_state_dict() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.load_state_dict"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.load_state_dict"]], "make_fhe_friendly() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.make_fhe_friendly"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.make_fhe_friendly"]], "modules() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.modules"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.modules"]], "named_buffers() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.named_buffers"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.named_buffers"]], "named_children() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.named_children"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.named_children"]], "named_modules() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.named_modules"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.named_modules"]], "named_parameters() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.named_parameters"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.named_parameters"]], "parameters() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.parameters"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.parameters"]], "post_process_activations() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.post_process_activations"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.post_process_activations"]], "register_backward_hook() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.register_backward_hook"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.register_backward_hook"]], "register_buffer() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.register_buffer"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.register_buffer"]], "register_forward_hook() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.register_forward_hook"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.register_forward_hook"]], "register_forward_pre_hook() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.register_forward_pre_hook"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.register_forward_pre_hook"]], "register_full_backward_hook() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.register_full_backward_hook"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.register_full_backward_hook"]], "register_load_state_dict_post_hook() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.register_load_state_dict_post_hook"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.register_load_state_dict_post_hook"]], "register_module() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.register_module"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.register_module"]], "register_parameter() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.register_parameter"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.register_parameter"]], "requires_grad_() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.requires_grad_"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.requires_grad_"]], "set_extra_state() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.set_extra_state"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.set_extra_state"]], "set_max_pooling_to_avg() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.set_max_pooling_to_avg"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.set_max_pooling_to_avg"]], "share_memory() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.share_memory"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.share_memory"]], "state_dict() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.state_dict"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.state_dict"]], "to() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.to"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.to"]], "to_empty() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.to_empty"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.to_empty"]], "train() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.train"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.train"]], "type() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.type"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.type"]], "xpu() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.xpu"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.xpu"]], "zero_grad() (squeezenetchet method)": [[194, "pyhelayers.mltoolbox.model.DNN_factory.SqueezeNetCHET.zero_grad"], [211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.zero_grad"]], "__init__() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.__init__"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.__init__"]], "addbatchnormafteractivation() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.addBatchNormAfterActivation"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.addBatchNormAfterActivation"]], "add_batch_norm_after_conv() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.add_batch_norm_after_conv"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.add_batch_norm_after_conv"]], "add_batch_norm_before_conv() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.add_batch_norm_before_conv"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.add_batch_norm_before_conv"]], "add_module() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.add_module"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.add_module"]], "alexnet_fhe (class in pyhelayers.mltoolbox.model.dnn_factory)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe"]], "alexnet_fhe.bn_info (class in pyhelayers.mltoolbox.model.dnn_factory)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.bn_info"]], "apply() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.apply"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.apply"]], "assertsize() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.assertSize"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.assertSize"]], "bfloat16() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.bfloat16"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.bfloat16"]], "buffers() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.buffers"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.buffers"]], "children() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.children"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.children"]], "cpu() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.cpu"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.cpu"]], "cuda() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.cuda"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.cuda"]], "double() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.double"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.double"]], "eval() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.eval"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.eval"]], "extra_repr() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.extra_repr"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.extra_repr"]], "float() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.float"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.float"]], "get_buffer() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.get_buffer"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.get_buffer"]], "get_extra_state() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.get_extra_state"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.get_extra_state"]], "get_input_size() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.get_input_size"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.get_input_size"]], "get_parameter() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.get_parameter"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.get_parameter"]], "get_submodule() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.get_submodule"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.get_submodule"]], "half() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.half"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.half"]], "ipu() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.ipu"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.ipu"]], "load_state_dict() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.load_state_dict"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.load_state_dict"]], "make_fhe_friendly() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.make_fhe_friendly"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.make_fhe_friendly"]], "modules() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.modules"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.modules"]], "named_buffers() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.named_buffers"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.named_buffers"]], "named_children() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.named_children"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.named_children"]], "named_modules() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.named_modules"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.named_modules"]], "named_parameters() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.named_parameters"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.named_parameters"]], "parameters() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.parameters"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.parameters"]], "post_process_activations() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.post_process_activations"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.post_process_activations"]], "register_backward_hook() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.register_backward_hook"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.register_backward_hook"]], "register_buffer() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.register_buffer"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.register_buffer"]], "register_forward_hook() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.register_forward_hook"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.register_forward_hook"]], "register_forward_pre_hook() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.register_forward_pre_hook"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.register_forward_pre_hook"]], "register_full_backward_hook() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.register_full_backward_hook"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.register_full_backward_hook"]], "register_load_state_dict_post_hook() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.register_load_state_dict_post_hook"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.register_load_state_dict_post_hook"]], "register_module() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.register_module"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.register_module"]], "register_parameter() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.register_parameter"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.register_parameter"]], "requires_grad_() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.requires_grad_"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.requires_grad_"]], "set_extra_state() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.set_extra_state"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.set_extra_state"]], "set_max_pooling_to_avg() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.set_max_pooling_to_avg"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.set_max_pooling_to_avg"]], "share_memory() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.share_memory"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.share_memory"]], "state_dict() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.state_dict"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.state_dict"]], "to() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.to"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.to"]], "to_empty() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.to_empty"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.to_empty"]], "train() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.train"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.train"]], "type() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.type"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.type"]], "xpu() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.xpu"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.xpu"]], "zero_grad() (alexnet_fhe method)": [[195, "pyhelayers.mltoolbox.model.DNN_factory.alexnet_fhe.zero_grad"], [200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.zero_grad"]], "get_logger() (in module pyhelayers.mltoolbox.model.dnn_factory)": [[196, "pyhelayers.mltoolbox.model.DNN_factory.get_logger"]], "get_model() (in module pyhelayers.mltoolbox.model.dnn_factory)": [[197, "pyhelayers.mltoolbox.model.DNN_factory.get_model"]], "get_model_by_name() (in module pyhelayers.mltoolbox.model.dnn_factory)": [[198, "pyhelayers.mltoolbox.model.DNN_factory.get_model_by_name"]], "pyhelayers.mltoolbox.model.alexnet_fhe": [[199, "module-pyhelayers.mltoolbox.model.alexnet_fhe"]], "alexnet_fhe (class in pyhelayers.mltoolbox.model.alexnet_fhe)": [[200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe"]], "alexnet_fhe.bn_info (class in pyhelayers.mltoolbox.model.alexnet_fhe)": [[200, "pyhelayers.mltoolbox.model.alexnet_fhe.alexnet_fhe.bn_info"]], "pyhelayers.mltoolbox.model.lenet5": [[201, "module-pyhelayers.mltoolbox.model.lenet5"]], "lenet5 (class in pyhelayers.mltoolbox.model.lenet5)": [[202, "pyhelayers.mltoolbox.model.lenet5.Lenet5"]], "lenet5.bn_info (class in pyhelayers.mltoolbox.model.lenet5)": [[202, "pyhelayers.mltoolbox.model.lenet5.Lenet5.bn_info"]], "lenet5() (in module pyhelayers.mltoolbox.model.lenet5)": [[203, "pyhelayers.mltoolbox.model.lenet5.lenet5"]], "pyhelayers.mltoolbox.model.nn_module": [[204, "module-pyhelayers.mltoolbox.model.nn_module"]], "tensor() (in module pyhelayers.mltoolbox.model.nn_module)": [[205, "pyhelayers.mltoolbox.model.nn_module.tensor"]], "pyhelayers.mltoolbox.model.squeezenet": [[206, "module-pyhelayers.mltoolbox.model.squeezenet"]], "squeezenet1_0_fhe (class in pyhelayers.mltoolbox.model.squeezenet)": [[207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE"]], "squeezenet1_0_fhe.bn_info (class in pyhelayers.mltoolbox.model.squeezenet)": [[207, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_0_FHE.bn_info"]], "squeezenet1_1_fhe (class in pyhelayers.mltoolbox.model.squeezenet)": [[208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE"]], "squeezenet1_1_fhe.bn_info (class in pyhelayers.mltoolbox.model.squeezenet)": [[208, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet1_1_FHE.bn_info"]], "squeezenet_fhe (class in pyhelayers.mltoolbox.model.squeezenet)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE"]], "squeezenet_fhe.bn_info (class in pyhelayers.mltoolbox.model.squeezenet)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.bn_info"]], "__init__() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.__init__"]], "addbatchnormafteractivation() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.addBatchNormAfterActivation"]], "add_batch_norm_after_conv() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.add_batch_norm_after_conv"]], "add_batch_norm_before_conv() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.add_batch_norm_before_conv"]], "add_module() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.add_module"]], "apply() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.apply"]], "assertsize() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.assertSize"]], "bfloat16() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.bfloat16"]], "buffers() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.buffers"]], "children() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.children"]], "cpu() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.cpu"]], "cuda() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.cuda"]], "double() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.double"]], "eval() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.eval"]], "extra_repr() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.extra_repr"]], "float() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.float"]], "get_buffer() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.get_buffer"]], "get_extra_state() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.get_extra_state"]], "get_input_size() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.get_input_size"]], "get_parameter() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.get_parameter"]], "get_submodule() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.get_submodule"]], "half() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.half"]], "ipu() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.ipu"]], "load_state_dict() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.load_state_dict"]], "make_fhe_friendly() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.make_fhe_friendly"]], "modules() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.modules"]], "named_buffers() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.named_buffers"]], "named_children() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.named_children"]], "named_modules() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.named_modules"]], "named_parameters() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.named_parameters"]], "parameters() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.parameters"]], "post_process_activations() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.post_process_activations"]], "register_backward_hook() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.register_backward_hook"]], "register_buffer() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.register_buffer"]], "register_forward_hook() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.register_forward_hook"]], "register_forward_pre_hook() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.register_forward_pre_hook"]], "register_full_backward_hook() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.register_full_backward_hook"]], "register_load_state_dict_post_hook() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.register_load_state_dict_post_hook"]], "register_module() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.register_module"]], "register_parameter() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.register_parameter"]], "requires_grad_() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.requires_grad_"]], "set_extra_state() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.set_extra_state"]], "set_max_pooling_to_avg() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.set_max_pooling_to_avg"]], "share_memory() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.share_memory"]], "state_dict() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.state_dict"]], "to() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.to"]], "to_empty() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.to_empty"]], "train() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.train"]], "type() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.type"]], "xpu() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.xpu"]], "zero_grad() (squeezenet_fhe method)": [[209, "pyhelayers.mltoolbox.model.squeezenet.SqueezeNet_FHE.zero_grad"]], "pyhelayers.mltoolbox.model.squeezenetchet": [[210, "module-pyhelayers.mltoolbox.model.squeezenetchet"]], "squeezenetchet (class in pyhelayers.mltoolbox.model.squeezenetchet)": [[211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET"]], "squeezenetchet.bn_info (class in pyhelayers.mltoolbox.model.squeezenetchet)": [[211, "pyhelayers.mltoolbox.model.squeezenetchet.SqueezeNetCHET.bn_info"]], "squeezenet_chet() (in module pyhelayers.mltoolbox.model.squeezenetchet)": [[212, "pyhelayers.mltoolbox.model.squeezenetchet.squeezenet_chet"]], "pyhelayers.mltoolbox.trainer": [[213, "module-pyhelayers.mltoolbox.trainer"]], "covidctdataset (class in pyhelayers.mltoolbox.trainer)": [[214, "pyhelayers.mltoolbox.trainer.CovidCTDataset"]], "covidxraydataset (class in pyhelayers.mltoolbox.trainer)": [[215, "pyhelayers.mltoolbox.trainer.CovidXrayDataset"]], "ddp (in module pyhelayers.mltoolbox.trainer)": [[216, "pyhelayers.mltoolbox.trainer.DDP"]], "dataloader (class in pyhelayers.mltoolbox.trainer)": [[217, "pyhelayers.mltoolbox.trainer.DataLoader"]], "__init__() (dataloader method)": [[217, "pyhelayers.mltoolbox.trainer.DataLoader.__init__"]], "distributedsampler (class in pyhelayers.mltoolbox.trainer)": [[218, "pyhelayers.mltoolbox.trainer.DistributedSampler"]], "__init__() (distributedsampler method)": [[218, "pyhelayers.mltoolbox.trainer.DistributedSampler.__init__"]], "set_epoch() (distributedsampler method)": [[218, "pyhelayers.mltoolbox.trainer.DistributedSampler.set_epoch"]], "simplenamespace (class in pyhelayers.mltoolbox.trainer)": [[219, "pyhelayers.mltoolbox.trainer.SimpleNamespace"]], "trainer (class in pyhelayers.mltoolbox.trainer)": [[220, "pyhelayers.mltoolbox.trainer.Trainer"]], "accuracy() (in module pyhelayers.mltoolbox.trainer)": [[221, "pyhelayers.mltoolbox.trainer.accuracy"]], "get_logger() (in module pyhelayers.mltoolbox.trainer)": [[222, "pyhelayers.mltoolbox.trainer.get_logger"]], "get_model_by_name() (in module pyhelayers.mltoolbox.trainer)": [[223, "pyhelayers.mltoolbox.trainer.get_model_by_name"]], "get_optimizer() (in module pyhelayers.mltoolbox.trainer)": [[224, "pyhelayers.mltoolbox.trainer.get_optimizer"]], "load_checkpoint() (in module pyhelayers.mltoolbox.trainer)": [[225, "pyhelayers.mltoolbox.trainer.load_checkpoint"]], "make_confusion_matrix() (in module pyhelayers.mltoolbox.trainer)": [[226, "pyhelayers.mltoolbox.trainer.make_confusion_matrix"]], "nd_loss() (in module pyhelayers.mltoolbox.trainer)": [[227, "pyhelayers.mltoolbox.trainer.nd_loss"]], "places205dataset (class in pyhelayers.mltoolbox.trainer)": [[228, "pyhelayers.mltoolbox.trainer.places205Dataset"]], "print_summary() (in module pyhelayers.mltoolbox.trainer)": [[229, "pyhelayers.mltoolbox.trainer.print_summary"]], "top_k_acc() (in module pyhelayers.mltoolbox.trainer)": [[230, "pyhelayers.mltoolbox.trainer.top_k_acc"]], "__init__() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.__init__"]], "clear() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.clear"]], "close() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.close"]], "display() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.display"]], "external_write_mode() (tqdm class method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.external_write_mode"]], "format_dict (tqdm property)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.format_dict"]], "format_interval() (tqdm static method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.format_interval"]], "format_meter() (tqdm static method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.format_meter"]], "format_num() (tqdm static method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.format_num"]], "format_sizeof() (tqdm static method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.format_sizeof"]], "get_lock() (tqdm class method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.get_lock"]], "pandas() (tqdm class method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.pandas"]], "refresh() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.refresh"]], "reset() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.reset"]], "set_description() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.set_description"]], "set_description_str() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.set_description_str"]], "set_lock() (tqdm class method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.set_lock"]], "set_postfix() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.set_postfix"]], "set_postfix_str() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.set_postfix_str"]], "status_printer() (tqdm static method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.status_printer"]], "tqdm (class in pyhelayers.mltoolbox.trainer)": [[231, "pyhelayers.mltoolbox.trainer.tqdm"]], "unpause() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.unpause"]], "update() (tqdm method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.update"]], "wrapattr() (tqdm class method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.wrapattr"]], "write() (tqdm class method)": [[231, "pyhelayers.mltoolbox.trainer.tqdm.write"]], "pyhelayers.mltoolbox.utils": [[232, "module-pyhelayers.mltoolbox.utils"]], "pyhelayers.mltoolbox.utils.cf_matrix": [[233, "module-pyhelayers.mltoolbox.utils.cf_matrix"]], "comp_confusion_matrix() (in module pyhelayers.mltoolbox.utils.cf_matrix)": [[234, "pyhelayers.mltoolbox.utils.cf_matrix.comp_confusion_matrix"]], "confusion_matrix() (in module pyhelayers.mltoolbox.utils.cf_matrix)": [[235, "pyhelayers.mltoolbox.utils.cf_matrix.confusion_matrix"]], "format_acc_results() (in module pyhelayers.mltoolbox.utils.cf_matrix)": [[236, "pyhelayers.mltoolbox.utils.cf_matrix.format_acc_results"]], "get_accuracy_metrics() (in module pyhelayers.mltoolbox.utils.cf_matrix)": [[237, "pyhelayers.mltoolbox.utils.cf_matrix.get_accuracy_metrics"]], "get_logger() (in module pyhelayers.mltoolbox.utils.cf_matrix)": [[238, "pyhelayers.mltoolbox.utils.cf_matrix.get_logger"]], "hmean() (in module pyhelayers.mltoolbox.utils.cf_matrix)": [[239, "pyhelayers.mltoolbox.utils.cf_matrix.hmean"]], "make_1d_labels() (in module pyhelayers.mltoolbox.utils.cf_matrix)": [[240, "pyhelayers.mltoolbox.utils.cf_matrix.make_1d_labels"]], "make_confusion_matrix() (in module pyhelayers.mltoolbox.utils.cf_matrix)": [[241, "pyhelayers.mltoolbox.utils.cf_matrix.make_confusion_matrix"]], "namedtuple() (in module pyhelayers.mltoolbox.utils.cf_matrix)": [[242, "pyhelayers.mltoolbox.utils.cf_matrix.namedtuple"]], "pyhelayers.mltoolbox.utils.metrics_tracker": [[243, "module-pyhelayers.mltoolbox.utils.metrics_tracker"]], "pyhelayers.mltoolbox.utils.training_debug": [[244, "module-pyhelayers.mltoolbox.utils.training_debug"]], "pyhelayers.mltoolbox.utils.util": [[245, "module-pyhelayers.mltoolbox.utils.util"]], "accuracy() (in module pyhelayers.mltoolbox.utils.util)": [[246, "pyhelayers.mltoolbox.utils.util.accuracy"]], "create_log_title() (in module pyhelayers.mltoolbox.utils.util)": [[247, "pyhelayers.mltoolbox.utils.util.create_log_title"]], "date_str() (in module pyhelayers.mltoolbox.utils.util)": [[248, "pyhelayers.mltoolbox.utils.util.date_str"]], "__init__() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.__init__"]], "astimezone() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.astimezone"]], "combine() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.combine"]], "ctime() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.ctime"]], "date() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.date"]], "datetime (class in pyhelayers.mltoolbox.utils.util)": [[249, "pyhelayers.mltoolbox.utils.util.datetime"]], "dst() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.dst"]], "fromisocalendar() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.fromisocalendar"]], "fromisoformat() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.fromisoformat"]], "fromordinal() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.fromordinal"]], "fromtimestamp() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.fromtimestamp"]], "isocalendar() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.isocalendar"]], "isoformat() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.isoformat"]], "isoweekday() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.isoweekday"]], "now() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.now"]], "replace() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.replace"]], "strftime() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.strftime"]], "strptime() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.strptime"]], "time() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.time"]], "timestamp() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.timestamp"]], "timetuple() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.timetuple"]], "timetz() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.timetz"]], "today() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.today"]], "toordinal() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.toordinal"]], "tzname() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.tzname"]], "utcfromtimestamp() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.utcfromtimestamp"]], "utcnow() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.utcnow"]], "utcoffset() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.utcoffset"]], "utctimetuple() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.utctimetuple"]], "weekday() (datetime method)": [[249, "pyhelayers.mltoolbox.utils.util.datetime.weekday"]], "get_logger() (in module pyhelayers.mltoolbox.utils.util)": [[250, "pyhelayers.mltoolbox.utils.util.get_logger"]], "get_optimizer() (in module pyhelayers.mltoolbox.utils.util)": [[251, "pyhelayers.mltoolbox.utils.util.get_optimizer"]], "has_nan() (in module pyhelayers.mltoolbox.utils.util)": [[252, "pyhelayers.mltoolbox.utils.util.has_nan"]], "load_checkpoint() (in module pyhelayers.mltoolbox.utils.util)": [[253, "pyhelayers.mltoolbox.utils.util.load_checkpoint"]], "postproc_model() (in module pyhelayers.mltoolbox.utils.util)": [[254, "pyhelayers.mltoolbox.utils.util.postproc_model"]], "print_summary() (in module pyhelayers.mltoolbox.utils.util)": [[255, "pyhelayers.mltoolbox.utils.util.print_summary"]], "read_filepaths() (in module pyhelayers.mltoolbox.utils.util)": [[256, "pyhelayers.mltoolbox.utils.util.read_filepaths"]], "save_checkpoint() (in module pyhelayers.mltoolbox.utils.util)": [[257, "pyhelayers.mltoolbox.utils.util.save_checkpoint"]], "save_model() (in module pyhelayers.mltoolbox.utils.util)": [[258, "pyhelayers.mltoolbox.utils.util.save_model"]], "save_onnx() (in module pyhelayers.mltoolbox.utils.util)": [[259, "pyhelayers.mltoolbox.utils.util.save_onnx"]], "top_k_acc() (in module pyhelayers.mltoolbox.utils.util)": [[260, "pyhelayers.mltoolbox.utils.util.top_k_acc"]], "write_to_csv() (in module pyhelayers.mltoolbox.utils.util)": [[261, "pyhelayers.mltoolbox.utils.util.write_to_csv"]], "prepare_default_plain_blocks_for_aes_encryption() (in module pyhelayers)": [[262, "pyhelayers.prepare_default_plain_blocks_for_aes_encryption"]], "set_neural_net_verbosity_level() (in module pyhelayers)": [[263, "pyhelayers.set_neural_net_verbosity_level"]]}})