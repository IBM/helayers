{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"IBM HElayers","text":""},{"location":"#scope","title":"Scope","text":"<p>IBM HElayers is a software development kit (SDK) for the practical and efficient execution of encrypted workloads using fully homomorphic encrypted data. HElayers is designed to enable application developers and data scientists to seamlessly apply advanced privacy-preserving techniques without requiring specialized skills in cryptography.</p> <p>HElayers now powers IBM's FHE Cloud Service, a beta cloud service that enables data scientists and developers to deploy privacy preserving machine learning driven Software-as-a-Service (SaaS) applications in the Cloud.</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#python-api-with-helayers-pylab-docker-image","title":"Python API with helayers-pylab Docker image","text":"<p>See Python on x86 to explore and use HElayers using a Python API.</p> <p>See Python on Z to explore and use HElayers using a Python API on IBM Z and IBM LinuxONE.</p>"},{"location":"#c-api-with-helayers-lab-docker-image","title":"C++ API with helayers-lab Docker image","text":"<p>See C++ on x86 to explore and use HElayers using a C++ API.</p> <p>See C++ on Z to explore and use HElayers using a C++ API on IBM Z and IBM LinuxONE.</p>"},{"location":"#pyhelayers-python-package","title":"pyhelayers Python package","text":"<p>Install the pyhelayers Python package:</p> <pre><code>pip install pyhelayers\n</code></pre> <p>This is currently supported on Linux only (x86 and IBM Z).</p>"},{"location":"#pyhelayerslite-python-package","title":"pyhelayerslite Python package","text":"<p>Install the pyhelayerslite Python package:</p> <pre><code>pip install pyhelayerslite\n</code></pre> <p>This is currently supported on Windows only.</p>"},{"location":"#license","title":"License","text":"<p>HElayers is provided under a community edition license for non-commercial use; see license. For commercial deployments and access to the source code, please contact chamliam@ie.ibm.com for the Premium Edition license.</p>"},{"location":"#citing-ibm-helayers","title":"Citing IBM HELayers","text":"<p>To cite IBM HELayers, please use:</p> <p>Aharoni, E., Adir, A., Baruch, M., Drucker, N., Ezov, G., Farkash, A., Greenberg, L., Masalha, R., Moshkowich, G., Murik, D. and Shaul, H., 2020. HeLayers: A Tile Tensors Framework for Large Neural Networks on Encrypted Data. (2023), Privacy Enhancing Technology Symposium (PETs) 2023 (To be published)</p> <p>Bibtex:</p> <pre><code>@article{helayers,\n  author = {Aharoni, Ehud and Adir, Allon and Baruch, Moran and Drucker, Nir and Ezov, Gilad and Farkash, Ariel and Greenberg, Lev and Masalha, Ramy and Moshkowich, Guy and Murik, Dov and Shaul, Hayim and Soceanu, Omri},\n  journal = {Privacy Enhancing Technology Symposium (PETs) 2023},\n  title = {{HeLayers: A Tile Tensors Framework for Large Neural Networks on Encrypted Data}},\n  url = {https://petsymposium.org/2023/paperlist.php},\n  year = {2023}\n}\n</code></pre>"},{"location":"#support","title":"Support","text":"<p>For questions and comments about HElayers please visit our slack channel #helayers on IBM AIF360 workspace.</p>"},{"location":"lab-s390x/","title":"C++ for Z","text":""},{"location":"lab-s390x/#overview","title":"Overview","text":"<p>helayers-lab-s390x is based on HELayers which is written in C++ and includes a C++ API that enables data scientists and application developers to easily use the power of FHE by supporting a wide array of analytics such as Linear/Logistic Regression and Neural Networks. HELayers has been designed with a layered set of capabilities and coupled with appropriate APIs so users can fully utilize the services provided by the SDK. HELayers is delivered as an open platform, capable of using the latest FHE implementations for a given use case. It is enabled with patented optimization and performance boosting innovation for computation, AI innovation and use case requirements that facilitate the practical use of a wide variety of AI workloads over FHE data.</p>"},{"location":"lab-s390x/#system-requirements","title":"System Requirements","text":"<p>HElayers is a Linux based Docker image. The only requirement is a system that is capable of running a container, such as Docker, with the necessary user privileges to run docker commands. It is also assumed you have a working internet connection.</p> <p>This image is built to run on all zSystems architectures including Linux on IBM Z (z16 and LinuxOne III), and zCX Container Extensions</p> <p></p>"},{"location":"lab-s390x/#license","title":"License","text":"<p>This image is provided under a community edition license for non-commercial use; see license. For commercial deployments and access to the source code, please contact chamliam@ie.ibm.com for the premium edition license.</p> <p></p>"},{"location":"lab-s390x/#call-to-action","title":"Call to Action","text":"<ol> <li> <p>To help us create the best possible offering tailored to your needs, please provide feedback by taking the HElayers Experience Survey</p> </li> <li> <p>For more information on FHE, please visit our Content Solutions Page</p> </li> <li> <p>For more information on IBM HElayers, please visit our IBM Developer Blog</p> </li> </ol> <p></p>"},{"location":"lab-s390x/#installation","title":"Installation","text":"<p>Note: Do not expose the HElayers containers to unauthorized access. Anyone with access to the container web interface will be able to execute code inside it. Only start the HElayers containers on local personal computers or on servers with controlled access.</p>"},{"location":"lab-s390x/#step-1-pull-the-docker-image","title":"Step 1: Pull the Docker image","text":"<p>In your terminal pull this image from IBM Container Registry to your local repository.</p> <pre><code>docker pull icr.io/helayers/helayers-lab-s390x:latest\n</code></pre> <p>If you specify <code>:latest</code>, it will always pull the most recent version.  However, if you are looking for a specific version you can replace <code>:latest</code> with the version number, such as <code>:1.0</code>.</p> <p>If the fetch is successful, it will download the image and you will now have an image in your local repository named <code>icr.io/helayers/helayers-lab:latest</code>.  Check that this image exists with</p> <pre><code>docker images\n</code></pre>"},{"location":"lab-s390x/#step-2-running-the-image","title":"Step 2: Running the image","text":"<p>Once the image download is complete, <code>run</code> the image as a container in Docker...</p> <pre><code>docker run -p 8443:8443 -d --rm --name helayers-lab-s390x icr.io/helayers/helayers-lab-s390x:latest\n</code></pre> <p>This command runs the image and sets the container to be accessed via port 8443.  It also gives the container a name called <code>helayers-lab-s390x</code>, which we can use to find it in the list of other running containers.</p>"},{"location":"lab-s390x/#step-3-access-helayers","title":"Step 3: Access HElayers","text":"<p>Open a web browser on your host machine (not the docker container instance), and browse to http://127.0.0.1:8443/ .  This will connect you to the welcome page of the VS Code.</p> <p>Note: if you run the web browser in different machine than the docker container, then you need to change the IP address of the URL.</p>"},{"location":"lab-s390x/#step-4-getting-started-with-the-tutorials","title":"Step 4: Getting Started with the tutorials","text":"<p>Click on the application menu (three bars icon, top left), and Choose Terminal &gt; New Terminal</p> <p>In the terminal change directory to examples/ <p>Follow the directions in the readme file of that demo.</p> <p>Available demos:</p>"},{"location":"lab-s390x/#hebase-tutorial","title":"Hebase tutorial","text":"<p>Basic layer 1 (hebase - abstract layer) tutorial. It demonstrates helayer's low level API for manipulating ciphertexts directly.</p>"},{"location":"lab-s390x/#neural-network-tutorials","title":"Neural network tutorials","text":"<p>Step by step tutorials how to use the C++ API for NN inference</p>"},{"location":"lab-s390x/#linear-regression","title":"Linear regression","text":"<p>Compute linear regression using encrypted model and data.</p>"},{"location":"lab-s390x/#logistic-regression-inference-on-a-credit-card-fraud-detection-dataset","title":"Logistic Regression Inference on a Credit Card Fraud Detection Dataset","text":"<p>Build a logistic regression model encrypted under HE, and run inference of encrypted samples from a dataset of credit card transactions.</p>"},{"location":"lab-s390x/#nearest-neighbor","title":"Nearest neighbor","text":"<p>Encrypt a set of centroids and find nearest neighbor under HE. Given an encrypted samples, we compute the distance between each sample and each centroid under encryption. On the client side, the results are decrypted and automatically post-processed to obtain the nearest neighbor.</p>"},{"location":"lab-s390x/#bitwise-tutorial","title":"Bitwise tutorial","text":"<p>Tutorial explaining the bitwise API (implemented with the BGV scheme)</p>"},{"location":"lab-s390x/#decicion-tree-inference","title":"Decicion tree inference","text":"<p>Decision tree inference for credit card fraud detection</p>"},{"location":"lab-s390x/#neural-network-demos","title":"Neural network demos","text":"<p>Neural network inference for MNIST, medical, and credit-card fraud datasets. Note that the neural network tutorials above are more recommended for beginners.</p>"},{"location":"lab-s390x/#bgv-world-country-db-lookup","title":"BGV world country db lookup","text":"<p>Encrypted query over an encrypted database. Uses the BGV scheme, and Fermat's little theorem to compute equality over the modular arithmetic supplied by the scheme.</p>"},{"location":"lab/","title":"C++ for x86","text":""},{"location":"lab/#overview","title":"Overview","text":"<p>helayers-lab is based on HELayers which is written in C++ and includes a C++ API that enables data scientists and application developers to easily use the power of FHE by supporting a wide array of analytics such as Linear/Logistic Regression and Neural Networks. HELayers has been designed with a layered set of capabilities and coupled with appropriate APIs so users can fully utilize the services provided by the SDK. HELayers is delivered as an open platform, capable of using the latest FHE implementations for a given use case. It is enabled with patented optimization and performance boosting innovation for computation, AI innovation and use case requirements that facilitate the practical use of a wide variety of AI workloads over FHE data.</p> <p>The demos use three backends: SEAL, HELib, and HEaaN. For most demos it is easy to switch between different backends, and explore which works best in each case.</p>"},{"location":"lab/#system-requirements","title":"System Requirements","text":"<p>HElayers is a Linux based Docker image. The only requirement is a system that is capable of running a container, such as Docker, with the necessary user privileges to run docker commands. It is also assumed you have a working internet connection.</p> <p>This image is built to run on all x86 64-bit architectures including Linux, macOS, and Windows.  When the container is running, interactions are through a C++ IDE accessed via the browser.</p> <p></p>"},{"location":"lab/#license","title":"License","text":"<p>This image is provided under a community edition license for non-commercial use; see license. For commercial deployments and access to the source code, please contact chamliam@ie.ibm.com for the premium edition license.</p> <p></p>"},{"location":"lab/#call-to-action","title":"Call to Action","text":"<ol> <li> <p>To help us create the best possible offering tailored to your needs, please provide feedback by taking the HElayers Experience Survey</p> </li> <li> <p>For more information on FHE, please visit our Content Solutions Page</p> </li> <li> <p>For more information on IBM HElayers, please visit our IBM Developer Blog</p> </li> </ol> <p></p>"},{"location":"lab/#installation","title":"Installation","text":"<p>Note: Do not expose the HElayers containers to unauthorized access. Anyone with access to the container web interface will be able to execute code inside it. Only start the HElayers containers on local personal computers or on servers with controlled access.</p>"},{"location":"lab/#step-1-pull-the-docker-image","title":"Step 1: Pull the Docker image","text":"<p>In your terminal pull this image from IBM Container Registry to your local repository.</p> <pre><code>docker pull icr.io/helayers/helayers-lab:latest\n</code></pre> <p>If you specify <code>:latest</code>, it will always pull the most recent version.  However, if you are looking for a specific version you can replace <code>:latest</code> with the version number, such as <code>:1.0</code>.</p> <p>If the fetch is successful, it will download the image and you will now have an image in your local repository named <code>icr.io/helayers/helayers-lab:latest</code>.  Check that this image exists with</p> <pre><code>docker images\n</code></pre>"},{"location":"lab/#step-2-running-the-image","title":"Step 2: Running the image","text":"<p>Once the image download is complete, <code>run</code> the image as a container in Docker...  </p> <pre><code>docker run -p 8443:8443 -d --rm --name helayers-lab icr.io/helayers/helayers-lab:latest\n</code></pre> <p>This command runs the image and sets the container to be accessed via port 8443.  It also gives the container a name called <code>helayers-lab</code>, which we can use to find it in the list of other running containers.</p>"},{"location":"lab/#step-3-access-helayers","title":"Step 3: Access HElayers","text":"<p>Open a web browser on your host machine (not the docker container instance), and browse to http://127.0.0.1:8443/ .  This will connect you to the welcome page of the VS Code.  </p> <p>Note: if you run the web browser in different machine than the docker container, then you need to change the IP address of the URL.</p>"},{"location":"lab/#step-4-getting-started-with-the-tutorials","title":"Step 4: Getting Started with the tutorials","text":"<p>Click on the application menu (three bars icon, top left), and Choose Terminal &gt; New Terminal</p> <p>In the terminal change directory to examples/ <p>Follow the directions in the readme file of that demo.</p> <p>Available demos:</p>"},{"location":"lab/#hebase-tutorial","title":"Hebase tutorial","text":"<p>Basic layer 1 (hebase - abstract layer) tutorial. It  demonstrates helayer's low level API for manipulating ciphertexts directly.</p>"},{"location":"lab/#neural-network-tutorials","title":"Neural network tutorials","text":"<p>Step by step tutorials how to use the C++ API for NN inference</p>"},{"location":"lab/#linear-regression","title":"Linear regression","text":"<p>Compute linear regression using encrypted model and data.</p>"},{"location":"lab/#logistic-regression-inference-on-a-credit-card-fraud-detection-dataset","title":"Logistic Regression Inference on a Credit Card Fraud Detection Dataset","text":"<p>Build a logistic regression model encrypted under HE, and run inference of encrypted samples from a dataset of credit card transactions.</p>"},{"location":"lab/#nearest-neighbor","title":"Nearest neighbor","text":"<p>Encrypt a set of centroids and find nearest neighbor under HE. Given an encrypted samples, we compute the distance between each sample and each centroid under encryption. On the client side, the results are decrypted and automatically post-processed to obtain the nearest neighbor.</p>"},{"location":"lab/#bitwise-tutorial","title":"Bitwise tutorial","text":"<p>Tutorial explaining the bitwise API (implemented with the BGV scheme)</p>"},{"location":"lab/#decicion-tree-inference","title":"Decicion tree inference","text":"<p>Decision tree inference for credit card fraud detection</p>"},{"location":"lab/#neural-network-demos","title":"Neural network demos","text":"<p>Neural network inference for MNIST, medical, and credit-card fraud datasets. Note that the neural network tutorials above are more recommended for beginners.</p>"},{"location":"lab/#bgv-world-country-db-lookup","title":"BGV world country db lookup","text":"<p>Encrypted query over an encrypted database. Uses the BGV scheme, and Fermat's little theorem to compute equality over the modular arithmetic supplied by the scheme.</p>"},{"location":"pylab-s390x/","title":"Overview","text":"<p>helayers-pylab-s390x is based on HELayers which is written in C++ and includes a Python API that is designed to enable application developers and data scientists to seamlessly apply advanced privacy preserving techniques without requiring specialized skills in cryptography - all while working in a newly integrated Python environment. HElayers is engineered to support a wide array of analytics such as linear regression, logistic regression, and neural networks so that application developers and data scientists can use the power of FHE. It is delivered as an open platform that is capable of using the latest FHE schemes and libraries for a given use case and ships with a multitude of tutorials and sample applications that highlight the basics of FHE and how to use this technology in a practical way. Sample applications include credit card fraud detection, encrypted database search, text classification, and various examples from the healthcare industry.</p>"},{"location":"pylab-s390x/#system-requirements","title":"System Requirements","text":"<p>Helayers is a Linux based Docker image.  The only requirement is a system that is capable of running a container, such as Docker, with the necessary user privileges to run docker commands. It is also assumed you have a working internet connection.</p> <p>This image is built to run on all zSystems architectures including Linux on IBM Z (z16 and LinuxOne III), and zCX Container Extensions.</p>"},{"location":"pylab-s390x/#license","title":"License","text":"<p>This image is provided under a community edition license for non-commercial use; see license. For commercial deployments and access to the source code, please contact chamliam@ie.ibm.com for the Premium Edition license.</p>"},{"location":"pylab-s390x/#call-to-action","title":"Call to Action","text":"<ol> <li> <p>To help us create the best possible offering tailored to your needs, please provide feedback by taking the HElayers Experience Survey</p> </li> <li> <p>For more information on FHE, please visit our Content Solutions Page</p> </li> <li> <p>For more information on IBM HElayers, please visit our IBM Developer Blog</p> </li> </ol>"},{"location":"pylab-s390x/#getting-started","title":"Getting Started","text":"<p>To get started with HElayers, follow our instructional setup video or continue to the Installation section.</p> <p></p>"},{"location":"pylab-s390x/#installation","title":"Installation","text":"<p>Note: Do not expose the HElayers containers to unauthorized access. Anyone with access to the container web interface will be able to execute code inside it. Only start the HElayers containers on local personal computers or on servers with controlled access.</p>"},{"location":"pylab-s390x/#step-1-pull-the-docker-image","title":"Step 1: Pull the Docker image","text":"<p>In your terminal pull this image from IBM Container Registry to your local repository.</p> <pre><code>docker pull icr.io/helayers/helayers-pylab-s390x:latest\n</code></pre> <p>If you specify <code>:latest</code>, it will always pull the most recent version.  However, if you are looking for a specific version you can replace <code>:latest</code> with the version number, such as <code>:1.0</code>.</p> <p>If the fetch is successful, it will download the image and you will now have an image in your local repository named <code>icr.io/helayers/helayers-pylab-s390x:latest</code>.  Check that this image exists with</p> <pre><code>docker images\n</code></pre>"},{"location":"pylab-s390x/#step-2-run-the-image","title":"Step 2: Run the image","text":"<p>Once the image download is complete, <code>run</code> the image as a container in Docker...</p> <pre><code>docker run -p 8888:8888 -d --rm --name helayers-pylab-s390x icr.io/helayers/helayers-pylab-s390x:latest\n</code></pre> <p>This command runs the image and sets the container to be accessed via port 8888.  It also gives the container a name called <code>helayers-pylab-s390x</code>, which we can use to find it in the list of other running containers.</p>"},{"location":"pylab-s390x/#step-3-access-helayers","title":"Step 3: Access HElayers","text":"<p>Open a web browser on your host machine (not the docker container instance), and browse to http://127.0.0.1:8888/lab/?token=demo-experience-with-fhe-and-python .  This will connect you to the welcome page of the Juptyer notebook.</p> <p>Note: if you run the web browser in different machine than the docker container, then you need to change the IP address of the URL.</p>"},{"location":"pylab-s390x/#step-4-get-started-with-the-tutorials-and-demo-applications","title":"Step 4: Get started with the tutorials and demo applications","text":"<p>Open the first notebook, by double clicking the one titled <code>00_Getting_Started.ipynb</code>.  This is a notebook that contains information about the different tutorials that are available, as well as instructions on how to run each one.</p>"},{"location":"pylab/","title":"Overview","text":"<p>helayers-pylab is based on HELayers which is written in C++ and includes a Python API that is designed to enable application developers and data scientists to seamlessly apply advanced privacy preserving techniques without requiring specialized skills in cryptography - all while working in a newly integrated Python environment. HElayers is engineered to support a wide array of analytics such as linear regression, logistic regression, and neural networks so that application developers and data scientists can use the power of FHE. It is delivered as an open platform that is capable of using the latest FHE schemes and libraries for a given use case and ships with a multitude of tutorials and sample applications that highlight the basics of FHE and how to use this technology in a practical way. Sample applications include credit card fraud detection, encrypted database search, text classification, and various examples from the healthcare industry.</p> <p>The demos use three backends: SEAL, HELib, and HEaaN. For most demos it is easy to switch between different backends, and explore which works best in each case.</p>"},{"location":"pylab/#system-requirements","title":"System Requirements","text":"<p>HElayers is a Linux based Docker image. The only requirement is a system that is capable of running a container, such as Docker, with the necessary user privileges to run docker commands. It is also assumed you have a working internet connection.</p> <p>This image is built to run on all x86 64-bit architectures including Linux, macOS, and Windows.  When the container is running, interactions are through a Python Jupyter notebook accessed via the browser.</p> <p></p>"},{"location":"pylab/#license","title":"License","text":"<p>This image is provided under a community edition license for non-commercial use; see license. For commercial deployments and access to the source code, please contact chamliam@ie.ibm.com for the Premium Edition license.</p> <p></p>"},{"location":"pylab/#call-to-action","title":"Call to Action","text":"<ol> <li> <p>To help us create the best possible offering tailored to your needs, please provide feedback by taking the HElayers Experience Survey</p> </li> <li> <p>For more information on FHE, please visit our Content Solutions Page</p> </li> <li> <p>For more information on IBM HElayers, please visit our IBM Developer Blog</p> </li> </ol> <p></p>"},{"location":"pylab/#getting-started","title":"Getting Started","text":"<p>To get started with HElayers, follow our instructional setup video or continue to the Installation section.</p> <p></p> <p></p>"},{"location":"pylab/#installation","title":"Installation","text":"<p>Note: Do not expose the HElayers containers to unauthorized access. Anyone with access to the container web interface will be able to execute code inside it. Only start the HElayers containers on local personal computers or on servers with controlled access.</p>"},{"location":"pylab/#step-1-pull-the-docker-image","title":"Step 1: Pull the Docker image","text":"<p>In your terminal pull this image from IBM Container Registry to your local repository.</p> <pre><code>docker pull icr.io/helayers/helayers-pylab:latest\n</code></pre> <p>If you specify <code>:latest</code>, it will always pull the most recent version.  However, if you are looking for a specific version you can replace <code>:latest</code> with the version number, such as <code>:1.0</code>.</p> <p>If the fetch is successful, it will download the image and you will now have an image in your local repository named <code>icr.io/helayers/helayers-pylab:latest</code>.  Check that this image exists with</p> <pre><code>docker images\n</code></pre>"},{"location":"pylab/#step-2-run-the-image","title":"Step 2: Run the image","text":"<p>Once the image download is complete, <code>run</code> the image as a container in Docker...</p> <pre><code>docker run -p 8888:8888 -d --rm --name helayers-pylab icr.io/helayers/helayers-pylab:latest\n</code></pre> <p>This command runs the image and sets the container to be accessed via port 8888.  It also gives the container a name called <code>helayers-pylab</code>, which we can use to find it in the list of other running containers.</p>"},{"location":"pylab/#step-3-access-helayers","title":"Step 3: Access HElayers","text":"<p>Open a web browser on your host machine (not the docker container instance), and browse to http://127.0.0.1:8888/lab/?token=demo-experience-with-fhe-and-python .  This will connect you to the welcome page of the Juptyer notebook.</p> <p>Note: if you run the web browser in different machine than the docker container, then you need to change the IP address of the URL.</p>"},{"location":"pylab/#step-4-get-started-with-the-tutorials-and-demo-applications","title":"Step 4: Get started with the tutorials and demo applications","text":"<p>Open the first notebook, by double clicking the one titled <code>00_Getting_Started.ipynb</code>.  This is a notebook that contains information about the different tutorials that are available, as well as instructions on how to run each one.</p>"},{"location":"cpp-sdk/","title":"HELayers C++ SDK Documentation","text":"<p>Choose a version (or the latest one):</p> <ul> <li>1.5.2.0</li> <li>1.5.1.0</li> </ul>"},{"location":"python-sdk/","title":"HELayers Python SDK Documentation","text":"<p>Choose a version (or the latest one):</p> <ul> <li>1.5.2.0</li> </ul>"}]}